# SPDX-FileCopyrightText: Copyright (c) 2023-2025, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0

import datetime

# NOTE: this template is not perfectly formatted. Use pre-commit to get
# everything in shape again.
header = f"""/*
 * SPDX-FileCopyrightText: Copyright (c) 2024-{datetime.datetime.today().year}, NVIDIA CORPORATION.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * NOTE: this file is generated by dispatch_00_generate.py
 *
 * Make changes there and run in this directory:
 *
 * > python dispatch_00_generate.py
 *
 */

#include <raft/core/operators.hpp> // raft::identity_op
#include "../distance_ops/all_ops.cuh"  // ops::*
#include "dispatch-inl.cuh" // dispatch
"""


macro = """
#define instantiate_raft_distance_detail_pairwise_matrix_dispatch(                     \\
  OpT, DataT, AccT, OutT, FinOpT, IdxT)                                                \\
  template void cuvs::distance::detail::                                               \\
    pairwise_matrix_dispatch<OpT<DataT, AccT, IdxT>, DataT, AccT, OutT, FinOpT, IdxT>( \\
      OpT<DataT, AccT, IdxT> distance_op,                                              \\
      IdxT m,                                                                          \\
      IdxT n,                                                                          \\
      IdxT k,                                                                          \\
      const DataT* x,                                                                  \\
      const DataT* y,                                                                  \\
      const OutT* x_norm,                                                              \\
      const OutT* y_norm,                                                              \\
      OutT* out,                                                                       \\
      FinOpT fin_op,                                                                   \\
      cudaStream_t stream,                                                             \\
      bool is_row_major)
"""

data_type_instances = [
    dict(
        DataT="float",
        AccT="float",
        OutT="float",
        IdxT="int",
    ),
    dict(
        DataT="double",
        AccT="double",
        OutT="double",
        IdxT="int",
    ),
    dict(
        DataT="half",
        AccT="float",
        OutT="float",
        IdxT="int",
    ),
]

op_instances = [
    dict(
        path_prefix="canberra",
        OpT="cuvs::distance::detail::ops::canberra_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="correlation",
        OpT="cuvs::distance::detail::ops::correlation_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="cosine",
        OpT="cuvs::distance::detail::ops::cosine_distance_op",
        archs = [60, 80],
    ),
    dict(
        path_prefix="hamming_unexpanded",
        OpT="cuvs::distance::detail::ops::hamming_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="hellinger_expanded",
        OpT="cuvs::distance::detail::ops::hellinger_distance_op",
        archs = [60],
    ),
    # inner product is handled by cublas.
    dict(
        path_prefix="jensen_shannon",
        OpT="cuvs::distance::detail::ops::jensen_shannon_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="kl_divergence",
        OpT="cuvs::distance::detail::ops::kl_divergence_op",
        archs = [60],
    ),
    dict(
        path_prefix="l1",
        OpT="cuvs::distance::detail::ops::l1_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="l2_expanded",
        OpT="cuvs::distance::detail::ops::l2_exp_distance_op",
        archs = [60, 80],
    ),
    dict(
        path_prefix="l2_unexpanded",
        OpT="cuvs::distance::detail::ops::l2_unexp_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="l_inf",
        OpT="cuvs::distance::detail::ops::l_inf_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="lp_unexpanded",
        OpT="cuvs::distance::detail::ops::lp_unexp_distance_op",
        archs = [60],
    ),
    dict(
        path_prefix="russel_rao",
        OpT="cuvs::distance::detail::ops::russel_rao_distance_op",
        archs = [60],
     ),
]

def arch_headers(archs):
    include_headers ="\n".join([
        f"#include \"dispatch_sm{arch}.cuh\""
        for arch in archs
    ])
    return include_headers



for op in op_instances:
    for dt in data_type_instances:
        DataT, AccT, OutT, IdxT = (dt[k] for k in ["DataT", "AccT", "OutT", "IdxT"]);
        path = f"dispatch_{op['path_prefix']}_{DataT}_{AccT}_{OutT}_{IdxT}.cu"
        with open(path, "w") as f:
            f.write(header)
            f.write(arch_headers(op["archs"]))
            f.write(macro)

            OpT = op['OpT']
            FinOpT = "raft::identity_op"
            f.write(f"\ninstantiate_raft_distance_detail_pairwise_matrix_dispatch({OpT}, {DataT}, {AccT}, {OutT}, {FinOpT}, {IdxT});\n")
            f.write("\n#undef instantiate_raft_distance_detail_pairwise_matrix_dispatch\n")
        print(f"src/distance/detail/pairwise_matrix/{path}")

# Dispatch kernels for with the RBF fin op.
with open("dispatch_rbf.cu", "w") as f:
        OpT="cuvs::distance::detail::ops::l2_unexp_distance_op"
        archs = [60]

        f.write(header)
        f.write("#include \"../kernels/rbf_fin_op.cuh\" // rbf_fin_op\n")
        f.write(arch_headers(archs))
        f.write(macro)

        for dt in data_type_instances:
            DataT, AccT, OutT, IdxT = (dt[k] for k in ["DataT", "AccT", "OutT", "IdxT"]);
            IdxT = "int64_t"    # overwrite IdxT

            FinOpT = f"cuvs::distance::kernels::detail::rbf_fin_op<{DataT}>"
            f.write(f"\ninstantiate_raft_distance_detail_pairwise_matrix_dispatch({OpT}, {DataT}, {AccT}, {OutT}, {FinOpT}, {IdxT});\n")

        f.write("\n#undef instantiate_raft_distance_detail_pairwise_matrix_dispatch\n")


        print("src/distance/detail/pairwise_matrix/dispatch_rbf.cu")

# L2 with int64_t indices for kmeans code
int64_t_op_instances = [
    dict(
        path_prefix="l2_expanded",
        OpT="cuvs::distance::detail::ops::l2_exp_distance_op",
        archs = [60, 80],
    )]

for op in int64_t_op_instances:
    for dt in data_type_instances:
        DataT, AccT, OutT, IdxT = (dt[k] for k in ["DataT", "AccT", "OutT", "IdxT"]);

        IdxT = "int64_t"
        path = f"dispatch_{op['path_prefix']}_{DataT}_{AccT}_{OutT}_{IdxT}.cu"
        with open(path, "w") as f:
            f.write(header)
            f.write(arch_headers(op["archs"]))
            f.write(macro)

            OpT = op['OpT']
            FinOpT = "raft::identity_op"
            f.write(f"\ninstantiate_raft_distance_detail_pairwise_matrix_dispatch({OpT}, {DataT}, {AccT}, {OutT}, {FinOpT}, {IdxT});\n")
            f.write("\n#undef instantiate_raft_distance_detail_pairwise_matrix_dispatch\n")
        print(f"src/distance/detail/pairwise_matrix/{path}")

# Bitwise Hamming with uint8_t/uint32_t types
bitwise_hamming_instances = [
    dict(
        DataT="uint8_t",
        AccT="uint32_t",
        OutT="uint32_t",
        IdxT="int64_t",
    ),
]

for dt in bitwise_hamming_instances:
    DataT, AccT, OutT, IdxT = (dt[k] for k in ["DataT", "AccT", "OutT", "IdxT"])
    path = f"dispatch_bitwise_hamming_{DataT}_{AccT}_{OutT}_{IdxT}.cu"
    with open(path, "w") as f:
        f.write(header)
        f.write("#include \"../distance_ops/bitwise_hamming.cuh\" // bitwise_hamming_distance_op\n")
        f.write(arch_headers([60]))  # SM60 architecture
        f.write(macro)

        OpT = "cuvs::distance::detail::ops::bitwise_hamming_distance_op"
        FinOpT = "raft::identity_op"
        f.write(f"\ninstantiate_raft_distance_detail_pairwise_matrix_dispatch({OpT}, {DataT}, {AccT}, {OutT}, {FinOpT}, {IdxT});\n")
        f.write("\n#undef instantiate_raft_distance_detail_pairwise_matrix_dispatch\n")
    print(f"src/distance/detail/pairwise_matrix/{path}")
