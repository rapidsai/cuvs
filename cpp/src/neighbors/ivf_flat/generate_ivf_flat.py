# SPDX-FileCopyrightText: Copyright (c) 2024-2025, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0

import datetime

header = f"""/*
 * SPDX-FileCopyrightText: Copyright (c) 2024-{datetime.datetime.today().year}, NVIDIA CORPORATION.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * NOTE: this file is generated by generate_ivf_flat.py
 *
 * Make changes there and run in this directory:
 *
 * > python generate_ivf_flat.py
 *
 */

#include <cuvs/neighbors/ivf_flat.hpp>
"""

build_include_macro = """
#include "ivf_flat_build.cuh"
"""
search_include_macro = """
#include "ivf_flat_search.cuh"
"""

serialize_include_macro = """
#include "ivf_flat_serialize.cuh"
"""

namespace_macro = """
namespace cuvs::neighbors::ivf_flat {
"""

footer = """
}  // namespace cuvs::neighbors::ivf_flat
"""

types = dict(
    float_int64_t=("float", "int64_t"),
    half_int64_t=("half", "int64_t"),
    int8_t_int64_t=("int8_t", "int64_t"),
    uint8_t_int64_t=("uint8_t", "int64_t"),
)

build_macro = """
#define CUVS_INST_IVF_FLAT_BUILD_EXTEND(T, IdxT)                                               \\
  auto build(raft::resources const& handle,                                                    \\
             const cuvs::neighbors::ivf_flat::index_params& params,                            \\
             raft::device_matrix_view<const T, IdxT, raft::row_major> dataset)                 \\
    ->cuvs::neighbors::ivf_flat::index<T, IdxT>                                                \\
  {                                                                                            \\
    return cuvs::neighbors::ivf_flat::index<T, IdxT>(                                          \\
      std::move(cuvs::neighbors::ivf_flat::detail::build(handle, params, dataset)));           \\
  }                                                                                            \\
                                                                                               \\
  void build(raft::resources const& handle,                                                    \\
             const cuvs::neighbors::ivf_flat::index_params& params,                            \\
             raft::device_matrix_view<const T, IdxT, raft::row_major> dataset,                 \\
             cuvs::neighbors::ivf_flat::index<T, IdxT>& idx)                                   \\
  {                                                                                            \\
    cuvs::neighbors::ivf_flat::detail::build(handle, params, dataset, idx);                    \\
  }                                                                                            \\
  auto build(raft::resources const& handle,                                                    \\
             const cuvs::neighbors::ivf_flat::index_params& params,                            \\
             raft::host_matrix_view<const T, IdxT, raft::row_major> dataset)                   \\
    ->cuvs::neighbors::ivf_flat::index<T, IdxT>                                                \\
  {                                                                                            \\
    return cuvs::neighbors::ivf_flat::index<T, IdxT>(                                          \\
      std::move(cuvs::neighbors::ivf_flat::detail::build(handle, params, dataset)));           \\
  }                                                                                            \\
                                                                                               \\
  void build(raft::resources const& handle,                                                    \\
             const cuvs::neighbors::ivf_flat::index_params& params,                            \\
             raft::host_matrix_view<const T, IdxT, raft::row_major> dataset,                   \\
             cuvs::neighbors::ivf_flat::index<T, IdxT>& idx)                                   \\
  {                                                                                            \\
    cuvs::neighbors::ivf_flat::detail::build(handle, params, dataset, idx);                    \\
  }                                                                                            \\
  auto extend(raft::resources const& handle,                                         \\
              raft::device_matrix_view<const T, IdxT, raft::row_major> new_vectors,  \\
              std::optional<raft::device_vector_view<const IdxT, IdxT>> new_indices, \\
              const cuvs::neighbors::ivf_flat::index<T, IdxT>& orig_index)           \\
    ->cuvs::neighbors::ivf_flat::index<T, IdxT>                                      \\
  {                                                                                  \\
    return cuvs::neighbors::ivf_flat::index<T, IdxT>(                                \\
      std::move(cuvs::neighbors::ivf_flat::detail::extend(                           \\
        handle, new_vectors, new_indices, orig_index)));                             \\
  }                                                                                  \\
                                                                                     \\
  void extend(raft::resources const& handle,                                         \\
              raft::device_matrix_view<const T, IdxT, raft::row_major> new_vectors,  \\
              std::optional<raft::device_vector_view<const IdxT, IdxT>> new_indices, \\
              cuvs::neighbors::ivf_flat::index<T, IdxT>* idx)                        \\
  {                                                                                  \\
    cuvs::neighbors::ivf_flat::detail::extend(                                       \\
      handle, new_vectors, new_indices, idx);                                        \\
  }                                                                                  \\
  auto extend(raft::resources const& handle,                                         \\
              raft::host_matrix_view<const T, IdxT, raft::row_major> new_vectors,    \\
              std::optional<raft::host_vector_view<const IdxT, IdxT>> new_indices,   \\
              const cuvs::neighbors::ivf_flat::index<T, IdxT>& orig_index)           \\
    ->cuvs::neighbors::ivf_flat::index<T, IdxT>                                      \\
  {                                                                                  \\
    return cuvs::neighbors::ivf_flat::index<T, IdxT>(                                \\
      std::move(cuvs::neighbors::ivf_flat::detail::extend(                           \\
        handle, new_vectors, new_indices, orig_index)));                             \\
  }                                                                                  \\
                                                                                     \\
  void extend(raft::resources const& handle,                                         \\
              raft::host_matrix_view<const T, IdxT, raft::row_major> new_vectors,    \\
              std::optional<raft::host_vector_view<const IdxT, IdxT>> new_indices,   \\
              cuvs::neighbors::ivf_flat::index<T, IdxT>* idx)                        \\
  {                                                                                  \\
    cuvs::neighbors::ivf_flat::detail::extend(                                       \\
      handle, new_vectors, new_indices, idx);                                        \\
  }
"""

search_macro = """
#define CUVS_INST_IVF_FLAT_SEARCH(T, IdxT)                                  \\
  void search(                                                              \\
    raft::resources const& handle,                                          \\
    const cuvs::neighbors::ivf_flat::search_params& params,                 \\
    const cuvs::neighbors::ivf_flat::index<T, IdxT>& index,                 \\
    raft::device_matrix_view<const T, IdxT, raft::row_major> queries,       \\
    raft::device_matrix_view<IdxT, IdxT, raft::row_major> neighbors,        \\
    raft::device_matrix_view<float, IdxT, raft::row_major> distances,       \\
    const cuvs::neighbors::filtering::base_filter& sample_filter)           \\
  {                                                                         \\
    cuvs::neighbors::ivf_flat::detail::search(                              \\
      handle, params, index, queries, neighbors, distances, sample_filter); \\
  }
"""

serialize_macro = ""

macros = dict(
    build_extend=dict(
        include=build_include_macro,
        definition=build_macro,
        name="CUVS_INST_IVF_FLAT_BUILD_EXTEND",
    ),
    search=dict(
        include=search_include_macro,
        definition=search_macro,
        name="CUVS_INST_IVF_FLAT_SEARCH",
    ),
    serialize=dict(
        include=serialize_include_macro,
        definition=serialize_macro,
        name="CUVS_INST_IVF_FLAT_SERIALIZE",
    ),
)

for type_path, (T, IdxT) in types.items():
    for macro_path, macro in macros.items():
        path = f"ivf_flat_{macro_path}_{type_path}.cu"
        with open(path, "w") as f:
            f.write(header)
            f.write(macro['include'])
            f.write(namespace_macro)
            f.write(macro["definition"])
            f.write(f"{macro['name']}({T}, {IdxT});\n\n")
            f.write(f"#undef {macro['name']}\n")
            f.write(footer)

        print(f"src/neighbors/ivf_flat/{path}")
