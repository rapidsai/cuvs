# SPDX-FileCopyrightText: Copyright (c) 2024-2025, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0

import datetime

header = f"""/*
 * SPDX-FileCopyrightText: Copyright (c) 2024-{datetime.datetime.today().year}, NVIDIA CORPORATION.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * NOTE: this file is generated by generate_mg.py
 *
 * Make changes there and run in this directory:
 *
 * > python generate_mg.py
 *
 */

"""

include_macro = """
#include "snmg.cuh"
"""

flat_macro = """
#define CUVS_INST_MG_FLAT(T, IdxT)                                                                                   \\
namespace cuvs::neighbors::ivf_flat {                                                                                \\
  using namespace cuvs::neighbors;                                                                                   \\
                                                                                                                     \\
  cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT> build(                                                \\
    const raft::resources& res,                                                                                      \\
    const mg_index_params<ivf_flat::index_params>& index_params,                                                     \\
    raft::host_matrix_view<const T, int64_t, row_major> index_dataset)                                               \\
  {                                                                                                                  \\
    cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT> index(res, index_params.mode);                      \\
    cuvs::neighbors::snmg::detail::build(res, index,                                                                 \\
                                       static_cast<const cuvs::neighbors::index_params*>(&index_params),             \\
                                       index_dataset);                                                               \\
    return index;                                                                                                    \\
  }                                                                                                                  \\
                                                                                                                     \\
  void extend(const raft::resources& res,                                                                            \\
              cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT>& index,                                   \\
              raft::host_matrix_view<const T, int64_t, row_major> new_vectors,                                       \\
              std::optional<raft::host_vector_view<const IdxT, int64_t>> new_indices)                                \\
  {                                                                                                                  \\
    cuvs::neighbors::snmg::detail::extend(res, index, new_vectors, new_indices);                                     \\
  }                                                                                                                  \\
                                                                                                                     \\
  void search(const raft::resources& res,                                                                            \\
              const cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT>& index,                             \\
              const mg_search_params<ivf_flat::search_params>& search_params,                                        \\
              raft::host_matrix_view<const T, int64_t, row_major> queries,                                           \\
              raft::host_matrix_view<IdxT, int64_t, row_major> neighbors,                                            \\
              raft::host_matrix_view<float, int64_t, row_major> distances)                                           \\
  {                                                                                                                  \\
    cuvs::neighbors::snmg::detail::search(res, index,                                                                \\
                                        static_cast<const cuvs::neighbors::search_params*>(&search_params),          \\
                                        queries, neighbors, distances);                                              \\
  }                                                                                                                  \\
                                                                                                                     \\
  void serialize(const raft::resources& res,                                                                         \\
                 const cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT>& index,                          \\
                 const std::string& filename)                                                                        \\
  {                                                                                                                  \\
    cuvs::neighbors::snmg::detail::serialize(res, index, filename);                                                  \\
  }                                                                                                                  \\
                                                                                                                     \\
  template<>                                                                                                         \\
  cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT> deserialize<T, IdxT>(                                 \\
    const raft::resources& res,                                                                                      \\
    const std::string& filename)                                                                                     \\
  {                                                                                                                  \\
    auto idx = cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT>(res, filename);                          \\
    return idx;                                                                                                      \\
  }                                                                                                                  \\
                                                                                                                     \\
  template<>                                                                                                         \\
  cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT> distribute<T, IdxT>(                                  \\
    const raft::resources& res,                                                                                      \\
    const std::string& filename)                                                                                     \\
  {                                                                                                                  \\
    auto idx = cuvs::neighbors::mg_index<ivf_flat::index<T, IdxT>, T, IdxT>(res, REPLICATED);                        \\
    cuvs::neighbors::snmg::detail::deserialize_and_distribute(res, idx, filename);                                   \\
    return idx;                                                                                                      \\
  }                                                                                                                  \\
}  // namespace cuvs::neighbors::ivf_flat
"""

pq_macro = """
#define CUVS_INST_MG_PQ(T, IdxT)                                                                                \\
namespace cuvs::neighbors::ivf_pq {                                                                             \\
  using namespace cuvs::neighbors;                                                                              \\
                                                                                                                \\
  cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT> build(                                                \\
    const raft::resources& res,                                                                                 \\
    const mg_index_params<ivf_pq::index_params>& index_params,                                                  \\
    raft::host_matrix_view<const T, int64_t, row_major> index_dataset)                                          \\
  {                                                                                                             \\
    cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT> index(res, index_params.mode);                      \\
    cuvs::neighbors::snmg::detail::build(res, index,                                                            \\
                                       static_cast<const cuvs::neighbors::index_params*>(&index_params),        \\
                                       index_dataset);                                                          \\
    return index;                                                                                               \\
  }                                                                                                             \\
                                                                                                                \\
  void extend(const raft::resources& res,                                                                       \\
              cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT>& index,                                   \\
              raft::host_matrix_view<const T, int64_t, row_major> new_vectors,                                  \\
              std::optional<raft::host_vector_view<const IdxT, int64_t>> new_indices)                           \\
  {                                                                                                             \\
    cuvs::neighbors::snmg::detail::extend(res, index, new_vectors, new_indices);                                \\
  }                                                                                                             \\
                                                                                                                \\
  void search(const raft::resources& res,                                                                       \\
              const cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT>& index,                             \\
              const mg_search_params<ivf_pq::search_params>& search_params,                                     \\
              raft::host_matrix_view<const T, int64_t, row_major> queries,                                      \\
              raft::host_matrix_view<IdxT, int64_t, row_major> neighbors,                                       \\
              raft::host_matrix_view<float, int64_t, row_major> distances)                                      \\
  {                                                                                                             \\
    cuvs::neighbors::snmg::detail::search(res, index,                                                           \\
                                        static_cast<const cuvs::neighbors::search_params*>(&search_params),     \\
                                        queries, neighbors, distances);                                         \\
  }                                                                                                             \\
                                                                                                                \\
  void serialize(const raft::resources& res,                                                                    \\
                 const cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT>& index,                          \\
                 const std::string& filename)                                                                   \\
  {                                                                                                             \\
    cuvs::neighbors::snmg::detail::serialize(res, index, filename);                                             \\
  }                                                                                                             \\
                                                                                                                \\
  template<>                                                                                                    \\
  cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT> deserialize<T, IdxT>(                                 \\
    const raft::resources& res,                                                                                 \\
    const std::string& filename)                                                                                \\
  {                                                                                                             \\
    auto idx = cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT>(res, filename);                          \\
    return idx;                                                                                                 \\
  }                                                                                                             \\
                                                                                                                \\
  template<>                                                                                                    \\
  cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT> distribute<T, IdxT>(                                  \\
    const raft::resources& res,                                                                                 \\
    const std::string& filename)                                                                                \\
  {                                                                                                             \\
    auto idx = cuvs::neighbors::mg_index<ivf_pq::index<IdxT>, T, IdxT>(res, REPLICATED);                        \\
    cuvs::neighbors::snmg::detail::deserialize_and_distribute(res, idx, filename);                              \\
    return idx;                                                                                                 \\
  }                                                                                                             \\
}  // namespace cuvs::neighbors::ivf_pq
"""

cagra_macro = """
#define CUVS_INST_MG_CAGRA(T, IdxT)                                                                               \\
namespace cuvs::neighbors::cagra {                                                                                \\
  using namespace cuvs::neighbors;                                                                                \\
                                                                                                                  \\
  cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT> build(                                                \\
    const raft::resources& res,                                                                                   \\
    const mg_index_params<cagra::index_params>& index_params,                                                     \\
    raft::host_matrix_view<const T, int64_t, row_major> index_dataset)                                            \\
  {                                                                                                               \\
    cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT> index(res, index_params.mode);                      \\
    cuvs::neighbors::snmg::detail::build(res, index,                                                              \\
                                       static_cast<const cuvs::neighbors::index_params*>(&index_params),          \\
                                       index_dataset);                                                            \\
    return index;                                                                                                 \\
  }                                                                                                               \\
                                                                                                                  \\
  void extend(const raft::resources& res,                                                                         \\
              cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT>& index,                                   \\
              raft::host_matrix_view<const T, int64_t, row_major> new_vectors,                                    \\
              std::optional<raft::host_vector_view<const IdxT, int64_t>> new_indices)                             \\
  {                                                                                                               \\
    cuvs::neighbors::snmg::detail::extend(res, index, new_vectors, new_indices);                                  \\
  }                                                                                                               \\
                                                                                                                  \\
  void search(const raft::resources& res,                                                                         \\
              const cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT>& index,                             \\
              const mg_search_params<cagra::search_params>& search_params,                                        \\
              raft::host_matrix_view<const T, int64_t, row_major> queries,                                        \\
              raft::host_matrix_view<int64_t, int64_t, row_major> neighbors,                                      \\
              raft::host_matrix_view<float, int64_t, row_major> distances)                                        \\
  {                                                                                                               \\
    cuvs::neighbors::snmg::detail::search(res, index,                                                             \\
                                        static_cast<const cuvs::neighbors::search_params*>(&search_params),       \\
                                        queries, neighbors, distances);                                           \\
  }                                                                                                               \\
                                                                                                                  \\
    void search(const raft::resources& res,                                                                       \\
              const cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT>& index,                             \\
              const mg_search_params<cagra::search_params>& search_params,                                        \\
              raft::host_matrix_view<const T, int64_t, row_major> queries,                                        \\
              raft::host_matrix_view<uint32_t, int64_t, row_major> neighbors,                                     \\
              raft::host_matrix_view<float, int64_t, row_major> distances)                                        \\
  {                                                                                                               \\
    cuvs::neighbors::snmg::detail::search(res, index,                                                             \\
                                        static_cast<const cuvs::neighbors::search_params*>(&search_params),       \\
                                        queries, neighbors, distances);                                           \\
  }                                                                                                               \\
                                                                                                                  \\
  void serialize(const raft::resources& res,                                                                      \\
                 const cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT>& index,                          \\
                 const std::string& filename)                                                                     \\
  {                                                                                                               \\
    cuvs::neighbors::snmg::detail::serialize(res, index, filename);                                               \\
  }                                                                                                               \\
                                                                                                                  \\
  template<>                                                                                                      \\
  cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT> deserialize<T, IdxT>(                                 \\
    const raft::resources& res,                                                                                   \\
    const std::string& filename)                                                                                  \\
  {                                                                                                               \\
    auto idx = cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT>(res, filename);                          \\
    return idx;                                                                                                   \\
  }                                                                                                               \\
                                                                                                                  \\
  template<>                                                                                                      \\
  cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT> distribute<T, IdxT>(                                  \\
    const raft::resources& res,                                                                                   \\
    const std::string& filename)                                                                                  \\
  {                                                                                                               \\
    auto idx = cuvs::neighbors::mg_index<cagra::index<T, IdxT>, T, IdxT>(res, REPLICATED);                        \\
    cuvs::neighbors::snmg::detail::deserialize_and_distribute(res, idx, filename);                                \\
    return idx;                                                                                                   \\
  }                                                                                                               \\
}  // namespace cuvs::neighbors::cagra
"""

flat_macros = dict (
    flat = dict(
        include=include_macro,
        definition=flat_macro,
        name="CUVS_INST_MG_FLAT",
    )
)

pq_macros = dict (
    pq = dict(
        include=include_macro,
        definition=pq_macro,
        name="CUVS_INST_MG_PQ",
    )
)

cagra_macros = dict (
    cagra = dict(
        include=include_macro,
        definition=cagra_macro,
        name="CUVS_INST_MG_CAGRA",
    )
)

flat_types = dict(
    float_int64_t=("float", "int64_t"),
    half_int64_t=("half", "int64_t"),
    int8_t_int64_t=("int8_t", "int64_t"),
    uint8_t_int64_t=("uint8_t", "int64_t"),
)

pq_types = dict(
    float_int64_t=("float", "int64_t"),
    half_int64_t=("half", "int64_t"),
    int8_t_int64_t=("int8_t", "int64_t"),
    uint8_t_int64_t=("uint8_t", "int64_t"),
)

cagra_types = dict(
    float_uint32_t=("float", "uint32_t"),
    half_uint32_t=("half", "uint32_t"),
    int8_t_uint32_t=("int8_t", "uint32_t"),
    uint8_t_uint32_t=("uint8_t", "uint32_t"),
)

for macros, types in [(flat_macros, flat_types), (pq_macros, pq_types), (cagra_macros, cagra_types)]:
  for type_path, (T, IdxT) in types.items():
      for macro_path, macro in macros.items():
          path = f"mg_{macro_path}_{type_path}.cu"
          with open(path, "w") as f:
              f.write(header)
              f.write(macro['include'])
              f.write(macro["definition"])
              f.write(f"{macro['name']}({T}, {IdxT});\n\n")
              f.write(f"#undef {macro['name']}\n")

          print(f"src/neighbors/mg/{path}")
