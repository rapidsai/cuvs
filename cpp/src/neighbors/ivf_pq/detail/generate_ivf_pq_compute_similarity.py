# Copyright (c) 2024, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

header = """/*
 * Copyright (c) 2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * NOTE: this file is generated by generate_ivf_pq_compute_similarity.py
 * Make changes there and run in this directory:
 * > python generate_ivf_pq_compute_similarity.py
 */

#include "../ivf_pq_compute_similarity_impl.cuh"
#include "../ivf_pq_fp_8bit.cuh"
#include "../../sample_filter.cuh"
"""

declaration_macro = """
#define instantiate_cuvs_neighbors_ivf_pq_detail_compute_similarity_select(                 \\
  OutT, LutT, IvfSampleFilterT)                                                             \\
  template auto                                                                             \\
  cuvs::neighbors::ivf_pq::detail::compute_similarity_select<OutT, LutT, IvfSampleFilterT>( \\
    const cudaDeviceProp& dev_props,                                                        \\
    bool manage_local_topk,                                                                 \\
    int locality_hint,                                                                      \\
    double preferred_shmem_carveout,                                                        \\
    uint32_t pq_bits,                                                                       \\
    uint32_t pq_dim,                                                                        \\
    uint32_t precomp_data_count,                                                            \\
    uint32_t n_queries,                                                                     \\
    uint32_t n_probes,                                                                      \\
    uint32_t topk)                                                                          \\
    ->cuvs::neighbors::ivf_pq::detail::selected<OutT, LutT, IvfSampleFilterT>;              \\
                                                                                            \\
  template void                                                                             \\
  cuvs::neighbors::ivf_pq::detail::compute_similarity_run<OutT, LutT, IvfSampleFilterT>(    \\
    cuvs::neighbors::ivf_pq::detail::selected<OutT, LutT, IvfSampleFilterT> s,              \\
    rmm::cuda_stream_view stream,                                                           \\
    uint32_t dim,                                                                           \\
    uint32_t n_probes,                                                                      \\
    uint32_t pq_dim,                                                                        \\
    uint32_t n_queries,                                                                     \\
    uint32_t queries_offset,                                                                \\
    cuvs::distance::DistanceType metric,                                                    \\
    cuvs::neighbors::ivf_pq::codebook_gen codebook_kind,                                    \\
    uint32_t topk,                                                                          \\
    uint32_t max_samples,                                                                   \\
    const float* cluster_centers,                                                           \\
    const float* pq_centers,                                                                \\
    const uint8_t* const* pq_dataset,                                                       \\
    const uint32_t* cluster_labels,                                                         \\
    const uint32_t* _chunk_indices,                                                         \\
    const float* queries,                                                                   \\
    const uint32_t* index_list,                                                             \\
    float* query_kths,                                                                      \\
    IvfSampleFilterT sample_filter,                                                         \\
    LutT* lut_scores,                                                                       \\
    OutT* _out_scores,                                                                      \\
    uint32_t* _out_indices);

#define COMMA ,
"""

none_filter_int64 = "cuvs::neighbors::filtering::ivf_to_sample_filter" \
                    "<int64_t COMMA cuvs::neighbors::filtering::none_sample_filter>"
bitset_filter64 = "cuvs::neighbors::filtering::ivf_to_sample_filter" \
                  "<int64_t COMMA cuvs::neighbors::filtering::bitset_filter<uint32_t COMMA int64_t>>"

types = dict(
    half_fp8_false=("half", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA false>", none_filter_int64),
    half_fp8_true=("half", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA true>", none_filter_int64),
    half_half=("half", "half", none_filter_int64),
    float_half=("float", "half", none_filter_int64),
    float_float= ("float", "float", none_filter_int64),
    float_fp8_false=("float", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA false>", none_filter_int64),
    float_fp8_true=("float", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA true>", none_filter_int64),
    half_fp8_false_bitset64=("half", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA false>", bitset_filter64),
    half_fp8_true_bitset64=("half", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA true>", bitset_filter64),
    half_half_bitset64=("half", "half", bitset_filter64),
    float_half_bitset64=("float", "half", bitset_filter64),
    float_float_bitset64= ("float", "float", bitset_filter64),
    float_fp8_false_bitset64=("float", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA false>", bitset_filter64),
    float_fp8_true_bitset64=("float", "cuvs::neighbors::ivf_pq::detail::fp_8bit<5u COMMA true>", bitset_filter64)
)

for path_key, (OutT, LutT, FilterT) in types.items():
    path = f"ivf_pq_compute_similarity_{path_key}.cu"
    with open(path, "w") as f:
        f.write(header)
        f.write(declaration_macro)
        f.write(f"instantiate_cuvs_neighbors_ivf_pq_detail_compute_similarity_select({OutT}, {LutT}, {FilterT});\n")
    print(f"src/neighbors/ivf_pq/{path}")
