diff --git a/hnswlib/hnswalg.h b/hnswlib/hnswalg.h
index bef0017..0ee7931 100644
--- a/hnswlib/hnswalg.h
+++ b/hnswlib/hnswalg.h
@@ -16,6 +16,9 @@ typedef unsigned int linklistsizeint;
 template<typename dist_t>
 class HierarchicalNSW : public AlgorithmInterface<dist_t> {
  public:
+    bool base_layer_only = false;
+    int num_seeds = 32;
+    bool base_layer_init = true;
     static const tableint MAX_LABEL_OPERATION_LOCKS = 65536;
     static const unsigned char DELETE_MARK = 0x01;

@@ -1098,7 +1101,7 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {

         std::unique_lock <std::mutex> lock_el(link_list_locks_[cur_c]);
         int curlevel = getRandomLevel(mult_);
-        if (level > 0)
+        if (level > -1)
             curlevel = level;

         element_levels_[cur_c] = curlevel;
@@ -1116,6 +1119,9 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {
         memcpy(getExternalLabeLp(cur_c), &label, sizeof(labeltype));
         memcpy(getDataByInternalId(cur_c), data_point, data_size_);

+        if (!base_layer_init && curlevel == 0)
+            return cur_c;
+
         if (curlevel) {
             linkLists_[cur_c] = (char *) malloc(size_links_per_element_ * curlevel + 1);
             if (linkLists_[cur_c] == nullptr)
@@ -1138,7 +1144,7 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {
                         tableint *datal = (tableint *) (data + 1);
                         for (int i = 0; i < size; i++) {
                             tableint cand = datal[i];
-                            if (cand < 0 || cand > max_elements_)
+                            if (static_cast<int>(cand) < 0 || cand > max_elements_)
                                 throw std::runtime_error("cand error");
                             dist_t d = fstdistfunc_(data_point, getDataByInternalId(cand), dist_func_param_);
                             if (d < curdist) {
@@ -1188,28 +1194,41 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {
         tableint currObj = enterpoint_node_;
         dist_t curdist = fstdistfunc_(query_data, getDataByInternalId(enterpoint_node_), dist_func_param_);

-        for (int level = maxlevel_; level > 0; level--) {
-            bool changed = true;
-            while (changed) {
-                changed = false;
-                unsigned int *data;
+        if (base_layer_only) {
+            // You can increase the number of seeds when testing large-scale dataset, num_seeds = 48 for 100M-scale
+            for (int i = 0; i < num_seeds; i++) {
+                tableint obj = i * (max_elements_ / num_seeds);
+                dist_t dist = fstdistfunc_(query_data, getDataByInternalId(obj), dist_func_param_);
+                if (dist < curdist) {
+                    curdist = dist;
+                    currObj = obj;
+                }
+            }
+        }
+        else {
+            for (int level = maxlevel_; level > 0; level--) {
+                bool changed = true;
+                while (changed) {
+                    changed = false;
+                    unsigned int *data;

-                data = (unsigned int *) get_linklist(currObj, level);
-                int size = getListCount(data);
-                metric_hops++;
-                metric_distance_computations+=size;
+                    data = (unsigned int *) get_linklist(currObj, level);
+                    int size = getListCount(data);
+                    metric_hops++;
+                    metric_distance_computations+=size;
+
+                    tableint *datal = (tableint *) (data + 1);
+                    for (int i = 0; i < size; i++) {
+                        tableint cand = datal[i];
+                        if (static_cast<int>(cand) < 0 || cand > max_elements_)
+                            throw std::runtime_error("cand error");
+                        dist_t d = fstdistfunc_(query_data, getDataByInternalId(cand), dist_func_param_);

-                tableint *datal = (tableint *) (data + 1);
-                for (int i = 0; i < size; i++) {
-                    tableint cand = datal[i];
-                    if (cand < 0 || cand > max_elements_)
-                        throw std::runtime_error("cand error");
-                    dist_t d = fstdistfunc_(query_data, getDataByInternalId(cand), dist_func_param_);
-
-                    if (d < curdist) {
-                        curdist = d;
-                        currObj = cand;
-                        changed = true;
+                        if (d < curdist) {
+                            curdist = d;
+                            currObj = cand;
+                            changed = true;
+                        }
                     }
                 }
             }
diff --git a/hnswlib/space_ip.h b/hnswlib/space_ip.h
index 2b1c359..e311f9d 100644
--- a/hnswlib/space_ip.h
+++ b/hnswlib/space_ip.h
@@ -3,19 +3,22 @@

 namespace hnswlib {

-static float
+template <typename DataType, typename DistanceType>
+static DistanceType
 InnerProduct(const void *pVect1, const void *pVect2, const void *qty_ptr) {
     size_t qty = *((size_t *) qty_ptr);
-    float res = 0;
+    DistanceType res = 0;
     for (unsigned i = 0; i < qty; i++) {
-        res += ((float *) pVect1)[i] * ((float *) pVect2)[i];
+        const DistanceType t = ((DataType *) pVect1)[i] * ((DataType *) pVect2)[i];
+        res += t;
     }
     return res;
 }

-static float
+template <typename DataType, typename DistanceType>
+static DistanceType
 InnerProductDistance(const void *pVect1, const void *pVect2, const void *qty_ptr) {
-    return 1.0f - InnerProduct(pVect1, pVect2, qty_ptr);
+    return DistanceType{1.0f} - InnerProduct<DataType, DistanceType>(pVect1, pVect2, qty_ptr);
 }

 #if defined(USE_AVX)
@@ -294,7 +297,7 @@ InnerProductDistanceSIMD16ExtResiduals(const void *pVect1v, const void *pVect2v,
     float *pVect2 = (float *) pVect2v + qty16;

     size_t qty_left = qty - qty16;
-    float res_tail = InnerProduct(pVect1, pVect2, &qty_left);
+    float res_tail = InnerProduct<float, float>(pVect1, pVect2, &qty_left);
     return 1.0f - (res + res_tail);
 }

@@ -308,20 +311,21 @@ InnerProductDistanceSIMD4ExtResiduals(const void *pVect1v, const void *pVect2v,

     float *pVect1 = (float *) pVect1v + qty4;
     float *pVect2 = (float *) pVect2v + qty4;
-    float res_tail = InnerProduct(pVect1, pVect2, &qty_left);
+    float res_tail = InnerProduct<float, float>(pVect1, pVect2, &qty_left);

     return 1.0f - (res + res_tail);
 }
 #endif

-class InnerProductSpace : public SpaceInterface<float> {
-    DISTFUNC<float> fstdistfunc_;
+template <typename DataType, typename DistanceType>
+class InnerProductSpace : public SpaceInterface<DistanceType> {
+    DISTFUNC<DistanceType> fstdistfunc_;
     size_t data_size_;
     size_t dim_;

  public:
     InnerProductSpace(size_t dim) {
-        fstdistfunc_ = InnerProductDistance;
+        fstdistfunc_ = InnerProductDistance<DataType, DistanceType>;
 #if defined(USE_AVX) || defined(USE_SSE) || defined(USE_AVX512)
     #if defined(USE_AVX512)
         if (AVX512Capable()) {
@@ -344,24 +348,26 @@ class InnerProductSpace : public SpaceInterface<float> {
         }
     #endif

-        if (dim % 16 == 0)
-            fstdistfunc_ = InnerProductDistanceSIMD16Ext;
-        else if (dim % 4 == 0)
-            fstdistfunc_ = InnerProductDistanceSIMD4Ext;
-        else if (dim > 16)
-            fstdistfunc_ = InnerProductDistanceSIMD16ExtResiduals;
-        else if (dim > 4)
-            fstdistfunc_ = InnerProductDistanceSIMD4ExtResiduals;
+        if constexpr (std::is_same_v<DataType, float>) {
+            if (dim % 16 == 0)
+                fstdistfunc_ = InnerProductDistanceSIMD16Ext;
+            else if (dim % 4 == 0)
+                fstdistfunc_ = InnerProductDistanceSIMD4Ext;
+            else if (dim > 16)
+                fstdistfunc_ = InnerProductDistanceSIMD16ExtResiduals;
+            else if (dim > 4)
+                fstdistfunc_ = InnerProductDistanceSIMD4ExtResiduals;
+        }
 #endif
         dim_ = dim;
-        data_size_ = dim * sizeof(float);
+        data_size_ = dim * sizeof(DataType);
     }

     size_t get_data_size() {
         return data_size_;
     }

-    DISTFUNC<float> get_dist_func() {
+    DISTFUNC<DistanceType> get_dist_func() {
         return fstdistfunc_;
     }

diff --git a/hnswlib/space_l2.h b/hnswlib/space_l2.h
index 834d19f..c57c87a 100644
--- a/hnswlib/space_l2.h
+++ b/hnswlib/space_l2.h
@@ -3,15 +3,16 @@

 namespace hnswlib {

-static float
+template <typename DataType, typename DistanceType>
+static DistanceType
 L2Sqr(const void *pVect1v, const void *pVect2v, const void *qty_ptr) {
-    float *pVect1 = (float *) pVect1v;
-    float *pVect2 = (float *) pVect2v;
+    DataType *pVect1 = (DataType *) pVect1v;
+    DataType *pVect2 = (DataType *) pVect2v;
     size_t qty = *((size_t *) qty_ptr);

-    float res = 0;
+    DistanceType res = 0;
     for (size_t i = 0; i < qty; i++) {
-        float t = *pVect1 - *pVect2;
+        DistanceType t = *pVect1 - *pVect2;
         pVect1++;
         pVect2++;
         res += t * t;
@@ -155,7 +156,7 @@ L2SqrSIMD16ExtResiduals(const void *pVect1v, const void *pVect2v, const void *qt
     float *pVect2 = (float *) pVect2v + qty16;

     size_t qty_left = qty - qty16;
-    float res_tail = L2Sqr(pVect1, pVect2, &qty_left);
+    float res_tail = L2Sqr<float, float>(pVect1, pVect2, &qty_left);
     return (res + res_tail);
 }
 #endif
@@ -199,20 +200,21 @@ L2SqrSIMD4ExtResiduals(const void *pVect1v, const void *pVect2v, const void *qty

     float *pVect1 = (float *) pVect1v + qty4;
     float *pVect2 = (float *) pVect2v + qty4;
-    float res_tail = L2Sqr(pVect1, pVect2, &qty_left);
+    float res_tail = L2Sqr<float, float>(pVect1, pVect2, &qty_left);

     return (res + res_tail);
 }
 #endif

-class L2Space : public SpaceInterface<float> {
-    DISTFUNC<float> fstdistfunc_;
+template <typename DataType, typename DistanceType=float>
+class L2Space : public SpaceInterface<DistanceType> {
+    DISTFUNC<DistanceType> fstdistfunc_;
     size_t data_size_;
     size_t dim_;

  public:
     L2Space(size_t dim) {
-        fstdistfunc_ = L2Sqr;
+        fstdistfunc_ = L2Sqr<DataType, DistanceType>;
 #if defined(USE_SSE) || defined(USE_AVX) || defined(USE_AVX512)
     #if defined(USE_AVX512)
         if (AVX512Capable())
@@ -224,24 +226,26 @@ class L2Space : public SpaceInterface<float> {
             L2SqrSIMD16Ext = L2SqrSIMD16ExtAVX;
     #endif

-        if (dim % 16 == 0)
-            fstdistfunc_ = L2SqrSIMD16Ext;
-        else if (dim % 4 == 0)
-            fstdistfunc_ = L2SqrSIMD4Ext;
-        else if (dim > 16)
-            fstdistfunc_ = L2SqrSIMD16ExtResiduals;
-        else if (dim > 4)
-            fstdistfunc_ = L2SqrSIMD4ExtResiduals;
+        if constexpr (std::is_same_v<DataType, float>) {
+            if (dim % 16 == 0)
+                fstdistfunc_ = L2SqrSIMD16Ext;
+            else if (dim % 4 == 0)
+                fstdistfunc_ = L2SqrSIMD4Ext;
+            else if (dim > 16)
+                fstdistfunc_ = L2SqrSIMD16ExtResiduals;
+            else if (dim > 4)
+                fstdistfunc_ = L2SqrSIMD4ExtResiduals;
+        }
 #endif
         dim_ = dim;
-        data_size_ = dim * sizeof(float);
+        data_size_ = dim * sizeof(DataType);
     }

     size_t get_data_size() {
         return data_size_;
     }

-    DISTFUNC<float> get_dist_func() {
+    DISTFUNC<DistanceType> get_dist_func() {
         return fstdistfunc_;
     }

@@ -252,12 +256,13 @@ class L2Space : public SpaceInterface<float> {
     ~L2Space() {}
 };

+template <typename T>
 static int
 L2SqrI4x(const void *__restrict pVect1, const void *__restrict pVect2, const void *__restrict qty_ptr) {
     size_t qty = *((size_t *) qty_ptr);
     int res = 0;
-    unsigned char *a = (unsigned char *) pVect1;
-    unsigned char *b = (unsigned char *) pVect2;
+    T *a = (T *) pVect1;
+    T *b = (T *) pVect2;

     qty = qty >> 2;
     for (size_t i = 0; i < qty; i++) {
@@ -277,11 +282,12 @@ L2SqrI4x(const void *__restrict pVect1, const void *__restrict pVect2, const voi
     return (res);
 }

+template <typename T>
 static int L2SqrI(const void* __restrict pVect1, const void* __restrict pVect2, const void* __restrict qty_ptr) {
     size_t qty = *((size_t*)qty_ptr);
     int res = 0;
-    unsigned char* a = (unsigned char*)pVect1;
-    unsigned char* b = (unsigned char*)pVect2;
+    T* a = (T*)pVect1;
+    T* b = (T*)pVect2;

     for (size_t i = 0; i < qty; i++) {
         res += ((*a) - (*b)) * ((*a) - (*b));
@@ -291,6 +297,7 @@ static int L2SqrI(const void* __restrict pVect1, const void* __restrict pVect2,
     return (res);
 }

+template <typename T>
 class L2SpaceI : public SpaceInterface<int> {
     DISTFUNC<int> fstdistfunc_;
     size_t data_size_;
@@ -299,9 +306,9 @@ class L2SpaceI : public SpaceInterface<int> {
  public:
     L2SpaceI(size_t dim) {
         if (dim % 4 == 0) {
-            fstdistfunc_ = L2SqrI4x;
+            fstdistfunc_ = L2SqrI4x<T>;
         } else {
-            fstdistfunc_ = L2SqrI;
+            fstdistfunc_ = L2SqrI<T>;
         }
         dim_ = dim;
         data_size_ = dim * sizeof(unsigned char);
