/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <nlohmann/json.hpp>

#include <string>
#include <type_traits>

namespace cuvs::core {

/**
 * @brief A generic class that provides JSON serialization and string conversion.
 *
 * @tparam T The type to be serialized.
 *
 * @note The implementation of this class is automatically generated by the build system.
 */
template <typename T>
struct generic {
  /**
   * @brief Convert the object to a JSON object.
   *
   * @note The instance for this function are automatically generated by the build system.
   * @note Calling this method directly may be ambiguous in multiple inheritance scenarios, use the
   * `generic_to_json` free function instead.
   *
   * @return The JSON object.
   */
  [[nodiscard]] auto to_json() const -> nlohmann::json;

  /**
   * @brief Convert the object to a JSON string.
   *
   * @note Calling this method directly may be ambiguous in multiple inheritance scenarios, use the
   * `generic_to_string` free function instead.
   *
   * @param pretty If true, the JSON string will be pretty-printed with 2 spaces per indentation
   * level.
   * @return The JSON string.
   */
  [[nodiscard]] inline auto to_string(bool pretty = false) const -> std::string
  {
    return to_json().dump(pretty ? 2 : -1);
  }

  [[nodiscard]] inline auto crtp() -> T& { return static_cast<T&>(*this); }
  [[nodiscard]] inline auto crtp() const -> const T& { return static_cast<const T&>(*this); }
};

/**
 * @brief Convert a generic object to a JSON object.
 * @note This function works on any object that inherits from generic<T>, which is automatically
 * generated by the build system.
 * @tparam T The type of the object to convert.
 * @param obj The object to convert.
 * @return The JSON object.
 */
template <typename T>
[[nodiscard]] auto generic_to_json(const T& obj)
  -> ::std::enable_if_t<::std::is_base_of_v<cuvs::core::generic<T>, T>, ::nlohmann::json>
{
  return static_cast<const generic<T>&>(obj).template to_json<T>();
}

/**
 * @brief Convert a generic object to a JSON string.
 * @note This function works on any object that inherits from generic<T>, which is automatically
 * generated by the build system.
 * @tparam T The type of the object to convert.
 * @param obj The object to convert.
 * @return The JSON string.
 */
template <typename T>
[[nodiscard]] auto generic_to_string(const T& obj, bool pretty = false)
  -> ::std::enable_if_t<::std::is_base_of_v<cuvs::core::generic<T>, T>, ::std::string>
{
  return static_cast<const generic<T>&>(obj).to_string(pretty);
}

}  // namespace cuvs::core
