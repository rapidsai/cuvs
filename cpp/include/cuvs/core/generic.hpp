/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <nlohmann/json.hpp>

#include <string>

namespace cuvs {
namespace core {

/**
 * @brief A generic class that provides JSON serialization and string conversion.
 *
 * @tparam T The type of the generic object.
 *
 * @note The implementation of this class is automatically generated by the build system.
 */
template <typename T>
class generic {
 public:
  /**
   * @brief Convert a generic object to a JSON object.
   *
   * @note The instance for this function are automatically generated by the build system.
   *
   * @param obj The object to convert.
   * @return The JSON object.
   */
  [[nodiscard]] static auto to_json(const T&) -> nlohmann::json;

  /**
   * @brief Convert a JSON object to a generic object.
   *
   * @note The instance for this function are automatically generated by the build system.
   *
   * @param j The JSON object to convert.
   * @return The generic object.
   */
  [[nodiscard]] static auto from_json(const nlohmann::json&) -> T;
};

}  // namespace core

namespace generic {
/**
 * @brief Convert a generic object to a JSON object.
 * @note This function works on any object that friends cuvs::core::generic<T>,
 *       which is automatically generated by the build system.
 * @tparam T The type of the object to convert.
 * @param obj The object to convert.
 * @return The JSON object.
 */
template <typename T>
[[nodiscard]] auto to_json(const T& obj) -> nlohmann::json
{
  return cuvs::core::generic<T>::to_json(obj);
}

/**
 * @brief Convert a JSON object to a generic object.
 * @note This function works on any object that friends cuvs::core::generic<T>,
 *       which is automatically generated by the build system.
 * @tparam T The type of the object to convert.
 * @param j The JSON object to convert.
 * @return The generic object.
 */
template <typename T>
[[nodiscard]] auto from_json(const nlohmann::json& j) -> T
{
  return cuvs::core::generic<T>::from_json(j);
}

/**
 * @brief Convert a generic object to a JSON string.
 * @note This function works on any object that friends cuvs::core::generic<T>,
 *       which is automatically generated by the build system.
 * @tparam T The type of the object to convert.
 * @param obj The object to convert.
 * @param pretty whether to multiline-pretty-print the JSON string
 * @return The JSON string.
 */
template <typename T>
[[nodiscard]] auto to_string(const T& obj, bool pretty = false) -> std::string
{
  return to_json<T>(obj).dump(pretty ? 2 : -1);
}

}  // namespace generic
}  // namespace cuvs
