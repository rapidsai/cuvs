/*
 * Copyright (c) 2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ignore warnings from bindgen
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_attributes)]

// include the generated cuvs_bindings.rs file directly in here
// (this file is automatically generated by bindgen in build.rs)
include!(concat!(env!("OUT_DIR"), "/cuvs_bindings.rs"));

#[cfg(test)]
mod tests {
    use super::*;
    // some super basic tests here to make sure we can call into the cuvs library
    // the actual logic will be tested out through the higher level bindings

    #[test]
    fn test_create_cagra_index() {
        unsafe {
            let mut index = core::mem::MaybeUninit::<cuvsCagraIndex_t>::uninit();
            assert_eq!(
                cuvsCagraIndexCreate(index.as_mut_ptr()),
                cuvsError_t::CUVS_SUCCESS
            );
            let index = index.assume_init();
            assert_eq!(cuvsCagraIndexDestroy(index), cuvsError_t::CUVS_SUCCESS);
        }
    }

    #[test]
    fn test_create_resources() {
        unsafe {
            let mut res: cuvsResources_t = 0;
            assert_eq!(cuvsResourcesCreate(&mut res), cuvsError_t::CUVS_SUCCESS);
            assert_eq!(cuvsResourcesDestroy(res), cuvsError_t::CUVS_SUCCESS);
        }
    }
}
