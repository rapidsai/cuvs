/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaGraphInstantiateParams_st {
 *     unsigned long long flags;
 *     cudaStream_t uploadStream;
 *     cudaGraphNode_t errNode_out;
 *     cudaGraphInstantiateResult result_out;
 * }
 * }
 */
public class cudaGraphInstantiateParams_st {

    cudaGraphInstantiateParams_st() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_LONG_LONG.withName("flags"),
        PanamaFFMAPI.C_POINTER.withName("uploadStream"),
        PanamaFFMAPI.C_POINTER.withName("errNode_out"),
        PanamaFFMAPI.C_INT.withName("result_out"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaGraphInstantiateParams_st");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long flags
     * }
     */
    public static final OfLong flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long flags
     * }
     */
    public static long flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long flags
     * }
     */
    public static void flags(MemorySegment struct, long fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout uploadStream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uploadStream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaStream_t uploadStream
     * }
     */
    public static final AddressLayout uploadStream$layout() {
        return uploadStream$LAYOUT;
    }

    private static final long uploadStream$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaStream_t uploadStream
     * }
     */
    public static final long uploadStream$offset() {
        return uploadStream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaStream_t uploadStream
     * }
     */
    public static MemorySegment uploadStream(MemorySegment struct) {
        return struct.get(uploadStream$LAYOUT, uploadStream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaStream_t uploadStream
     * }
     */
    public static void uploadStream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uploadStream$LAYOUT, uploadStream$OFFSET, fieldValue);
    }

    private static final AddressLayout errNode_out$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("errNode_out"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errNode_out
     * }
     */
    public static final AddressLayout errNode_out$layout() {
        return errNode_out$LAYOUT;
    }

    private static final long errNode_out$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errNode_out
     * }
     */
    public static final long errNode_out$offset() {
        return errNode_out$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errNode_out
     * }
     */
    public static MemorySegment errNode_out(MemorySegment struct) {
        return struct.get(errNode_out$LAYOUT, errNode_out$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errNode_out
     * }
     */
    public static void errNode_out(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(errNode_out$LAYOUT, errNode_out$OFFSET, fieldValue);
    }

    private static final OfInt result_out$LAYOUT = (OfInt)$LAYOUT.select(groupElement("result_out"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaGraphInstantiateResult result_out
     * }
     */
    public static final OfInt result_out$layout() {
        return result_out$LAYOUT;
    }

    private static final long result_out$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaGraphInstantiateResult result_out
     * }
     */
    public static final long result_out$offset() {
        return result_out$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaGraphInstantiateResult result_out
     * }
     */
    public static int result_out(MemorySegment struct) {
        return struct.get(result_out$LAYOUT, result_out$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaGraphInstantiateResult result_out
     * }
     */
    public static void result_out(MemorySegment struct, int fieldValue) {
        struct.set(result_out$LAYOUT, result_out$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
