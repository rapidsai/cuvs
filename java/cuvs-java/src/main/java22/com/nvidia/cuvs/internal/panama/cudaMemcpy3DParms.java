/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaMemcpy3DParms {
 *     cudaArray_t srcArray;
 *     struct cudaPos srcPos;
 *     struct cudaPitchedPtr srcPtr;
 *     cudaArray_t dstArray;
 *     struct cudaPos dstPos;
 *     struct cudaPitchedPtr dstPtr;
 *     struct cudaExtent extent;
 *     enum cudaMemcpyKind kind;
 * }
 * }
 */
public class cudaMemcpy3DParms {

    cudaMemcpy3DParms() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_POINTER.withName("srcArray"),
        cudaPos.layout().withName("srcPos"),
        cudaPitchedPtr.layout().withName("srcPtr"),
        PanamaFFMAPI.C_POINTER.withName("dstArray"),
        cudaPos.layout().withName("dstPos"),
        cudaPitchedPtr.layout().withName("dstPtr"),
        cudaExtent.layout().withName("extent"),
        PanamaFFMAPI.C_INT.withName("kind"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaMemcpy3DParms");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout srcArray$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("srcArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaArray_t srcArray
     * }
     */
    public static final AddressLayout srcArray$layout() {
        return srcArray$LAYOUT;
    }

    private static final long srcArray$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaArray_t srcArray
     * }
     */
    public static final long srcArray$offset() {
        return srcArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaArray_t srcArray
     * }
     */
    public static MemorySegment srcArray(MemorySegment struct) {
        return struct.get(srcArray$LAYOUT, srcArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaArray_t srcArray
     * }
     */
    public static void srcArray(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(srcArray$LAYOUT, srcArray$OFFSET, fieldValue);
    }

    private static final GroupLayout srcPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srcPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaPos srcPos
     * }
     */
    public static final GroupLayout srcPos$layout() {
        return srcPos$LAYOUT;
    }

    private static final long srcPos$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaPos srcPos
     * }
     */
    public static final long srcPos$offset() {
        return srcPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaPos srcPos
     * }
     */
    public static MemorySegment srcPos(MemorySegment struct) {
        return struct.asSlice(srcPos$OFFSET, srcPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaPos srcPos
     * }
     */
    public static void srcPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srcPos$OFFSET, srcPos$LAYOUT.byteSize());
    }

    private static final GroupLayout srcPtr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srcPtr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr srcPtr
     * }
     */
    public static final GroupLayout srcPtr$layout() {
        return srcPtr$LAYOUT;
    }

    private static final long srcPtr$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr srcPtr
     * }
     */
    public static final long srcPtr$offset() {
        return srcPtr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr srcPtr
     * }
     */
    public static MemorySegment srcPtr(MemorySegment struct) {
        return struct.asSlice(srcPtr$OFFSET, srcPtr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr srcPtr
     * }
     */
    public static void srcPtr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srcPtr$OFFSET, srcPtr$LAYOUT.byteSize());
    }

    private static final AddressLayout dstArray$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dstArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaArray_t dstArray
     * }
     */
    public static final AddressLayout dstArray$layout() {
        return dstArray$LAYOUT;
    }

    private static final long dstArray$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaArray_t dstArray
     * }
     */
    public static final long dstArray$offset() {
        return dstArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaArray_t dstArray
     * }
     */
    public static MemorySegment dstArray(MemorySegment struct) {
        return struct.get(dstArray$LAYOUT, dstArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaArray_t dstArray
     * }
     */
    public static void dstArray(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dstArray$LAYOUT, dstArray$OFFSET, fieldValue);
    }

    private static final GroupLayout dstPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dstPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaPos dstPos
     * }
     */
    public static final GroupLayout dstPos$layout() {
        return dstPos$LAYOUT;
    }

    private static final long dstPos$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaPos dstPos
     * }
     */
    public static final long dstPos$offset() {
        return dstPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaPos dstPos
     * }
     */
    public static MemorySegment dstPos(MemorySegment struct) {
        return struct.asSlice(dstPos$OFFSET, dstPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaPos dstPos
     * }
     */
    public static void dstPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dstPos$OFFSET, dstPos$LAYOUT.byteSize());
    }

    private static final GroupLayout dstPtr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dstPtr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr dstPtr
     * }
     */
    public static final GroupLayout dstPtr$layout() {
        return dstPtr$LAYOUT;
    }

    private static final long dstPtr$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr dstPtr
     * }
     */
    public static final long dstPtr$offset() {
        return dstPtr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr dstPtr
     * }
     */
    public static MemorySegment dstPtr(MemorySegment struct) {
        return struct.asSlice(dstPtr$OFFSET, dstPtr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaPitchedPtr dstPtr
     * }
     */
    public static void dstPtr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dstPtr$OFFSET, dstPtr$LAYOUT.byteSize());
    }

    private static final GroupLayout extent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("extent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static final GroupLayout extent$layout() {
        return extent$LAYOUT;
    }

    private static final long extent$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static final long extent$offset() {
        return extent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static MemorySegment extent(MemorySegment struct) {
        return struct.asSlice(extent$OFFSET, extent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static void extent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, extent$OFFSET, extent$LAYOUT.byteSize());
    }

    private static final OfInt kind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaMemcpyKind kind
     * }
     */
    public static final OfInt kind$layout() {
        return kind$LAYOUT;
    }

    private static final long kind$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaMemcpyKind kind
     * }
     */
    public static final long kind$offset() {
        return kind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaMemcpyKind kind
     * }
     */
    public static int kind(MemorySegment struct) {
        return struct.get(kind$LAYOUT, kind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaMemcpyKind kind
     * }
     */
    public static void kind(MemorySegment struct, int fieldValue) {
        struct.set(kind$LAYOUT, kind$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
