/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaResourceViewDesc {
 *     enum cudaResourceViewFormat format;
 *     size_t width;
 *     size_t height;
 *     size_t depth;
 *     unsigned int firstMipmapLevel;
 *     unsigned int lastMipmapLevel;
 *     unsigned int firstLayer;
 *     unsigned int lastLayer;
 * }
 * }
 */
public class cudaResourceViewDesc {

    cudaResourceViewDesc() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_INT.withName("format"),
        MemoryLayout.paddingLayout(4),
        PanamaFFMAPI.C_LONG.withName("width"),
        PanamaFFMAPI.C_LONG.withName("height"),
        PanamaFFMAPI.C_LONG.withName("depth"),
        PanamaFFMAPI.C_INT.withName("firstMipmapLevel"),
        PanamaFFMAPI.C_INT.withName("lastMipmapLevel"),
        PanamaFFMAPI.C_INT.withName("firstLayer"),
        PanamaFFMAPI.C_INT.withName("lastLayer")
    ).withName("cudaResourceViewDesc");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaResourceViewFormat format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaResourceViewFormat format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaResourceViewFormat format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaResourceViewFormat format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final OfLong width$LAYOUT = (OfLong)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static final OfLong width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static long width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static void width(MemorySegment struct, long fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfLong height$LAYOUT = (OfLong)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static final OfLong height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static long height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static void height(MemorySegment struct, long fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfLong depth$LAYOUT = (OfLong)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final OfLong depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static long depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t depth
     * }
     */
    public static void depth(MemorySegment struct, long fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final OfInt firstMipmapLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("firstMipmapLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int firstMipmapLevel
     * }
     */
    public static final OfInt firstMipmapLevel$layout() {
        return firstMipmapLevel$LAYOUT;
    }

    private static final long firstMipmapLevel$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int firstMipmapLevel
     * }
     */
    public static final long firstMipmapLevel$offset() {
        return firstMipmapLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int firstMipmapLevel
     * }
     */
    public static int firstMipmapLevel(MemorySegment struct) {
        return struct.get(firstMipmapLevel$LAYOUT, firstMipmapLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int firstMipmapLevel
     * }
     */
    public static void firstMipmapLevel(MemorySegment struct, int fieldValue) {
        struct.set(firstMipmapLevel$LAYOUT, firstMipmapLevel$OFFSET, fieldValue);
    }

    private static final OfInt lastMipmapLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lastMipmapLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int lastMipmapLevel
     * }
     */
    public static final OfInt lastMipmapLevel$layout() {
        return lastMipmapLevel$LAYOUT;
    }

    private static final long lastMipmapLevel$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int lastMipmapLevel
     * }
     */
    public static final long lastMipmapLevel$offset() {
        return lastMipmapLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int lastMipmapLevel
     * }
     */
    public static int lastMipmapLevel(MemorySegment struct) {
        return struct.get(lastMipmapLevel$LAYOUT, lastMipmapLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int lastMipmapLevel
     * }
     */
    public static void lastMipmapLevel(MemorySegment struct, int fieldValue) {
        struct.set(lastMipmapLevel$LAYOUT, lastMipmapLevel$OFFSET, fieldValue);
    }

    private static final OfInt firstLayer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("firstLayer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int firstLayer
     * }
     */
    public static final OfInt firstLayer$layout() {
        return firstLayer$LAYOUT;
    }

    private static final long firstLayer$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int firstLayer
     * }
     */
    public static final long firstLayer$offset() {
        return firstLayer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int firstLayer
     * }
     */
    public static int firstLayer(MemorySegment struct) {
        return struct.get(firstLayer$LAYOUT, firstLayer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int firstLayer
     * }
     */
    public static void firstLayer(MemorySegment struct, int fieldValue) {
        struct.set(firstLayer$LAYOUT, firstLayer$OFFSET, fieldValue);
    }

    private static final OfInt lastLayer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lastLayer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int lastLayer
     * }
     */
    public static final OfInt lastLayer$layout() {
        return lastLayer$LAYOUT;
    }

    private static final long lastLayer$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int lastLayer
     * }
     */
    public static final long lastLayer$offset() {
        return lastLayer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int lastLayer
     * }
     */
    public static int lastLayer(MemorySegment struct) {
        return struct.get(lastLayer$LAYOUT, lastLayer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int lastLayer
     * }
     */
    public static void lastLayer(MemorySegment struct, int fieldValue) {
        struct.set(lastLayer$LAYOUT, lastLayer$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
