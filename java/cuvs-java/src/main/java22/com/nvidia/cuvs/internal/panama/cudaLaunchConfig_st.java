/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaLaunchConfig_st {
 *     dim3 gridDim;
 *     dim3 blockDim;
 *     size_t dynamicSmemBytes;
 *     cudaStream_t stream;
 *     cudaLaunchAttribute *attrs;
 *     unsigned int numAttrs;
 * }
 * }
 */
public class cudaLaunchConfig_st {

    cudaLaunchConfig_st() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        dim3.layout().withName("gridDim"),
        dim3.layout().withName("blockDim"),
        PanamaFFMAPI.C_LONG.withName("dynamicSmemBytes"),
        PanamaFFMAPI.C_POINTER.withName("stream"),
        PanamaFFMAPI.C_POINTER.withName("attrs"),
        PanamaFFMAPI.C_INT.withName("numAttrs"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaLaunchConfig_st");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout gridDim$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gridDim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim3 gridDim
     * }
     */
    public static final GroupLayout gridDim$layout() {
        return gridDim$LAYOUT;
    }

    private static final long gridDim$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim3 gridDim
     * }
     */
    public static final long gridDim$offset() {
        return gridDim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim3 gridDim
     * }
     */
    public static MemorySegment gridDim(MemorySegment struct) {
        return struct.asSlice(gridDim$OFFSET, gridDim$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim3 gridDim
     * }
     */
    public static void gridDim(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gridDim$OFFSET, gridDim$LAYOUT.byteSize());
    }

    private static final GroupLayout blockDim$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("blockDim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * dim3 blockDim
     * }
     */
    public static final GroupLayout blockDim$layout() {
        return blockDim$LAYOUT;
    }

    private static final long blockDim$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * dim3 blockDim
     * }
     */
    public static final long blockDim$offset() {
        return blockDim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * dim3 blockDim
     * }
     */
    public static MemorySegment blockDim(MemorySegment struct) {
        return struct.asSlice(blockDim$OFFSET, blockDim$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * dim3 blockDim
     * }
     */
    public static void blockDim(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, blockDim$OFFSET, blockDim$LAYOUT.byteSize());
    }

    private static final OfLong dynamicSmemBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dynamicSmemBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t dynamicSmemBytes
     * }
     */
    public static final OfLong dynamicSmemBytes$layout() {
        return dynamicSmemBytes$LAYOUT;
    }

    private static final long dynamicSmemBytes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t dynamicSmemBytes
     * }
     */
    public static final long dynamicSmemBytes$offset() {
        return dynamicSmemBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t dynamicSmemBytes
     * }
     */
    public static long dynamicSmemBytes(MemorySegment struct) {
        return struct.get(dynamicSmemBytes$LAYOUT, dynamicSmemBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t dynamicSmemBytes
     * }
     */
    public static void dynamicSmemBytes(MemorySegment struct, long fieldValue) {
        struct.set(dynamicSmemBytes$LAYOUT, dynamicSmemBytes$OFFSET, fieldValue);
    }

    private static final AddressLayout stream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaStream_t stream
     * }
     */
    public static final AddressLayout stream$layout() {
        return stream$LAYOUT;
    }

    private static final long stream$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaStream_t stream
     * }
     */
    public static final long stream$offset() {
        return stream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaStream_t stream
     * }
     */
    public static MemorySegment stream(MemorySegment struct) {
        return struct.get(stream$LAYOUT, stream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaStream_t stream
     * }
     */
    public static void stream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stream$LAYOUT, stream$OFFSET, fieldValue);
    }

    private static final AddressLayout attrs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("attrs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaLaunchAttribute *attrs
     * }
     */
    public static final AddressLayout attrs$layout() {
        return attrs$LAYOUT;
    }

    private static final long attrs$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaLaunchAttribute *attrs
     * }
     */
    public static final long attrs$offset() {
        return attrs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaLaunchAttribute *attrs
     * }
     */
    public static MemorySegment attrs(MemorySegment struct) {
        return struct.get(attrs$LAYOUT, attrs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaLaunchAttribute *attrs
     * }
     */
    public static void attrs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(attrs$LAYOUT, attrs$OFFSET, fieldValue);
    }

    private static final OfInt numAttrs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numAttrs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int numAttrs
     * }
     */
    public static final OfInt numAttrs$layout() {
        return numAttrs$LAYOUT;
    }

    private static final long numAttrs$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int numAttrs
     * }
     */
    public static final long numAttrs$offset() {
        return numAttrs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int numAttrs
     * }
     */
    public static int numAttrs(MemorySegment struct) {
        return struct.get(numAttrs$LAYOUT, numAttrs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int numAttrs
     * }
     */
    public static void numAttrs(MemorySegment struct, int fieldValue) {
        struct.set(numAttrs$LAYOUT, numAttrs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
