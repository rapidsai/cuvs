/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaGraphNodeParams {
 *     enum cudaGraphNodeType type;
 *     int reserved0[3];
 *     union {
 *         long long reserved1[29];
 *         struct cudaKernelNodeParamsV2 kernel;
 *         struct cudaMemcpyNodeParams memcpy;
 *         struct cudaMemsetParamsV2 memset;
 *         struct cudaHostNodeParamsV2 host;
 *         struct cudaChildGraphNodeParams graph;
 *         struct cudaEventWaitNodeParams eventWait;
 *         struct cudaEventRecordNodeParams eventRecord;
 *         struct cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal;
 *         struct cudaExternalSemaphoreWaitNodeParamsV2 extSemWait;
 *         struct cudaMemAllocNodeParamsV2 alloc;
 *         struct cudaMemFreeNodeParams free;
 *         struct cudaConditionalNodeParams conditional;
 *     };
 *     long long reserved2;
 * }
 * }
 */
public class cudaGraphNodeParams {

    cudaGraphNodeParams() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_INT.withName("type"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("reserved0"),
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(29, PanamaFFMAPI.C_LONG_LONG).withName("reserved1"),
            cudaKernelNodeParamsV2.layout().withName("kernel"),
            cudaMemcpyNodeParams.layout().withName("memcpy"),
            cudaMemsetParamsV2.layout().withName("memset"),
            cudaHostNodeParamsV2.layout().withName("host"),
            cudaChildGraphNodeParams.layout().withName("graph"),
            cudaEventWaitNodeParams.layout().withName("eventWait"),
            cudaEventRecordNodeParams.layout().withName("eventRecord"),
            cudaExternalSemaphoreSignalNodeParamsV2.layout().withName("extSemSignal"),
            cudaExternalSemaphoreWaitNodeParamsV2.layout().withName("extSemWait"),
            cudaMemAllocNodeParamsV2.layout().withName("alloc"),
            cudaMemFreeNodeParams.layout().withName("free"),
            cudaConditionalNodeParams.layout().withName("conditional")
        ).withName("$anon$3139:5"),
        PanamaFFMAPI.C_LONG_LONG.withName("reserved2")
    ).withName("cudaGraphNodeParams");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaGraphNodeType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaGraphNodeType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaGraphNodeType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaGraphNodeType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int reserved0[3]
     * }
     */
    public static final SequenceLayout reserved0$layout() {
        return reserved0$LAYOUT;
    }

    private static final long reserved0$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int reserved0[3]
     * }
     */
    public static final long reserved0$offset() {
        return reserved0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int reserved0[3]
     * }
     */
    public static MemorySegment reserved0(MemorySegment struct) {
        return struct.asSlice(reserved0$OFFSET, reserved0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int reserved0[3]
     * }
     */
    public static void reserved0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved0$OFFSET, reserved0$LAYOUT.byteSize());
    }

    private static long[] reserved0$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int reserved0[3]
     * }
     */
    public static long[] reserved0$dimensions() {
        return reserved0$DIMS;
    }
    private static final VarHandle reserved0$ELEM_HANDLE = reserved0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int reserved0[3]
     * }
     */
    public static int reserved0(MemorySegment struct, long index0) {
        return (int)reserved0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int reserved0[3]
     * }
     */
    public static void reserved0(MemorySegment struct, long index0, int fieldValue) {
        reserved0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long long reserved1[29]
     * }
     */
    public static final SequenceLayout reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long long reserved1[29]
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long long reserved1[29]
     * }
     */
    public static MemorySegment reserved1(MemorySegment struct) {
        return struct.asSlice(reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long long reserved1[29]
     * }
     */
    public static void reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    private static long[] reserved1$DIMS = { 29 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * long long reserved1[29]
     * }
     */
    public static long[] reserved1$dimensions() {
        return reserved1$DIMS;
    }
    private static final VarHandle reserved1$ELEM_HANDLE = reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * long long reserved1[29]
     * }
     */
    public static long reserved1(MemorySegment struct, long index0) {
        return (long)reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * long long reserved1[29]
     * }
     */
    public static void reserved1(MemorySegment struct, long index0, long fieldValue) {
        reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout kernel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("kernel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaKernelNodeParamsV2 kernel
     * }
     */
    public static final GroupLayout kernel$layout() {
        return kernel$LAYOUT;
    }

    private static final long kernel$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaKernelNodeParamsV2 kernel
     * }
     */
    public static final long kernel$offset() {
        return kernel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaKernelNodeParamsV2 kernel
     * }
     */
    public static MemorySegment kernel(MemorySegment struct) {
        return struct.asSlice(kernel$OFFSET, kernel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaKernelNodeParamsV2 kernel
     * }
     */
    public static void kernel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, kernel$OFFSET, kernel$LAYOUT.byteSize());
    }

    private static final GroupLayout memcpy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("memcpy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaMemcpyNodeParams memcpy
     * }
     */
    public static final GroupLayout memcpy$layout() {
        return memcpy$LAYOUT;
    }

    private static final long memcpy$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaMemcpyNodeParams memcpy
     * }
     */
    public static final long memcpy$offset() {
        return memcpy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaMemcpyNodeParams memcpy
     * }
     */
    public static MemorySegment memcpy(MemorySegment struct) {
        return struct.asSlice(memcpy$OFFSET, memcpy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaMemcpyNodeParams memcpy
     * }
     */
    public static void memcpy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, memcpy$OFFSET, memcpy$LAYOUT.byteSize());
    }

    private static final GroupLayout memset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("memset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaMemsetParamsV2 memset
     * }
     */
    public static final GroupLayout memset$layout() {
        return memset$LAYOUT;
    }

    private static final long memset$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaMemsetParamsV2 memset
     * }
     */
    public static final long memset$offset() {
        return memset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaMemsetParamsV2 memset
     * }
     */
    public static MemorySegment memset(MemorySegment struct) {
        return struct.asSlice(memset$OFFSET, memset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaMemsetParamsV2 memset
     * }
     */
    public static void memset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, memset$OFFSET, memset$LAYOUT.byteSize());
    }

    private static final GroupLayout host$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("host"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaHostNodeParamsV2 host
     * }
     */
    public static final GroupLayout host$layout() {
        return host$LAYOUT;
    }

    private static final long host$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaHostNodeParamsV2 host
     * }
     */
    public static final long host$offset() {
        return host$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaHostNodeParamsV2 host
     * }
     */
    public static MemorySegment host(MemorySegment struct) {
        return struct.asSlice(host$OFFSET, host$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaHostNodeParamsV2 host
     * }
     */
    public static void host(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, host$OFFSET, host$LAYOUT.byteSize());
    }

    private static final GroupLayout graph$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("graph"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaChildGraphNodeParams graph
     * }
     */
    public static final GroupLayout graph$layout() {
        return graph$LAYOUT;
    }

    private static final long graph$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaChildGraphNodeParams graph
     * }
     */
    public static final long graph$offset() {
        return graph$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaChildGraphNodeParams graph
     * }
     */
    public static MemorySegment graph(MemorySegment struct) {
        return struct.asSlice(graph$OFFSET, graph$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaChildGraphNodeParams graph
     * }
     */
    public static void graph(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, graph$OFFSET, graph$LAYOUT.byteSize());
    }

    private static final GroupLayout eventWait$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("eventWait"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaEventWaitNodeParams eventWait
     * }
     */
    public static final GroupLayout eventWait$layout() {
        return eventWait$LAYOUT;
    }

    private static final long eventWait$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaEventWaitNodeParams eventWait
     * }
     */
    public static final long eventWait$offset() {
        return eventWait$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaEventWaitNodeParams eventWait
     * }
     */
    public static MemorySegment eventWait(MemorySegment struct) {
        return struct.asSlice(eventWait$OFFSET, eventWait$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaEventWaitNodeParams eventWait
     * }
     */
    public static void eventWait(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, eventWait$OFFSET, eventWait$LAYOUT.byteSize());
    }

    private static final GroupLayout eventRecord$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("eventRecord"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaEventRecordNodeParams eventRecord
     * }
     */
    public static final GroupLayout eventRecord$layout() {
        return eventRecord$LAYOUT;
    }

    private static final long eventRecord$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaEventRecordNodeParams eventRecord
     * }
     */
    public static final long eventRecord$offset() {
        return eventRecord$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaEventRecordNodeParams eventRecord
     * }
     */
    public static MemorySegment eventRecord(MemorySegment struct) {
        return struct.asSlice(eventRecord$OFFSET, eventRecord$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaEventRecordNodeParams eventRecord
     * }
     */
    public static void eventRecord(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, eventRecord$OFFSET, eventRecord$LAYOUT.byteSize());
    }

    private static final GroupLayout extSemSignal$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("extSemSignal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal
     * }
     */
    public static final GroupLayout extSemSignal$layout() {
        return extSemSignal$LAYOUT;
    }

    private static final long extSemSignal$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal
     * }
     */
    public static final long extSemSignal$offset() {
        return extSemSignal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal
     * }
     */
    public static MemorySegment extSemSignal(MemorySegment struct) {
        return struct.asSlice(extSemSignal$OFFSET, extSemSignal$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal
     * }
     */
    public static void extSemSignal(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, extSemSignal$OFFSET, extSemSignal$LAYOUT.byteSize());
    }

    private static final GroupLayout extSemWait$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("extSemWait"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreWaitNodeParamsV2 extSemWait
     * }
     */
    public static final GroupLayout extSemWait$layout() {
        return extSemWait$LAYOUT;
    }

    private static final long extSemWait$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreWaitNodeParamsV2 extSemWait
     * }
     */
    public static final long extSemWait$offset() {
        return extSemWait$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreWaitNodeParamsV2 extSemWait
     * }
     */
    public static MemorySegment extSemWait(MemorySegment struct) {
        return struct.asSlice(extSemWait$OFFSET, extSemWait$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaExternalSemaphoreWaitNodeParamsV2 extSemWait
     * }
     */
    public static void extSemWait(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, extSemWait$OFFSET, extSemWait$LAYOUT.byteSize());
    }

    private static final GroupLayout alloc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaMemAllocNodeParamsV2 alloc
     * }
     */
    public static final GroupLayout alloc$layout() {
        return alloc$LAYOUT;
    }

    private static final long alloc$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaMemAllocNodeParamsV2 alloc
     * }
     */
    public static final long alloc$offset() {
        return alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaMemAllocNodeParamsV2 alloc
     * }
     */
    public static MemorySegment alloc(MemorySegment struct) {
        return struct.asSlice(alloc$OFFSET, alloc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaMemAllocNodeParamsV2 alloc
     * }
     */
    public static void alloc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, alloc$OFFSET, alloc$LAYOUT.byteSize());
    }

    private static final GroupLayout free$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaMemFreeNodeParams free
     * }
     */
    public static final GroupLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaMemFreeNodeParams free
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaMemFreeNodeParams free
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.asSlice(free$OFFSET, free$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaMemFreeNodeParams free
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, free$OFFSET, free$LAYOUT.byteSize());
    }

    private static final GroupLayout conditional$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$3139:5"), groupElement("conditional"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaConditionalNodeParams conditional
     * }
     */
    public static final GroupLayout conditional$layout() {
        return conditional$LAYOUT;
    }

    private static final long conditional$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaConditionalNodeParams conditional
     * }
     */
    public static final long conditional$offset() {
        return conditional$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaConditionalNodeParams conditional
     * }
     */
    public static MemorySegment conditional(MemorySegment struct) {
        return struct.asSlice(conditional$OFFSET, conditional$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaConditionalNodeParams conditional
     * }
     */
    public static void conditional(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, conditional$OFFSET, conditional$LAYOUT.byteSize());
    }

    private static final OfLong reserved2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long long reserved2
     * }
     */
    public static final OfLong reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long long reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long long reserved2
     * }
     */
    public static long reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long long reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, long fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
