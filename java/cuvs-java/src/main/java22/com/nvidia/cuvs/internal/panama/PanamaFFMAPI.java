/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class PanamaFFMAPI extends PanamaFFMAPI_1 {

    PanamaFFMAPI() {
        // Should not be called directly
    }

    private static class cudaMemPoolSetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolSetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static FunctionDescriptor cudaMemPoolSetAttribute$descriptor() {
        return cudaMemPoolSetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static MethodHandle cudaMemPoolSetAttribute$handle() {
        return cudaMemPoolSetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static MemorySegment cudaMemPoolSetAttribute$address() {
        return cudaMemPoolSetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static int cudaMemPoolSetAttribute(MemorySegment memPool, int attr, MemorySegment value) {
        var mh$ = cudaMemPoolSetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolSetAttribute", memPool, attr, value);
            }
            return (int)mh$.invokeExact(memPool, attr, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolGetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolGetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static FunctionDescriptor cudaMemPoolGetAttribute$descriptor() {
        return cudaMemPoolGetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static MethodHandle cudaMemPoolGetAttribute$handle() {
        return cudaMemPoolGetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static MemorySegment cudaMemPoolGetAttribute$address() {
        return cudaMemPoolGetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, enum cudaMemPoolAttr attr, void *value)
     * }
     */
    public static int cudaMemPoolGetAttribute(MemorySegment memPool, int attr, MemorySegment value) {
        var mh$ = cudaMemPoolGetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolGetAttribute", memPool, attr, value);
            }
            return (int)mh$.invokeExact(memPool, attr, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolSetAccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolSetAccess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const struct cudaMemAccessDesc *descList, size_t count)
     * }
     */
    public static FunctionDescriptor cudaMemPoolSetAccess$descriptor() {
        return cudaMemPoolSetAccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const struct cudaMemAccessDesc *descList, size_t count)
     * }
     */
    public static MethodHandle cudaMemPoolSetAccess$handle() {
        return cudaMemPoolSetAccess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const struct cudaMemAccessDesc *descList, size_t count)
     * }
     */
    public static MemorySegment cudaMemPoolSetAccess$address() {
        return cudaMemPoolSetAccess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const struct cudaMemAccessDesc *descList, size_t count)
     * }
     */
    public static int cudaMemPoolSetAccess(MemorySegment memPool, MemorySegment descList, long count) {
        var mh$ = cudaMemPoolSetAccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolSetAccess", memPool, descList, count);
            }
            return (int)mh$.invokeExact(memPool, descList, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolGetAccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolGetAccess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAccess(enum cudaMemAccessFlags *flags, cudaMemPool_t memPool, struct cudaMemLocation *location)
     * }
     */
    public static FunctionDescriptor cudaMemPoolGetAccess$descriptor() {
        return cudaMemPoolGetAccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAccess(enum cudaMemAccessFlags *flags, cudaMemPool_t memPool, struct cudaMemLocation *location)
     * }
     */
    public static MethodHandle cudaMemPoolGetAccess$handle() {
        return cudaMemPoolGetAccess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAccess(enum cudaMemAccessFlags *flags, cudaMemPool_t memPool, struct cudaMemLocation *location)
     * }
     */
    public static MemorySegment cudaMemPoolGetAccess$address() {
        return cudaMemPoolGetAccess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolGetAccess(enum cudaMemAccessFlags *flags, cudaMemPool_t memPool, struct cudaMemLocation *location)
     * }
     */
    public static int cudaMemPoolGetAccess(MemorySegment flags, MemorySegment memPool, MemorySegment location) {
        var mh$ = cudaMemPoolGetAccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolGetAccess", flags, memPool, location);
            }
            return (int)mh$.invokeExact(flags, memPool, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolCreate(cudaMemPool_t *memPool, const struct cudaMemPoolProps *poolProps)
     * }
     */
    public static FunctionDescriptor cudaMemPoolCreate$descriptor() {
        return cudaMemPoolCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolCreate(cudaMemPool_t *memPool, const struct cudaMemPoolProps *poolProps)
     * }
     */
    public static MethodHandle cudaMemPoolCreate$handle() {
        return cudaMemPoolCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolCreate(cudaMemPool_t *memPool, const struct cudaMemPoolProps *poolProps)
     * }
     */
    public static MemorySegment cudaMemPoolCreate$address() {
        return cudaMemPoolCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolCreate(cudaMemPool_t *memPool, const struct cudaMemPoolProps *poolProps)
     * }
     */
    public static int cudaMemPoolCreate(MemorySegment memPool, MemorySegment poolProps) {
        var mh$ = cudaMemPoolCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolCreate", memPool, poolProps);
            }
            return (int)mh$.invokeExact(memPool, poolProps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool)
     * }
     */
    public static FunctionDescriptor cudaMemPoolDestroy$descriptor() {
        return cudaMemPoolDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool)
     * }
     */
    public static MethodHandle cudaMemPoolDestroy$handle() {
        return cudaMemPoolDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool)
     * }
     */
    public static MemorySegment cudaMemPoolDestroy$address() {
        return cudaMemPoolDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool)
     * }
     */
    public static int cudaMemPoolDestroy(MemorySegment memPool) {
        var mh$ = cudaMemPoolDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolDestroy", memPool);
            }
            return (int)mh$.invokeExact(memPool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMallocFromPoolAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMallocFromPoolAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocFromPoolAsync(void **ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMallocFromPoolAsync$descriptor() {
        return cudaMallocFromPoolAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocFromPoolAsync(void **ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMallocFromPoolAsync$handle() {
        return cudaMallocFromPoolAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocFromPoolAsync(void **ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMallocFromPoolAsync$address() {
        return cudaMallocFromPoolAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocFromPoolAsync(void **ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream)
     * }
     */
    public static int cudaMallocFromPoolAsync(MemorySegment ptr, long size, MemorySegment memPool, MemorySegment stream) {
        var mh$ = cudaMallocFromPoolAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMallocFromPoolAsync", ptr, size, memPool, stream);
            }
            return (int)mh$.invokeExact(ptr, size, memPool, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolExportToShareableHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolExportToShareableHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportToShareableHandle(void *shareableHandle, cudaMemPool_t memPool, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaMemPoolExportToShareableHandle$descriptor() {
        return cudaMemPoolExportToShareableHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportToShareableHandle(void *shareableHandle, cudaMemPool_t memPool, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static MethodHandle cudaMemPoolExportToShareableHandle$handle() {
        return cudaMemPoolExportToShareableHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportToShareableHandle(void *shareableHandle, cudaMemPool_t memPool, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static MemorySegment cudaMemPoolExportToShareableHandle$address() {
        return cudaMemPoolExportToShareableHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportToShareableHandle(void *shareableHandle, cudaMemPool_t memPool, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static int cudaMemPoolExportToShareableHandle(MemorySegment shareableHandle, MemorySegment memPool, int handleType, int flags) {
        var mh$ = cudaMemPoolExportToShareableHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolExportToShareableHandle", shareableHandle, memPool, handleType, flags);
            }
            return (int)mh$.invokeExact(shareableHandle, memPool, handleType, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolImportFromShareableHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolImportFromShareableHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t *memPool, void *shareableHandle, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaMemPoolImportFromShareableHandle$descriptor() {
        return cudaMemPoolImportFromShareableHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t *memPool, void *shareableHandle, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static MethodHandle cudaMemPoolImportFromShareableHandle$handle() {
        return cudaMemPoolImportFromShareableHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t *memPool, void *shareableHandle, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static MemorySegment cudaMemPoolImportFromShareableHandle$address() {
        return cudaMemPoolImportFromShareableHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t *memPool, void *shareableHandle, enum cudaMemAllocationHandleType handleType, unsigned int flags)
     * }
     */
    public static int cudaMemPoolImportFromShareableHandle(MemorySegment memPool, MemorySegment shareableHandle, int handleType, int flags) {
        var mh$ = cudaMemPoolImportFromShareableHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolImportFromShareableHandle", memPool, shareableHandle, handleType, flags);
            }
            return (int)mh$.invokeExact(memPool, shareableHandle, handleType, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolExportPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolExportPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *exportData, void *ptr)
     * }
     */
    public static FunctionDescriptor cudaMemPoolExportPointer$descriptor() {
        return cudaMemPoolExportPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *exportData, void *ptr)
     * }
     */
    public static MethodHandle cudaMemPoolExportPointer$handle() {
        return cudaMemPoolExportPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *exportData, void *ptr)
     * }
     */
    public static MemorySegment cudaMemPoolExportPointer$address() {
        return cudaMemPoolExportPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *exportData, void *ptr)
     * }
     */
    public static int cudaMemPoolExportPointer(MemorySegment exportData, MemorySegment ptr) {
        var mh$ = cudaMemPoolExportPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolExportPointer", exportData, ptr);
            }
            return (int)mh$.invokeExact(exportData, ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolImportPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolImportPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportPointer(void **ptr, cudaMemPool_t memPool, struct cudaMemPoolPtrExportData *exportData)
     * }
     */
    public static FunctionDescriptor cudaMemPoolImportPointer$descriptor() {
        return cudaMemPoolImportPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportPointer(void **ptr, cudaMemPool_t memPool, struct cudaMemPoolPtrExportData *exportData)
     * }
     */
    public static MethodHandle cudaMemPoolImportPointer$handle() {
        return cudaMemPoolImportPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportPointer(void **ptr, cudaMemPool_t memPool, struct cudaMemPoolPtrExportData *exportData)
     * }
     */
    public static MemorySegment cudaMemPoolImportPointer$address() {
        return cudaMemPoolImportPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolImportPointer(void **ptr, cudaMemPool_t memPool, struct cudaMemPoolPtrExportData *exportData)
     * }
     */
    public static int cudaMemPoolImportPointer(MemorySegment ptr, MemorySegment memPool, MemorySegment exportData) {
        var mh$ = cudaMemPoolImportPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolImportPointer", ptr, memPool, exportData);
            }
            return (int)mh$.invokeExact(ptr, memPool, exportData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaPointerGetAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaPointerGetAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr)
     * }
     */
    public static FunctionDescriptor cudaPointerGetAttributes$descriptor() {
        return cudaPointerGetAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr)
     * }
     */
    public static MethodHandle cudaPointerGetAttributes$handle() {
        return cudaPointerGetAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr)
     * }
     */
    public static MemorySegment cudaPointerGetAttributes$address() {
        return cudaPointerGetAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr)
     * }
     */
    public static int cudaPointerGetAttributes(MemorySegment attributes, MemorySegment ptr) {
        var mh$ = cudaPointerGetAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaPointerGetAttributes", attributes, ptr);
            }
            return (int)mh$.invokeExact(attributes, ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceCanAccessPeer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceCanAccessPeer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice)
     * }
     */
    public static FunctionDescriptor cudaDeviceCanAccessPeer$descriptor() {
        return cudaDeviceCanAccessPeer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice)
     * }
     */
    public static MethodHandle cudaDeviceCanAccessPeer$handle() {
        return cudaDeviceCanAccessPeer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice)
     * }
     */
    public static MemorySegment cudaDeviceCanAccessPeer$address() {
        return cudaDeviceCanAccessPeer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice)
     * }
     */
    public static int cudaDeviceCanAccessPeer(MemorySegment canAccessPeer, int device, int peerDevice) {
        var mh$ = cudaDeviceCanAccessPeer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceCanAccessPeer", canAccessPeer, device, peerDevice);
            }
            return (int)mh$.invokeExact(canAccessPeer, device, peerDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceEnablePeerAccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceEnablePeerAccess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaDeviceEnablePeerAccess$descriptor() {
        return cudaDeviceEnablePeerAccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags)
     * }
     */
    public static MethodHandle cudaDeviceEnablePeerAccess$handle() {
        return cudaDeviceEnablePeerAccess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags)
     * }
     */
    public static MemorySegment cudaDeviceEnablePeerAccess$address() {
        return cudaDeviceEnablePeerAccess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags)
     * }
     */
    public static int cudaDeviceEnablePeerAccess(int peerDevice, int flags) {
        var mh$ = cudaDeviceEnablePeerAccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceEnablePeerAccess", peerDevice, flags);
            }
            return (int)mh$.invokeExact(peerDevice, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceDisablePeerAccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceDisablePeerAccess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice)
     * }
     */
    public static FunctionDescriptor cudaDeviceDisablePeerAccess$descriptor() {
        return cudaDeviceDisablePeerAccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice)
     * }
     */
    public static MethodHandle cudaDeviceDisablePeerAccess$handle() {
        return cudaDeviceDisablePeerAccess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice)
     * }
     */
    public static MemorySegment cudaDeviceDisablePeerAccess$address() {
        return cudaDeviceDisablePeerAccess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice)
     * }
     */
    public static int cudaDeviceDisablePeerAccess(int peerDevice) {
        var mh$ = cudaDeviceDisablePeerAccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceDisablePeerAccess", peerDevice);
            }
            return (int)mh$.invokeExact(peerDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphicsUnregisterResource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphicsUnregisterResource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource)
     * }
     */
    public static FunctionDescriptor cudaGraphicsUnregisterResource$descriptor() {
        return cudaGraphicsUnregisterResource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource)
     * }
     */
    public static MethodHandle cudaGraphicsUnregisterResource$handle() {
        return cudaGraphicsUnregisterResource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource)
     * }
     */
    public static MemorySegment cudaGraphicsUnregisterResource$address() {
        return cudaGraphicsUnregisterResource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource)
     * }
     */
    public static int cudaGraphicsUnregisterResource(MemorySegment resource) {
        var mh$ = cudaGraphicsUnregisterResource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphicsUnregisterResource", resource);
            }
            return (int)mh$.invokeExact(resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphicsResourceSetMapFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphicsResourceSetMapFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaGraphicsResourceSetMapFlags$descriptor() {
        return cudaGraphicsResourceSetMapFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags)
     * }
     */
    public static MethodHandle cudaGraphicsResourceSetMapFlags$handle() {
        return cudaGraphicsResourceSetMapFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags)
     * }
     */
    public static MemorySegment cudaGraphicsResourceSetMapFlags$address() {
        return cudaGraphicsResourceSetMapFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags)
     * }
     */
    public static int cudaGraphicsResourceSetMapFlags(MemorySegment resource, int flags) {
        var mh$ = cudaGraphicsResourceSetMapFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphicsResourceSetMapFlags", resource, flags);
            }
            return (int)mh$.invokeExact(resource, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphicsMapResources {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphicsMapResources");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaGraphicsMapResources$descriptor() {
        return cudaGraphicsMapResources.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaGraphicsMapResources$handle() {
        return cudaGraphicsMapResources.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaGraphicsMapResources$address() {
        return cudaGraphicsMapResources.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static int cudaGraphicsMapResources(int count, MemorySegment resources, MemorySegment stream) {
        var mh$ = cudaGraphicsMapResources.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphicsMapResources", count, resources, stream);
            }
            return (int)mh$.invokeExact(count, resources, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphicsUnmapResources {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphicsUnmapResources");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaGraphicsUnmapResources$descriptor() {
        return cudaGraphicsUnmapResources.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaGraphicsUnmapResources$handle() {
        return cudaGraphicsUnmapResources.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaGraphicsUnmapResources$address() {
        return cudaGraphicsUnmapResources.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream)
     * }
     */
    public static int cudaGraphicsUnmapResources(int count, MemorySegment resources, MemorySegment stream) {
        var mh$ = cudaGraphicsUnmapResources.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphicsUnmapResources", count, resources, stream);
            }
            return (int)mh$.invokeExact(count, resources, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphicsResourceGetMappedPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphicsResourceGetMappedPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource)
     * }
     */
    public static FunctionDescriptor cudaGraphicsResourceGetMappedPointer$descriptor() {
        return cudaGraphicsResourceGetMappedPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource)
     * }
     */
    public static MethodHandle cudaGraphicsResourceGetMappedPointer$handle() {
        return cudaGraphicsResourceGetMappedPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource)
     * }
     */
    public static MemorySegment cudaGraphicsResourceGetMappedPointer$address() {
        return cudaGraphicsResourceGetMappedPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource)
     * }
     */
    public static int cudaGraphicsResourceGetMappedPointer(MemorySegment devPtr, MemorySegment size, MemorySegment resource) {
        var mh$ = cudaGraphicsResourceGetMappedPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphicsResourceGetMappedPointer", devPtr, size, resource);
            }
            return (int)mh$.invokeExact(devPtr, size, resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphicsSubResourceGetMappedArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphicsSubResourceGetMappedArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)
     * }
     */
    public static FunctionDescriptor cudaGraphicsSubResourceGetMappedArray$descriptor() {
        return cudaGraphicsSubResourceGetMappedArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)
     * }
     */
    public static MethodHandle cudaGraphicsSubResourceGetMappedArray$handle() {
        return cudaGraphicsSubResourceGetMappedArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)
     * }
     */
    public static MemorySegment cudaGraphicsSubResourceGetMappedArray$address() {
        return cudaGraphicsSubResourceGetMappedArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)
     * }
     */
    public static int cudaGraphicsSubResourceGetMappedArray(MemorySegment array, MemorySegment resource, int arrayIndex, int mipLevel) {
        var mh$ = cudaGraphicsSubResourceGetMappedArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphicsSubResourceGetMappedArray", array, resource, arrayIndex, mipLevel);
            }
            return (int)mh$.invokeExact(array, resource, arrayIndex, mipLevel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphicsResourceGetMappedMipmappedArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphicsResourceGetMappedMipmappedArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource)
     * }
     */
    public static FunctionDescriptor cudaGraphicsResourceGetMappedMipmappedArray$descriptor() {
        return cudaGraphicsResourceGetMappedMipmappedArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource)
     * }
     */
    public static MethodHandle cudaGraphicsResourceGetMappedMipmappedArray$handle() {
        return cudaGraphicsResourceGetMappedMipmappedArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource)
     * }
     */
    public static MemorySegment cudaGraphicsResourceGetMappedMipmappedArray$address() {
        return cudaGraphicsResourceGetMappedMipmappedArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource)
     * }
     */
    public static int cudaGraphicsResourceGetMappedMipmappedArray(MemorySegment mipmappedArray, MemorySegment resource) {
        var mh$ = cudaGraphicsResourceGetMappedMipmappedArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphicsResourceGetMappedMipmappedArray", mipmappedArray, resource);
            }
            return (int)mh$.invokeExact(mipmappedArray, resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetChannelDesc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetChannelDesc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array)
     * }
     */
    public static FunctionDescriptor cudaGetChannelDesc$descriptor() {
        return cudaGetChannelDesc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array)
     * }
     */
    public static MethodHandle cudaGetChannelDesc$handle() {
        return cudaGetChannelDesc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array)
     * }
     */
    public static MemorySegment cudaGetChannelDesc$address() {
        return cudaGetChannelDesc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array)
     * }
     */
    public static int cudaGetChannelDesc(MemorySegment desc, MemorySegment array) {
        var mh$ = cudaGetChannelDesc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetChannelDesc", desc, array);
            }
            return (int)mh$.invokeExact(desc, array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaCreateChannelDesc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cudaChannelFormatDesc.layout(),
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaCreateChannelDesc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f)
     * }
     */
    public static FunctionDescriptor cudaCreateChannelDesc$descriptor() {
        return cudaCreateChannelDesc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f)
     * }
     */
    public static MethodHandle cudaCreateChannelDesc$handle() {
        return cudaCreateChannelDesc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f)
     * }
     */
    public static MemorySegment cudaCreateChannelDesc$address() {
        return cudaCreateChannelDesc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f)
     * }
     */
    public static MemorySegment cudaCreateChannelDesc(SegmentAllocator allocator, int x, int y, int z, int w, int f) {
        var mh$ = cudaCreateChannelDesc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaCreateChannelDesc", allocator, x, y, z, w, f);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x, y, z, w, f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaCreateTextureObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaCreateTextureObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc)
     * }
     */
    public static FunctionDescriptor cudaCreateTextureObject$descriptor() {
        return cudaCreateTextureObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc)
     * }
     */
    public static MethodHandle cudaCreateTextureObject$handle() {
        return cudaCreateTextureObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc)
     * }
     */
    public static MemorySegment cudaCreateTextureObject$address() {
        return cudaCreateTextureObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc)
     * }
     */
    public static int cudaCreateTextureObject(MemorySegment pTexObject, MemorySegment pResDesc, MemorySegment pTexDesc, MemorySegment pResViewDesc) {
        var mh$ = cudaCreateTextureObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaCreateTextureObject", pTexObject, pResDesc, pTexDesc, pResViewDesc);
            }
            return (int)mh$.invokeExact(pTexObject, pResDesc, pTexDesc, pResViewDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDestroyTextureObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDestroyTextureObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject)
     * }
     */
    public static FunctionDescriptor cudaDestroyTextureObject$descriptor() {
        return cudaDestroyTextureObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject)
     * }
     */
    public static MethodHandle cudaDestroyTextureObject$handle() {
        return cudaDestroyTextureObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject)
     * }
     */
    public static MemorySegment cudaDestroyTextureObject$address() {
        return cudaDestroyTextureObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject)
     * }
     */
    public static int cudaDestroyTextureObject(long texObject) {
        var mh$ = cudaDestroyTextureObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDestroyTextureObject", texObject);
            }
            return (int)mh$.invokeExact(texObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetTextureObjectResourceDesc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetTextureObjectResourceDesc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject)
     * }
     */
    public static FunctionDescriptor cudaGetTextureObjectResourceDesc$descriptor() {
        return cudaGetTextureObjectResourceDesc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject)
     * }
     */
    public static MethodHandle cudaGetTextureObjectResourceDesc$handle() {
        return cudaGetTextureObjectResourceDesc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject)
     * }
     */
    public static MemorySegment cudaGetTextureObjectResourceDesc$address() {
        return cudaGetTextureObjectResourceDesc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject)
     * }
     */
    public static int cudaGetTextureObjectResourceDesc(MemorySegment pResDesc, long texObject) {
        var mh$ = cudaGetTextureObjectResourceDesc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetTextureObjectResourceDesc", pResDesc, texObject);
            }
            return (int)mh$.invokeExact(pResDesc, texObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetTextureObjectTextureDesc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetTextureObjectTextureDesc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject)
     * }
     */
    public static FunctionDescriptor cudaGetTextureObjectTextureDesc$descriptor() {
        return cudaGetTextureObjectTextureDesc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject)
     * }
     */
    public static MethodHandle cudaGetTextureObjectTextureDesc$handle() {
        return cudaGetTextureObjectTextureDesc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject)
     * }
     */
    public static MemorySegment cudaGetTextureObjectTextureDesc$address() {
        return cudaGetTextureObjectTextureDesc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject)
     * }
     */
    public static int cudaGetTextureObjectTextureDesc(MemorySegment pTexDesc, long texObject) {
        var mh$ = cudaGetTextureObjectTextureDesc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetTextureObjectTextureDesc", pTexDesc, texObject);
            }
            return (int)mh$.invokeExact(pTexDesc, texObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetTextureObjectResourceViewDesc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetTextureObjectResourceViewDesc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject)
     * }
     */
    public static FunctionDescriptor cudaGetTextureObjectResourceViewDesc$descriptor() {
        return cudaGetTextureObjectResourceViewDesc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject)
     * }
     */
    public static MethodHandle cudaGetTextureObjectResourceViewDesc$handle() {
        return cudaGetTextureObjectResourceViewDesc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject)
     * }
     */
    public static MemorySegment cudaGetTextureObjectResourceViewDesc$address() {
        return cudaGetTextureObjectResourceViewDesc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject)
     * }
     */
    public static int cudaGetTextureObjectResourceViewDesc(MemorySegment pResViewDesc, long texObject) {
        var mh$ = cudaGetTextureObjectResourceViewDesc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetTextureObjectResourceViewDesc", pResViewDesc, texObject);
            }
            return (int)mh$.invokeExact(pResViewDesc, texObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaCreateSurfaceObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaCreateSurfaceObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc)
     * }
     */
    public static FunctionDescriptor cudaCreateSurfaceObject$descriptor() {
        return cudaCreateSurfaceObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc)
     * }
     */
    public static MethodHandle cudaCreateSurfaceObject$handle() {
        return cudaCreateSurfaceObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc)
     * }
     */
    public static MemorySegment cudaCreateSurfaceObject$address() {
        return cudaCreateSurfaceObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc)
     * }
     */
    public static int cudaCreateSurfaceObject(MemorySegment pSurfObject, MemorySegment pResDesc) {
        var mh$ = cudaCreateSurfaceObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaCreateSurfaceObject", pSurfObject, pResDesc);
            }
            return (int)mh$.invokeExact(pSurfObject, pResDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDestroySurfaceObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDestroySurfaceObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject)
     * }
     */
    public static FunctionDescriptor cudaDestroySurfaceObject$descriptor() {
        return cudaDestroySurfaceObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject)
     * }
     */
    public static MethodHandle cudaDestroySurfaceObject$handle() {
        return cudaDestroySurfaceObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject)
     * }
     */
    public static MemorySegment cudaDestroySurfaceObject$address() {
        return cudaDestroySurfaceObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject)
     * }
     */
    public static int cudaDestroySurfaceObject(long surfObject) {
        var mh$ = cudaDestroySurfaceObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDestroySurfaceObject", surfObject);
            }
            return (int)mh$.invokeExact(surfObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetSurfaceObjectResourceDesc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetSurfaceObjectResourceDesc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject)
     * }
     */
    public static FunctionDescriptor cudaGetSurfaceObjectResourceDesc$descriptor() {
        return cudaGetSurfaceObjectResourceDesc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject)
     * }
     */
    public static MethodHandle cudaGetSurfaceObjectResourceDesc$handle() {
        return cudaGetSurfaceObjectResourceDesc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject)
     * }
     */
    public static MemorySegment cudaGetSurfaceObjectResourceDesc$address() {
        return cudaGetSurfaceObjectResourceDesc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject)
     * }
     */
    public static int cudaGetSurfaceObjectResourceDesc(MemorySegment pResDesc, long surfObject) {
        var mh$ = cudaGetSurfaceObjectResourceDesc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetSurfaceObjectResourceDesc", pResDesc, surfObject);
            }
            return (int)mh$.invokeExact(pResDesc, surfObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDriverGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDriverGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDriverGetVersion(int *driverVersion)
     * }
     */
    public static FunctionDescriptor cudaDriverGetVersion$descriptor() {
        return cudaDriverGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDriverGetVersion(int *driverVersion)
     * }
     */
    public static MethodHandle cudaDriverGetVersion$handle() {
        return cudaDriverGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDriverGetVersion(int *driverVersion)
     * }
     */
    public static MemorySegment cudaDriverGetVersion$address() {
        return cudaDriverGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDriverGetVersion(int *driverVersion)
     * }
     */
    public static int cudaDriverGetVersion(MemorySegment driverVersion) {
        var mh$ = cudaDriverGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDriverGetVersion", driverVersion);
            }
            return (int)mh$.invokeExact(driverVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaRuntimeGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaRuntimeGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaRuntimeGetVersion(int *runtimeVersion)
     * }
     */
    public static FunctionDescriptor cudaRuntimeGetVersion$descriptor() {
        return cudaRuntimeGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaRuntimeGetVersion(int *runtimeVersion)
     * }
     */
    public static MethodHandle cudaRuntimeGetVersion$handle() {
        return cudaRuntimeGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaRuntimeGetVersion(int *runtimeVersion)
     * }
     */
    public static MemorySegment cudaRuntimeGetVersion$address() {
        return cudaRuntimeGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaRuntimeGetVersion(int *runtimeVersion)
     * }
     */
    public static int cudaRuntimeGetVersion(MemorySegment runtimeVersion) {
        var mh$ = cudaRuntimeGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaRuntimeGetVersion", runtimeVersion);
            }
            return (int)mh$.invokeExact(runtimeVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphCreate(cudaGraph_t *pGraph, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaGraphCreate$descriptor() {
        return cudaGraphCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphCreate(cudaGraph_t *pGraph, unsigned int flags)
     * }
     */
    public static MethodHandle cudaGraphCreate$handle() {
        return cudaGraphCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphCreate(cudaGraph_t *pGraph, unsigned int flags)
     * }
     */
    public static MemorySegment cudaGraphCreate$address() {
        return cudaGraphCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphCreate(cudaGraph_t *pGraph, unsigned int flags)
     * }
     */
    public static int cudaGraphCreate(MemorySegment pGraph, int flags) {
        var mh$ = cudaGraphCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphCreate", pGraph, flags);
            }
            return (int)mh$.invokeExact(pGraph, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddKernelNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddKernelNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddKernelNode$descriptor() {
        return cudaGraphAddKernelNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphAddKernelNode$handle() {
        return cudaGraphAddKernelNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphAddKernelNode$address() {
        return cudaGraphAddKernelNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphAddKernelNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment pNodeParams) {
        var mh$ = cudaGraphAddKernelNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddKernelNode", pGraphNode, graph, pDependencies, numDependencies, pNodeParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphKernelNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphKernelNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphKernelNodeGetParams$descriptor() {
        return cudaGraphKernelNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphKernelNodeGetParams$handle() {
        return cudaGraphKernelNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphKernelNodeGetParams$address() {
        return cudaGraphKernelNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphKernelNodeGetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphKernelNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphKernelNodeGetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphKernelNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphKernelNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphKernelNodeSetParams$descriptor() {
        return cudaGraphKernelNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphKernelNodeSetParams$handle() {
        return cudaGraphKernelNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphKernelNodeSetParams$address() {
        return cudaGraphKernelNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphKernelNodeSetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphKernelNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphKernelNodeSetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphKernelNodeCopyAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphKernelNodeCopyAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst)
     * }
     */
    public static FunctionDescriptor cudaGraphKernelNodeCopyAttributes$descriptor() {
        return cudaGraphKernelNodeCopyAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst)
     * }
     */
    public static MethodHandle cudaGraphKernelNodeCopyAttributes$handle() {
        return cudaGraphKernelNodeCopyAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst)
     * }
     */
    public static MemorySegment cudaGraphKernelNodeCopyAttributes$address() {
        return cudaGraphKernelNodeCopyAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst)
     * }
     */
    public static int cudaGraphKernelNodeCopyAttributes(MemorySegment hSrc, MemorySegment hDst) {
        var mh$ = cudaGraphKernelNodeCopyAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphKernelNodeCopyAttributes", hSrc, hDst);
            }
            return (int)mh$.invokeExact(hSrc, hDst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphKernelNodeGetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphKernelNodeGetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static FunctionDescriptor cudaGraphKernelNodeGetAttribute$descriptor() {
        return cudaGraphKernelNodeGetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static MethodHandle cudaGraphKernelNodeGetAttribute$handle() {
        return cudaGraphKernelNodeGetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static MemorySegment cudaGraphKernelNodeGetAttribute$address() {
        return cudaGraphKernelNodeGetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static int cudaGraphKernelNodeGetAttribute(MemorySegment hNode, int attr, MemorySegment value_out) {
        var mh$ = cudaGraphKernelNodeGetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphKernelNodeGetAttribute", hNode, attr, value_out);
            }
            return (int)mh$.invokeExact(hNode, attr, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphKernelNodeSetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphKernelNodeSetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static FunctionDescriptor cudaGraphKernelNodeSetAttribute$descriptor() {
        return cudaGraphKernelNodeSetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static MethodHandle cudaGraphKernelNodeSetAttribute$handle() {
        return cudaGraphKernelNodeSetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static MemorySegment cudaGraphKernelNodeSetAttribute$address() {
        return cudaGraphKernelNodeSetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static int cudaGraphKernelNodeSetAttribute(MemorySegment hNode, int attr, MemorySegment value) {
        var mh$ = cudaGraphKernelNodeSetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphKernelNodeSetAttribute", hNode, attr, value);
            }
            return (int)mh$.invokeExact(hNode, attr, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddMemcpyNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddMemcpyNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemcpy3DParms *pCopyParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddMemcpyNode$descriptor() {
        return cudaGraphAddMemcpyNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemcpy3DParms *pCopyParams)
     * }
     */
    public static MethodHandle cudaGraphAddMemcpyNode$handle() {
        return cudaGraphAddMemcpyNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemcpy3DParms *pCopyParams)
     * }
     */
    public static MemorySegment cudaGraphAddMemcpyNode$address() {
        return cudaGraphAddMemcpyNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemcpy3DParms *pCopyParams)
     * }
     */
    public static int cudaGraphAddMemcpyNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment pCopyParams) {
        var mh$ = cudaGraphAddMemcpyNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddMemcpyNode", pGraphNode, graph, pDependencies, numDependencies, pCopyParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, pCopyParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddMemcpyNodeToSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddMemcpyNodeToSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphAddMemcpyNodeToSymbol$descriptor() {
        return cudaGraphAddMemcpyNodeToSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphAddMemcpyNodeToSymbol$handle() {
        return cudaGraphAddMemcpyNodeToSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphAddMemcpyNodeToSymbol$address() {
        return cudaGraphAddMemcpyNodeToSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphAddMemcpyNodeToSymbol(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment symbol, MemorySegment src, long count, long offset, int kind) {
        var mh$ = cudaGraphAddMemcpyNodeToSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddMemcpyNodeToSymbol", pGraphNode, graph, pDependencies, numDependencies, symbol, src, count, offset, kind);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, symbol, src, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddMemcpyNodeFromSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddMemcpyNodeFromSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphAddMemcpyNodeFromSymbol$descriptor() {
        return cudaGraphAddMemcpyNodeFromSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphAddMemcpyNodeFromSymbol$handle() {
        return cudaGraphAddMemcpyNodeFromSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphAddMemcpyNodeFromSymbol$address() {
        return cudaGraphAddMemcpyNodeFromSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphAddMemcpyNodeFromSymbol(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment dst, MemorySegment symbol, long count, long offset, int kind) {
        var mh$ = cudaGraphAddMemcpyNodeFromSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddMemcpyNodeFromSymbol", pGraphNode, graph, pDependencies, numDependencies, dst, symbol, count, offset, kind);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, dst, symbol, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddMemcpyNode1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddMemcpyNode1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphAddMemcpyNode1D$descriptor() {
        return cudaGraphAddMemcpyNode1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphAddMemcpyNode1D$handle() {
        return cudaGraphAddMemcpyNode1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphAddMemcpyNode1D$address() {
        return cudaGraphAddMemcpyNode1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphAddMemcpyNode1D(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment dst, MemorySegment src, long count, int kind) {
        var mh$ = cudaGraphAddMemcpyNode1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddMemcpyNode1D", pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, dst, src, count, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemcpyNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemcpyNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphMemcpyNodeGetParams$descriptor() {
        return cudaGraphMemcpyNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphMemcpyNodeGetParams$handle() {
        return cudaGraphMemcpyNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphMemcpyNodeGetParams$address() {
        return cudaGraphMemcpyNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static int cudaGraphMemcpyNodeGetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphMemcpyNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemcpyNodeGetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemcpyNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemcpyNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphMemcpyNodeSetParams$descriptor() {
        return cudaGraphMemcpyNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphMemcpyNodeSetParams$handle() {
        return cudaGraphMemcpyNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphMemcpyNodeSetParams$address() {
        return cudaGraphMemcpyNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static int cudaGraphMemcpyNodeSetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphMemcpyNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemcpyNodeSetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemcpyNodeSetParamsToSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemcpyNodeSetParamsToSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphMemcpyNodeSetParamsToSymbol$descriptor() {
        return cudaGraphMemcpyNodeSetParamsToSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphMemcpyNodeSetParamsToSymbol$handle() {
        return cudaGraphMemcpyNodeSetParamsToSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphMemcpyNodeSetParamsToSymbol$address() {
        return cudaGraphMemcpyNodeSetParamsToSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphMemcpyNodeSetParamsToSymbol(MemorySegment node, MemorySegment symbol, MemorySegment src, long count, long offset, int kind) {
        var mh$ = cudaGraphMemcpyNodeSetParamsToSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemcpyNodeSetParamsToSymbol", node, symbol, src, count, offset, kind);
            }
            return (int)mh$.invokeExact(node, symbol, src, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemcpyNodeSetParamsFromSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemcpyNodeSetParamsFromSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphMemcpyNodeSetParamsFromSymbol$descriptor() {
        return cudaGraphMemcpyNodeSetParamsFromSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphMemcpyNodeSetParamsFromSymbol$handle() {
        return cudaGraphMemcpyNodeSetParamsFromSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphMemcpyNodeSetParamsFromSymbol$address() {
        return cudaGraphMemcpyNodeSetParamsFromSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphMemcpyNodeSetParamsFromSymbol(MemorySegment node, MemorySegment dst, MemorySegment symbol, long count, long offset, int kind) {
        var mh$ = cudaGraphMemcpyNodeSetParamsFromSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemcpyNodeSetParamsFromSymbol", node, dst, symbol, count, offset, kind);
            }
            return (int)mh$.invokeExact(node, dst, symbol, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemcpyNodeSetParams1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemcpyNodeSetParams1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphMemcpyNodeSetParams1D$descriptor() {
        return cudaGraphMemcpyNodeSetParams1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphMemcpyNodeSetParams1D$handle() {
        return cudaGraphMemcpyNodeSetParams1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphMemcpyNodeSetParams1D$address() {
        return cudaGraphMemcpyNodeSetParams1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphMemcpyNodeSetParams1D(MemorySegment node, MemorySegment dst, MemorySegment src, long count, int kind) {
        var mh$ = cudaGraphMemcpyNodeSetParams1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemcpyNodeSetParams1D", node, dst, src, count, kind);
            }
            return (int)mh$.invokeExact(node, dst, src, count, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddMemsetNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddMemsetNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemsetParams *pMemsetParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddMemsetNode$descriptor() {
        return cudaGraphAddMemsetNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemsetParams *pMemsetParams)
     * }
     */
    public static MethodHandle cudaGraphAddMemsetNode$handle() {
        return cudaGraphAddMemsetNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemsetParams *pMemsetParams)
     * }
     */
    public static MemorySegment cudaGraphAddMemsetNode$address() {
        return cudaGraphAddMemsetNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemsetParams *pMemsetParams)
     * }
     */
    public static int cudaGraphAddMemsetNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment pMemsetParams) {
        var mh$ = cudaGraphAddMemsetNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddMemsetNode", pGraphNode, graph, pDependencies, numDependencies, pMemsetParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, pMemsetParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemsetNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemsetNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphMemsetNodeGetParams$descriptor() {
        return cudaGraphMemsetNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphMemsetNodeGetParams$handle() {
        return cudaGraphMemsetNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphMemsetNodeGetParams$address() {
        return cudaGraphMemsetNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static int cudaGraphMemsetNodeGetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphMemsetNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemsetNodeGetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemsetNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemsetNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphMemsetNodeSetParams$descriptor() {
        return cudaGraphMemsetNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphMemsetNodeSetParams$handle() {
        return cudaGraphMemsetNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphMemsetNodeSetParams$address() {
        return cudaGraphMemsetNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static int cudaGraphMemsetNodeSetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphMemsetNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemsetNodeSetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddHostNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddHostNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddHostNode$descriptor() {
        return cudaGraphAddHostNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphAddHostNode$handle() {
        return cudaGraphAddHostNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphAddHostNode$address() {
        return cudaGraphAddHostNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphAddHostNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment pNodeParams) {
        var mh$ = cudaGraphAddHostNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddHostNode", pGraphNode, graph, pDependencies, numDependencies, pNodeParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphHostNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphHostNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphHostNodeGetParams$descriptor() {
        return cudaGraphHostNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphHostNodeGetParams$handle() {
        return cudaGraphHostNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphHostNodeGetParams$address() {
        return cudaGraphHostNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphHostNodeGetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphHostNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphHostNodeGetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphHostNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphHostNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphHostNodeSetParams$descriptor() {
        return cudaGraphHostNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphHostNodeSetParams$handle() {
        return cudaGraphHostNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphHostNodeSetParams$address() {
        return cudaGraphHostNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphHostNodeSetParams(MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphHostNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphHostNodeSetParams", node, pNodeParams);
            }
            return (int)mh$.invokeExact(node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddChildGraphNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddChildGraphNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaGraph_t childGraph)
     * }
     */
    public static FunctionDescriptor cudaGraphAddChildGraphNode$descriptor() {
        return cudaGraphAddChildGraphNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaGraph_t childGraph)
     * }
     */
    public static MethodHandle cudaGraphAddChildGraphNode$handle() {
        return cudaGraphAddChildGraphNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaGraph_t childGraph)
     * }
     */
    public static MemorySegment cudaGraphAddChildGraphNode$address() {
        return cudaGraphAddChildGraphNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaGraph_t childGraph)
     * }
     */
    public static int cudaGraphAddChildGraphNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment childGraph) {
        var mh$ = cudaGraphAddChildGraphNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddChildGraphNode", pGraphNode, graph, pDependencies, numDependencies, childGraph);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, childGraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphChildGraphNodeGetGraph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphChildGraphNodeGetGraph");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t *pGraph)
     * }
     */
    public static FunctionDescriptor cudaGraphChildGraphNodeGetGraph$descriptor() {
        return cudaGraphChildGraphNodeGetGraph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t *pGraph)
     * }
     */
    public static MethodHandle cudaGraphChildGraphNodeGetGraph$handle() {
        return cudaGraphChildGraphNodeGetGraph.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t *pGraph)
     * }
     */
    public static MemorySegment cudaGraphChildGraphNodeGetGraph$address() {
        return cudaGraphChildGraphNodeGetGraph.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t *pGraph)
     * }
     */
    public static int cudaGraphChildGraphNodeGetGraph(MemorySegment node, MemorySegment pGraph) {
        var mh$ = cudaGraphChildGraphNodeGetGraph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphChildGraphNodeGetGraph", node, pGraph);
            }
            return (int)mh$.invokeExact(node, pGraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddEmptyNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddEmptyNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies)
     * }
     */
    public static FunctionDescriptor cudaGraphAddEmptyNode$descriptor() {
        return cudaGraphAddEmptyNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies)
     * }
     */
    public static MethodHandle cudaGraphAddEmptyNode$handle() {
        return cudaGraphAddEmptyNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies)
     * }
     */
    public static MemorySegment cudaGraphAddEmptyNode$address() {
        return cudaGraphAddEmptyNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies)
     * }
     */
    public static int cudaGraphAddEmptyNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies) {
        var mh$ = cudaGraphAddEmptyNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddEmptyNode", pGraphNode, graph, pDependencies, numDependencies);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddEventRecordNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddEventRecordNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaGraphAddEventRecordNode$descriptor() {
        return cudaGraphAddEventRecordNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaGraphAddEventRecordNode$handle() {
        return cudaGraphAddEventRecordNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaGraphAddEventRecordNode$address() {
        return cudaGraphAddEventRecordNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static int cudaGraphAddEventRecordNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment event) {
        var mh$ = cudaGraphAddEventRecordNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddEventRecordNode", pGraphNode, graph, pDependencies, numDependencies, event);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphEventRecordNodeGetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphEventRecordNodeGetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static FunctionDescriptor cudaGraphEventRecordNodeGetEvent$descriptor() {
        return cudaGraphEventRecordNodeGetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static MethodHandle cudaGraphEventRecordNodeGetEvent$handle() {
        return cudaGraphEventRecordNodeGetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static MemorySegment cudaGraphEventRecordNodeGetEvent$address() {
        return cudaGraphEventRecordNodeGetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static int cudaGraphEventRecordNodeGetEvent(MemorySegment node, MemorySegment event_out) {
        var mh$ = cudaGraphEventRecordNodeGetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphEventRecordNodeGetEvent", node, event_out);
            }
            return (int)mh$.invokeExact(node, event_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphEventRecordNodeSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphEventRecordNodeSetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaGraphEventRecordNodeSetEvent$descriptor() {
        return cudaGraphEventRecordNodeSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaGraphEventRecordNodeSetEvent$handle() {
        return cudaGraphEventRecordNodeSetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaGraphEventRecordNodeSetEvent$address() {
        return cudaGraphEventRecordNodeSetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static int cudaGraphEventRecordNodeSetEvent(MemorySegment node, MemorySegment event) {
        var mh$ = cudaGraphEventRecordNodeSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphEventRecordNodeSetEvent", node, event);
            }
            return (int)mh$.invokeExact(node, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddEventWaitNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddEventWaitNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaGraphAddEventWaitNode$descriptor() {
        return cudaGraphAddEventWaitNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaGraphAddEventWaitNode$handle() {
        return cudaGraphAddEventWaitNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaGraphAddEventWaitNode$address() {
        return cudaGraphAddEventWaitNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaEvent_t event)
     * }
     */
    public static int cudaGraphAddEventWaitNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment event) {
        var mh$ = cudaGraphAddEventWaitNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddEventWaitNode", pGraphNode, graph, pDependencies, numDependencies, event);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphEventWaitNodeGetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphEventWaitNodeGetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static FunctionDescriptor cudaGraphEventWaitNodeGetEvent$descriptor() {
        return cudaGraphEventWaitNodeGetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static MethodHandle cudaGraphEventWaitNodeGetEvent$handle() {
        return cudaGraphEventWaitNodeGetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static MemorySegment cudaGraphEventWaitNodeGetEvent$address() {
        return cudaGraphEventWaitNodeGetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t *event_out)
     * }
     */
    public static int cudaGraphEventWaitNodeGetEvent(MemorySegment node, MemorySegment event_out) {
        var mh$ = cudaGraphEventWaitNodeGetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphEventWaitNodeGetEvent", node, event_out);
            }
            return (int)mh$.invokeExact(node, event_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphEventWaitNodeSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphEventWaitNodeSetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaGraphEventWaitNodeSetEvent$descriptor() {
        return cudaGraphEventWaitNodeSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaGraphEventWaitNodeSetEvent$handle() {
        return cudaGraphEventWaitNodeSetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaGraphEventWaitNodeSetEvent$address() {
        return cudaGraphEventWaitNodeSetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event)
     * }
     */
    public static int cudaGraphEventWaitNodeSetEvent(MemorySegment node, MemorySegment event) {
        var mh$ = cudaGraphEventWaitNodeSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphEventWaitNodeSetEvent", node, event);
            }
            return (int)mh$.invokeExact(node, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddExternalSemaphoresSignalNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddExternalSemaphoresSignalNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddExternalSemaphoresSignalNode$descriptor() {
        return cudaGraphAddExternalSemaphoresSignalNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphAddExternalSemaphoresSignalNode$handle() {
        return cudaGraphAddExternalSemaphoresSignalNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphAddExternalSemaphoresSignalNode$address() {
        return cudaGraphAddExternalSemaphoresSignalNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphAddExternalSemaphoresSignalNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment nodeParams) {
        var mh$ = cudaGraphAddExternalSemaphoresSignalNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddExternalSemaphoresSignalNode", pGraphNode, graph, pDependencies, numDependencies, nodeParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExternalSemaphoresSignalNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExternalSemaphoresSignalNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreSignalNodeParams *params_out)
     * }
     */
    public static FunctionDescriptor cudaGraphExternalSemaphoresSignalNodeGetParams$descriptor() {
        return cudaGraphExternalSemaphoresSignalNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreSignalNodeParams *params_out)
     * }
     */
    public static MethodHandle cudaGraphExternalSemaphoresSignalNodeGetParams$handle() {
        return cudaGraphExternalSemaphoresSignalNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreSignalNodeParams *params_out)
     * }
     */
    public static MemorySegment cudaGraphExternalSemaphoresSignalNodeGetParams$address() {
        return cudaGraphExternalSemaphoresSignalNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreSignalNodeParams *params_out)
     * }
     */
    public static int cudaGraphExternalSemaphoresSignalNodeGetParams(MemorySegment hNode, MemorySegment params_out) {
        var mh$ = cudaGraphExternalSemaphoresSignalNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExternalSemaphoresSignalNodeGetParams", hNode, params_out);
            }
            return (int)mh$.invokeExact(hNode, params_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExternalSemaphoresSignalNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExternalSemaphoresSignalNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExternalSemaphoresSignalNodeSetParams$descriptor() {
        return cudaGraphExternalSemaphoresSignalNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphExternalSemaphoresSignalNodeSetParams$handle() {
        return cudaGraphExternalSemaphoresSignalNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphExternalSemaphoresSignalNodeSetParams$address() {
        return cudaGraphExternalSemaphoresSignalNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphExternalSemaphoresSignalNodeSetParams(MemorySegment hNode, MemorySegment nodeParams) {
        var mh$ = cudaGraphExternalSemaphoresSignalNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExternalSemaphoresSignalNodeSetParams", hNode, nodeParams);
            }
            return (int)mh$.invokeExact(hNode, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddExternalSemaphoresWaitNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddExternalSemaphoresWaitNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddExternalSemaphoresWaitNode$descriptor() {
        return cudaGraphAddExternalSemaphoresWaitNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphAddExternalSemaphoresWaitNode$handle() {
        return cudaGraphAddExternalSemaphoresWaitNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphAddExternalSemaphoresWaitNode$address() {
        return cudaGraphAddExternalSemaphoresWaitNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphAddExternalSemaphoresWaitNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment nodeParams) {
        var mh$ = cudaGraphAddExternalSemaphoresWaitNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddExternalSemaphoresWaitNode", pGraphNode, graph, pDependencies, numDependencies, nodeParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExternalSemaphoresWaitNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExternalSemaphoresWaitNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreWaitNodeParams *params_out)
     * }
     */
    public static FunctionDescriptor cudaGraphExternalSemaphoresWaitNodeGetParams$descriptor() {
        return cudaGraphExternalSemaphoresWaitNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreWaitNodeParams *params_out)
     * }
     */
    public static MethodHandle cudaGraphExternalSemaphoresWaitNodeGetParams$handle() {
        return cudaGraphExternalSemaphoresWaitNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreWaitNodeParams *params_out)
     * }
     */
    public static MemorySegment cudaGraphExternalSemaphoresWaitNodeGetParams$address() {
        return cudaGraphExternalSemaphoresWaitNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, struct cudaExternalSemaphoreWaitNodeParams *params_out)
     * }
     */
    public static int cudaGraphExternalSemaphoresWaitNodeGetParams(MemorySegment hNode, MemorySegment params_out) {
        var mh$ = cudaGraphExternalSemaphoresWaitNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExternalSemaphoresWaitNodeGetParams", hNode, params_out);
            }
            return (int)mh$.invokeExact(hNode, params_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExternalSemaphoresWaitNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExternalSemaphoresWaitNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExternalSemaphoresWaitNodeSetParams$descriptor() {
        return cudaGraphExternalSemaphoresWaitNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphExternalSemaphoresWaitNodeSetParams$handle() {
        return cudaGraphExternalSemaphoresWaitNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphExternalSemaphoresWaitNodeSetParams$address() {
        return cudaGraphExternalSemaphoresWaitNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphExternalSemaphoresWaitNodeSetParams(MemorySegment hNode, MemorySegment nodeParams) {
        var mh$ = cudaGraphExternalSemaphoresWaitNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExternalSemaphoresWaitNodeSetParams", hNode, nodeParams);
            }
            return (int)mh$.invokeExact(hNode, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddMemAllocNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddMemAllocNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaMemAllocNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddMemAllocNode$descriptor() {
        return cudaGraphAddMemAllocNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaMemAllocNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphAddMemAllocNode$handle() {
        return cudaGraphAddMemAllocNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaMemAllocNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphAddMemAllocNode$address() {
        return cudaGraphAddMemAllocNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaMemAllocNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphAddMemAllocNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment nodeParams) {
        var mh$ = cudaGraphAddMemAllocNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddMemAllocNode", pGraphNode, graph, pDependencies, numDependencies, nodeParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemAllocNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemAllocNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, struct cudaMemAllocNodeParams *params_out)
     * }
     */
    public static FunctionDescriptor cudaGraphMemAllocNodeGetParams$descriptor() {
        return cudaGraphMemAllocNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, struct cudaMemAllocNodeParams *params_out)
     * }
     */
    public static MethodHandle cudaGraphMemAllocNodeGetParams$handle() {
        return cudaGraphMemAllocNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, struct cudaMemAllocNodeParams *params_out)
     * }
     */
    public static MemorySegment cudaGraphMemAllocNodeGetParams$address() {
        return cudaGraphMemAllocNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, struct cudaMemAllocNodeParams *params_out)
     * }
     */
    public static int cudaGraphMemAllocNodeGetParams(MemorySegment node, MemorySegment params_out) {
        var mh$ = cudaGraphMemAllocNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemAllocNodeGetParams", node, params_out);
            }
            return (int)mh$.invokeExact(node, params_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddMemFreeNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddMemFreeNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dptr)
     * }
     */
    public static FunctionDescriptor cudaGraphAddMemFreeNode$descriptor() {
        return cudaGraphAddMemFreeNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dptr)
     * }
     */
    public static MethodHandle cudaGraphAddMemFreeNode$handle() {
        return cudaGraphAddMemFreeNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dptr)
     * }
     */
    public static MemorySegment cudaGraphAddMemFreeNode$address() {
        return cudaGraphAddMemFreeNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, void *dptr)
     * }
     */
    public static int cudaGraphAddMemFreeNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment dptr) {
        var mh$ = cudaGraphAddMemFreeNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddMemFreeNode", pGraphNode, graph, pDependencies, numDependencies, dptr);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, dptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphMemFreeNodeGetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphMemFreeNodeGetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void *dptr_out)
     * }
     */
    public static FunctionDescriptor cudaGraphMemFreeNodeGetParams$descriptor() {
        return cudaGraphMemFreeNodeGetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void *dptr_out)
     * }
     */
    public static MethodHandle cudaGraphMemFreeNodeGetParams$handle() {
        return cudaGraphMemFreeNodeGetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void *dptr_out)
     * }
     */
    public static MemorySegment cudaGraphMemFreeNodeGetParams$address() {
        return cudaGraphMemFreeNodeGetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void *dptr_out)
     * }
     */
    public static int cudaGraphMemFreeNodeGetParams(MemorySegment node, MemorySegment dptr_out) {
        var mh$ = cudaGraphMemFreeNodeGetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphMemFreeNodeGetParams", node, dptr_out);
            }
            return (int)mh$.invokeExact(node, dptr_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGraphMemTrim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGraphMemTrim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGraphMemTrim(int device)
     * }
     */
    public static FunctionDescriptor cudaDeviceGraphMemTrim$descriptor() {
        return cudaDeviceGraphMemTrim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGraphMemTrim(int device)
     * }
     */
    public static MethodHandle cudaDeviceGraphMemTrim$handle() {
        return cudaDeviceGraphMemTrim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGraphMemTrim(int device)
     * }
     */
    public static MemorySegment cudaDeviceGraphMemTrim$address() {
        return cudaDeviceGraphMemTrim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGraphMemTrim(int device)
     * }
     */
    public static int cudaDeviceGraphMemTrim(int device) {
        var mh$ = cudaDeviceGraphMemTrim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGraphMemTrim", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetGraphMemAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetGraphMemAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetGraphMemAttribute$descriptor() {
        return cudaDeviceGetGraphMemAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static MethodHandle cudaDeviceGetGraphMemAttribute$handle() {
        return cudaDeviceGetGraphMemAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static MemorySegment cudaDeviceGetGraphMemAttribute$address() {
        return cudaDeviceGetGraphMemAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static int cudaDeviceGetGraphMemAttribute(int device, int attr, MemorySegment value) {
        var mh$ = cudaDeviceGetGraphMemAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetGraphMemAttribute", device, attr, value);
            }
            return (int)mh$.invokeExact(device, attr, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceSetGraphMemAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceSetGraphMemAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static FunctionDescriptor cudaDeviceSetGraphMemAttribute$descriptor() {
        return cudaDeviceSetGraphMemAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static MethodHandle cudaDeviceSetGraphMemAttribute$handle() {
        return cudaDeviceSetGraphMemAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static MemorySegment cudaDeviceSetGraphMemAttribute$address() {
        return cudaDeviceSetGraphMemAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, enum cudaGraphMemAttributeType attr, void *value)
     * }
     */
    public static int cudaDeviceSetGraphMemAttribute(int device, int attr, MemorySegment value) {
        var mh$ = cudaDeviceSetGraphMemAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceSetGraphMemAttribute", device, attr, value);
            }
            return (int)mh$.invokeExact(device, attr, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphClone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphClone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphClone(cudaGraph_t *pGraphClone, cudaGraph_t originalGraph)
     * }
     */
    public static FunctionDescriptor cudaGraphClone$descriptor() {
        return cudaGraphClone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphClone(cudaGraph_t *pGraphClone, cudaGraph_t originalGraph)
     * }
     */
    public static MethodHandle cudaGraphClone$handle() {
        return cudaGraphClone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphClone(cudaGraph_t *pGraphClone, cudaGraph_t originalGraph)
     * }
     */
    public static MemorySegment cudaGraphClone$address() {
        return cudaGraphClone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphClone(cudaGraph_t *pGraphClone, cudaGraph_t originalGraph)
     * }
     */
    public static int cudaGraphClone(MemorySegment pGraphClone, MemorySegment originalGraph) {
        var mh$ = cudaGraphClone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphClone", pGraphClone, originalGraph);
            }
            return (int)mh$.invokeExact(pGraphClone, originalGraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeFindInClone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeFindInClone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t *pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeFindInClone$descriptor() {
        return cudaGraphNodeFindInClone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t *pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph)
     * }
     */
    public static MethodHandle cudaGraphNodeFindInClone$handle() {
        return cudaGraphNodeFindInClone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t *pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph)
     * }
     */
    public static MemorySegment cudaGraphNodeFindInClone$address() {
        return cudaGraphNodeFindInClone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t *pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph)
     * }
     */
    public static int cudaGraphNodeFindInClone(MemorySegment pNode, MemorySegment originalNode, MemorySegment clonedGraph) {
        var mh$ = cudaGraphNodeFindInClone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeFindInClone", pNode, originalNode, clonedGraph);
            }
            return (int)mh$.invokeExact(pNode, originalNode, clonedGraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeGetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeGetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, enum cudaGraphNodeType *pType)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeGetType$descriptor() {
        return cudaGraphNodeGetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, enum cudaGraphNodeType *pType)
     * }
     */
    public static MethodHandle cudaGraphNodeGetType$handle() {
        return cudaGraphNodeGetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, enum cudaGraphNodeType *pType)
     * }
     */
    public static MemorySegment cudaGraphNodeGetType$address() {
        return cudaGraphNodeGetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, enum cudaGraphNodeType *pType)
     * }
     */
    public static int cudaGraphNodeGetType(MemorySegment node, MemorySegment pType) {
        var mh$ = cudaGraphNodeGetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeGetType", node, pType);
            }
            return (int)mh$.invokeExact(node, pType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphGetNodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphGetNodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes)
     * }
     */
    public static FunctionDescriptor cudaGraphGetNodes$descriptor() {
        return cudaGraphGetNodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes)
     * }
     */
    public static MethodHandle cudaGraphGetNodes$handle() {
        return cudaGraphGetNodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes)
     * }
     */
    public static MemorySegment cudaGraphGetNodes$address() {
        return cudaGraphGetNodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes)
     * }
     */
    public static int cudaGraphGetNodes(MemorySegment graph, MemorySegment nodes, MemorySegment numNodes) {
        var mh$ = cudaGraphGetNodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphGetNodes", graph, nodes, numNodes);
            }
            return (int)mh$.invokeExact(graph, nodes, numNodes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphGetRootNodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphGetRootNodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t *pRootNodes, size_t *pNumRootNodes)
     * }
     */
    public static FunctionDescriptor cudaGraphGetRootNodes$descriptor() {
        return cudaGraphGetRootNodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t *pRootNodes, size_t *pNumRootNodes)
     * }
     */
    public static MethodHandle cudaGraphGetRootNodes$handle() {
        return cudaGraphGetRootNodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t *pRootNodes, size_t *pNumRootNodes)
     * }
     */
    public static MemorySegment cudaGraphGetRootNodes$address() {
        return cudaGraphGetRootNodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t *pRootNodes, size_t *pNumRootNodes)
     * }
     */
    public static int cudaGraphGetRootNodes(MemorySegment graph, MemorySegment pRootNodes, MemorySegment pNumRootNodes) {
        var mh$ = cudaGraphGetRootNodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphGetRootNodes", graph, pRootNodes, pNumRootNodes);
            }
            return (int)mh$.invokeExact(graph, pRootNodes, pNumRootNodes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphGetEdges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphGetEdges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, size_t *numEdges)
     * }
     */
    public static FunctionDescriptor cudaGraphGetEdges$descriptor() {
        return cudaGraphGetEdges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, size_t *numEdges)
     * }
     */
    public static MethodHandle cudaGraphGetEdges$handle() {
        return cudaGraphGetEdges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, size_t *numEdges)
     * }
     */
    public static MemorySegment cudaGraphGetEdges$address() {
        return cudaGraphGetEdges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, size_t *numEdges)
     * }
     */
    public static int cudaGraphGetEdges(MemorySegment graph, MemorySegment from, MemorySegment to, MemorySegment numEdges) {
        var mh$ = cudaGraphGetEdges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphGetEdges", graph, from, to, numEdges);
            }
            return (int)mh$.invokeExact(graph, from, to, numEdges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphGetEdges_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphGetEdges_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, cudaGraphEdgeData *edgeData, size_t *numEdges)
     * }
     */
    public static FunctionDescriptor cudaGraphGetEdges_v2$descriptor() {
        return cudaGraphGetEdges_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, cudaGraphEdgeData *edgeData, size_t *numEdges)
     * }
     */
    public static MethodHandle cudaGraphGetEdges_v2$handle() {
        return cudaGraphGetEdges_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, cudaGraphEdgeData *edgeData, size_t *numEdges)
     * }
     */
    public static MemorySegment cudaGraphGetEdges_v2$address() {
        return cudaGraphGetEdges_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, cudaGraphEdgeData *edgeData, size_t *numEdges)
     * }
     */
    public static int cudaGraphGetEdges_v2(MemorySegment graph, MemorySegment from, MemorySegment to, MemorySegment edgeData, MemorySegment numEdges) {
        var mh$ = cudaGraphGetEdges_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphGetEdges_v2", graph, from, to, edgeData, numEdges);
            }
            return (int)mh$.invokeExact(graph, from, to, edgeData, numEdges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeGetDependencies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeGetDependencies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, size_t *pNumDependencies)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeGetDependencies$descriptor() {
        return cudaGraphNodeGetDependencies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, size_t *pNumDependencies)
     * }
     */
    public static MethodHandle cudaGraphNodeGetDependencies$handle() {
        return cudaGraphNodeGetDependencies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, size_t *pNumDependencies)
     * }
     */
    public static MemorySegment cudaGraphNodeGetDependencies$address() {
        return cudaGraphNodeGetDependencies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, size_t *pNumDependencies)
     * }
     */
    public static int cudaGraphNodeGetDependencies(MemorySegment node, MemorySegment pDependencies, MemorySegment pNumDependencies) {
        var mh$ = cudaGraphNodeGetDependencies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeGetDependencies", node, pDependencies, pNumDependencies);
            }
            return (int)mh$.invokeExact(node, pDependencies, pNumDependencies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeGetDependencies_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeGetDependencies_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, cudaGraphEdgeData *edgeData, size_t *pNumDependencies)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeGetDependencies_v2$descriptor() {
        return cudaGraphNodeGetDependencies_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, cudaGraphEdgeData *edgeData, size_t *pNumDependencies)
     * }
     */
    public static MethodHandle cudaGraphNodeGetDependencies_v2$handle() {
        return cudaGraphNodeGetDependencies_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, cudaGraphEdgeData *edgeData, size_t *pNumDependencies)
     * }
     */
    public static MemorySegment cudaGraphNodeGetDependencies_v2$address() {
        return cudaGraphNodeGetDependencies_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, cudaGraphEdgeData *edgeData, size_t *pNumDependencies)
     * }
     */
    public static int cudaGraphNodeGetDependencies_v2(MemorySegment node, MemorySegment pDependencies, MemorySegment edgeData, MemorySegment pNumDependencies) {
        var mh$ = cudaGraphNodeGetDependencies_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeGetDependencies_v2", node, pDependencies, edgeData, pNumDependencies);
            }
            return (int)mh$.invokeExact(node, pDependencies, edgeData, pNumDependencies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeGetDependentNodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeGetDependentNodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeGetDependentNodes$descriptor() {
        return cudaGraphNodeGetDependentNodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)
     * }
     */
    public static MethodHandle cudaGraphNodeGetDependentNodes$handle() {
        return cudaGraphNodeGetDependentNodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)
     * }
     */
    public static MemorySegment cudaGraphNodeGetDependentNodes$address() {
        return cudaGraphNodeGetDependentNodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)
     * }
     */
    public static int cudaGraphNodeGetDependentNodes(MemorySegment node, MemorySegment pDependentNodes, MemorySegment pNumDependentNodes) {
        var mh$ = cudaGraphNodeGetDependentNodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeGetDependentNodes", node, pDependentNodes, pNumDependentNodes);
            }
            return (int)mh$.invokeExact(node, pDependentNodes, pNumDependentNodes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeGetDependentNodes_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeGetDependentNodes_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, cudaGraphEdgeData *edgeData, size_t *pNumDependentNodes)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeGetDependentNodes_v2$descriptor() {
        return cudaGraphNodeGetDependentNodes_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, cudaGraphEdgeData *edgeData, size_t *pNumDependentNodes)
     * }
     */
    public static MethodHandle cudaGraphNodeGetDependentNodes_v2$handle() {
        return cudaGraphNodeGetDependentNodes_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, cudaGraphEdgeData *edgeData, size_t *pNumDependentNodes)
     * }
     */
    public static MemorySegment cudaGraphNodeGetDependentNodes_v2$address() {
        return cudaGraphNodeGetDependentNodes_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, cudaGraphEdgeData *edgeData, size_t *pNumDependentNodes)
     * }
     */
    public static int cudaGraphNodeGetDependentNodes_v2(MemorySegment node, MemorySegment pDependentNodes, MemorySegment edgeData, MemorySegment pNumDependentNodes) {
        var mh$ = cudaGraphNodeGetDependentNodes_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeGetDependentNodes_v2", node, pDependentNodes, edgeData, pNumDependentNodes);
            }
            return (int)mh$.invokeExact(node, pDependentNodes, edgeData, pNumDependentNodes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddDependencies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddDependencies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static FunctionDescriptor cudaGraphAddDependencies$descriptor() {
        return cudaGraphAddDependencies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static MethodHandle cudaGraphAddDependencies$handle() {
        return cudaGraphAddDependencies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static MemorySegment cudaGraphAddDependencies$address() {
        return cudaGraphAddDependencies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static int cudaGraphAddDependencies(MemorySegment graph, MemorySegment from, MemorySegment to, long numDependencies) {
        var mh$ = cudaGraphAddDependencies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddDependencies", graph, from, to, numDependencies);
            }
            return (int)mh$.invokeExact(graph, from, to, numDependencies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddDependencies_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddDependencies_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static FunctionDescriptor cudaGraphAddDependencies_v2$descriptor() {
        return cudaGraphAddDependencies_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static MethodHandle cudaGraphAddDependencies_v2$handle() {
        return cudaGraphAddDependencies_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static MemorySegment cudaGraphAddDependencies_v2$address() {
        return cudaGraphAddDependencies_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static int cudaGraphAddDependencies_v2(MemorySegment graph, MemorySegment from, MemorySegment to, MemorySegment edgeData, long numDependencies) {
        var mh$ = cudaGraphAddDependencies_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddDependencies_v2", graph, from, to, edgeData, numDependencies);
            }
            return (int)mh$.invokeExact(graph, from, to, edgeData, numDependencies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphRemoveDependencies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphRemoveDependencies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static FunctionDescriptor cudaGraphRemoveDependencies$descriptor() {
        return cudaGraphRemoveDependencies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static MethodHandle cudaGraphRemoveDependencies$handle() {
        return cudaGraphRemoveDependencies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static MemorySegment cudaGraphRemoveDependencies$address() {
        return cudaGraphRemoveDependencies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies)
     * }
     */
    public static int cudaGraphRemoveDependencies(MemorySegment graph, MemorySegment from, MemorySegment to, long numDependencies) {
        var mh$ = cudaGraphRemoveDependencies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphRemoveDependencies", graph, from, to, numDependencies);
            }
            return (int)mh$.invokeExact(graph, from, to, numDependencies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphRemoveDependencies_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphRemoveDependencies_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static FunctionDescriptor cudaGraphRemoveDependencies_v2$descriptor() {
        return cudaGraphRemoveDependencies_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static MethodHandle cudaGraphRemoveDependencies_v2$handle() {
        return cudaGraphRemoveDependencies_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static MemorySegment cudaGraphRemoveDependencies_v2$address() {
        return cudaGraphRemoveDependencies_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, const cudaGraphEdgeData *edgeData, size_t numDependencies)
     * }
     */
    public static int cudaGraphRemoveDependencies_v2(MemorySegment graph, MemorySegment from, MemorySegment to, MemorySegment edgeData, long numDependencies) {
        var mh$ = cudaGraphRemoveDependencies_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphRemoveDependencies_v2", graph, from, to, edgeData, numDependencies);
            }
            return (int)mh$.invokeExact(graph, from, to, edgeData, numDependencies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphDestroyNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphDestroyNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node)
     * }
     */
    public static FunctionDescriptor cudaGraphDestroyNode$descriptor() {
        return cudaGraphDestroyNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node)
     * }
     */
    public static MethodHandle cudaGraphDestroyNode$handle() {
        return cudaGraphDestroyNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node)
     * }
     */
    public static MemorySegment cudaGraphDestroyNode$address() {
        return cudaGraphDestroyNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node)
     * }
     */
    public static int cudaGraphDestroyNode(MemorySegment node) {
        var mh$ = cudaGraphDestroyNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphDestroyNode", node);
            }
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphInstantiate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphInstantiate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static FunctionDescriptor cudaGraphInstantiate$descriptor() {
        return cudaGraphInstantiate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static MethodHandle cudaGraphInstantiate$handle() {
        return cudaGraphInstantiate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static MemorySegment cudaGraphInstantiate$address() {
        return cudaGraphInstantiate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static int cudaGraphInstantiate(MemorySegment pGraphExec, MemorySegment graph, long flags) {
        var mh$ = cudaGraphInstantiate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphInstantiate", pGraphExec, graph, flags);
            }
            return (int)mh$.invokeExact(pGraphExec, graph, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphInstantiateWithFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphInstantiateWithFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static FunctionDescriptor cudaGraphInstantiateWithFlags$descriptor() {
        return cudaGraphInstantiateWithFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static MethodHandle cudaGraphInstantiateWithFlags$handle() {
        return cudaGraphInstantiateWithFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static MemorySegment cudaGraphInstantiateWithFlags$address() {
        return cudaGraphInstantiateWithFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, unsigned long long flags)
     * }
     */
    public static int cudaGraphInstantiateWithFlags(MemorySegment pGraphExec, MemorySegment graph, long flags) {
        var mh$ = cudaGraphInstantiateWithFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphInstantiateWithFlags", pGraphExec, graph, flags);
            }
            return (int)mh$.invokeExact(pGraphExec, graph, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphInstantiateWithParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphInstantiateWithParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams *instantiateParams)
     * }
     */
    public static FunctionDescriptor cudaGraphInstantiateWithParams$descriptor() {
        return cudaGraphInstantiateWithParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams *instantiateParams)
     * }
     */
    public static MethodHandle cudaGraphInstantiateWithParams$handle() {
        return cudaGraphInstantiateWithParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams *instantiateParams)
     * }
     */
    public static MemorySegment cudaGraphInstantiateWithParams$address() {
        return cudaGraphInstantiateWithParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams *instantiateParams)
     * }
     */
    public static int cudaGraphInstantiateWithParams(MemorySegment pGraphExec, MemorySegment graph, MemorySegment instantiateParams) {
        var mh$ = cudaGraphInstantiateWithParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphInstantiateWithParams", pGraphExec, graph, instantiateParams);
            }
            return (int)mh$.invokeExact(pGraphExec, graph, instantiateParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecGetFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecGetFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long *flags)
     * }
     */
    public static FunctionDescriptor cudaGraphExecGetFlags$descriptor() {
        return cudaGraphExecGetFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long *flags)
     * }
     */
    public static MethodHandle cudaGraphExecGetFlags$handle() {
        return cudaGraphExecGetFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long *flags)
     * }
     */
    public static MemorySegment cudaGraphExecGetFlags$address() {
        return cudaGraphExecGetFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long *flags)
     * }
     */
    public static int cudaGraphExecGetFlags(MemorySegment graphExec, MemorySegment flags) {
        var mh$ = cudaGraphExecGetFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecGetFlags", graphExec, flags);
            }
            return (int)mh$.invokeExact(graphExec, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecKernelNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecKernelNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExecKernelNodeSetParams$descriptor() {
        return cudaGraphExecKernelNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphExecKernelNodeSetParams$handle() {
        return cudaGraphExecKernelNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphExecKernelNodeSetParams$address() {
        return cudaGraphExecKernelNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphExecKernelNodeSetParams(MemorySegment hGraphExec, MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphExecKernelNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecKernelNodeSetParams", hGraphExec, node, pNodeParams);
            }
            return (int)mh$.invokeExact(hGraphExec, node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecMemcpyNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecMemcpyNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExecMemcpyNodeSetParams$descriptor() {
        return cudaGraphExecMemcpyNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphExecMemcpyNodeSetParams$handle() {
        return cudaGraphExecMemcpyNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphExecMemcpyNodeSetParams$address() {
        return cudaGraphExecMemcpyNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams)
     * }
     */
    public static int cudaGraphExecMemcpyNodeSetParams(MemorySegment hGraphExec, MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphExecMemcpyNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecMemcpyNodeSetParams", hGraphExec, node, pNodeParams);
            }
            return (int)mh$.invokeExact(hGraphExec, node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecMemcpyNodeSetParamsToSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecMemcpyNodeSetParamsToSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphExecMemcpyNodeSetParamsToSymbol$descriptor() {
        return cudaGraphExecMemcpyNodeSetParamsToSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphExecMemcpyNodeSetParamsToSymbol$handle() {
        return cudaGraphExecMemcpyNodeSetParamsToSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphExecMemcpyNodeSetParamsToSymbol$address() {
        return cudaGraphExecMemcpyNodeSetParamsToSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphExecMemcpyNodeSetParamsToSymbol(MemorySegment hGraphExec, MemorySegment node, MemorySegment symbol, MemorySegment src, long count, long offset, int kind) {
        var mh$ = cudaGraphExecMemcpyNodeSetParamsToSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecMemcpyNodeSetParamsToSymbol", hGraphExec, node, symbol, src, count, offset, kind);
            }
            return (int)mh$.invokeExact(hGraphExec, node, symbol, src, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecMemcpyNodeSetParamsFromSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecMemcpyNodeSetParamsFromSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphExecMemcpyNodeSetParamsFromSymbol$descriptor() {
        return cudaGraphExecMemcpyNodeSetParamsFromSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphExecMemcpyNodeSetParamsFromSymbol$handle() {
        return cudaGraphExecMemcpyNodeSetParamsFromSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphExecMemcpyNodeSetParamsFromSymbol$address() {
        return cudaGraphExecMemcpyNodeSetParamsFromSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphExecMemcpyNodeSetParamsFromSymbol(MemorySegment hGraphExec, MemorySegment node, MemorySegment dst, MemorySegment symbol, long count, long offset, int kind) {
        var mh$ = cudaGraphExecMemcpyNodeSetParamsFromSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecMemcpyNodeSetParamsFromSymbol", hGraphExec, node, dst, symbol, count, offset, kind);
            }
            return (int)mh$.invokeExact(hGraphExec, node, dst, symbol, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecMemcpyNodeSetParams1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecMemcpyNodeSetParams1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaGraphExecMemcpyNodeSetParams1D$descriptor() {
        return cudaGraphExecMemcpyNodeSetParams1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaGraphExecMemcpyNodeSetParams1D$handle() {
        return cudaGraphExecMemcpyNodeSetParams1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaGraphExecMemcpyNodeSetParams1D$address() {
        return cudaGraphExecMemcpyNodeSetParams1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaGraphExecMemcpyNodeSetParams1D(MemorySegment hGraphExec, MemorySegment node, MemorySegment dst, MemorySegment src, long count, int kind) {
        var mh$ = cudaGraphExecMemcpyNodeSetParams1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecMemcpyNodeSetParams1D", hGraphExec, node, dst, src, count, kind);
            }
            return (int)mh$.invokeExact(hGraphExec, node, dst, src, count, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecMemsetNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecMemsetNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExecMemsetNodeSetParams$descriptor() {
        return cudaGraphExecMemsetNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphExecMemsetNodeSetParams$handle() {
        return cudaGraphExecMemsetNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphExecMemsetNodeSetParams$address() {
        return cudaGraphExecMemsetNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams)
     * }
     */
    public static int cudaGraphExecMemsetNodeSetParams(MemorySegment hGraphExec, MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphExecMemsetNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecMemsetNodeSetParams", hGraphExec, node, pNodeParams);
            }
            return (int)mh$.invokeExact(hGraphExec, node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecHostNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecHostNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExecHostNodeSetParams$descriptor() {
        return cudaGraphExecHostNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MethodHandle cudaGraphExecHostNodeSetParams$handle() {
        return cudaGraphExecHostNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static MemorySegment cudaGraphExecHostNodeSetParams$address() {
        return cudaGraphExecHostNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams)
     * }
     */
    public static int cudaGraphExecHostNodeSetParams(MemorySegment hGraphExec, MemorySegment node, MemorySegment pNodeParams) {
        var mh$ = cudaGraphExecHostNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecHostNodeSetParams", hGraphExec, node, pNodeParams);
            }
            return (int)mh$.invokeExact(hGraphExec, node, pNodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecChildGraphNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecChildGraphNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph)
     * }
     */
    public static FunctionDescriptor cudaGraphExecChildGraphNodeSetParams$descriptor() {
        return cudaGraphExecChildGraphNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph)
     * }
     */
    public static MethodHandle cudaGraphExecChildGraphNodeSetParams$handle() {
        return cudaGraphExecChildGraphNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph)
     * }
     */
    public static MemorySegment cudaGraphExecChildGraphNodeSetParams$address() {
        return cudaGraphExecChildGraphNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph)
     * }
     */
    public static int cudaGraphExecChildGraphNodeSetParams(MemorySegment hGraphExec, MemorySegment node, MemorySegment childGraph) {
        var mh$ = cudaGraphExecChildGraphNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecChildGraphNodeSetParams", hGraphExec, node, childGraph);
            }
            return (int)mh$.invokeExact(hGraphExec, node, childGraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecEventRecordNodeSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecEventRecordNodeSetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaGraphExecEventRecordNodeSetEvent$descriptor() {
        return cudaGraphExecEventRecordNodeSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaGraphExecEventRecordNodeSetEvent$handle() {
        return cudaGraphExecEventRecordNodeSetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaGraphExecEventRecordNodeSetEvent$address() {
        return cudaGraphExecEventRecordNodeSetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static int cudaGraphExecEventRecordNodeSetEvent(MemorySegment hGraphExec, MemorySegment hNode, MemorySegment event) {
        var mh$ = cudaGraphExecEventRecordNodeSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecEventRecordNodeSetEvent", hGraphExec, hNode, event);
            }
            return (int)mh$.invokeExact(hGraphExec, hNode, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecEventWaitNodeSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecEventWaitNodeSetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaGraphExecEventWaitNodeSetEvent$descriptor() {
        return cudaGraphExecEventWaitNodeSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaGraphExecEventWaitNodeSetEvent$handle() {
        return cudaGraphExecEventWaitNodeSetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaGraphExecEventWaitNodeSetEvent$address() {
        return cudaGraphExecEventWaitNodeSetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event)
     * }
     */
    public static int cudaGraphExecEventWaitNodeSetEvent(MemorySegment hGraphExec, MemorySegment hNode, MemorySegment event) {
        var mh$ = cudaGraphExecEventWaitNodeSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecEventWaitNodeSetEvent", hGraphExec, hNode, event);
            }
            return (int)mh$.invokeExact(hGraphExec, hNode, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecExternalSemaphoresSignalNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecExternalSemaphoresSignalNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExecExternalSemaphoresSignalNodeSetParams$descriptor() {
        return cudaGraphExecExternalSemaphoresSignalNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphExecExternalSemaphoresSignalNodeSetParams$handle() {
        return cudaGraphExecExternalSemaphoresSignalNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphExecExternalSemaphoresSignalNodeSetParams$address() {
        return cudaGraphExecExternalSemaphoresSignalNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreSignalNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphExecExternalSemaphoresSignalNodeSetParams(MemorySegment hGraphExec, MemorySegment hNode, MemorySegment nodeParams) {
        var mh$ = cudaGraphExecExternalSemaphoresSignalNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecExternalSemaphoresSignalNodeSetParams", hGraphExec, hNode, nodeParams);
            }
            return (int)mh$.invokeExact(hGraphExec, hNode, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecExternalSemaphoresWaitNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecExternalSemaphoresWaitNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExecExternalSemaphoresWaitNodeSetParams$descriptor() {
        return cudaGraphExecExternalSemaphoresWaitNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphExecExternalSemaphoresWaitNodeSetParams$handle() {
        return cudaGraphExecExternalSemaphoresWaitNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphExecExternalSemaphoresWaitNodeSetParams$address() {
        return cudaGraphExecExternalSemaphoresWaitNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const struct cudaExternalSemaphoreWaitNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphExecExternalSemaphoresWaitNodeSetParams(MemorySegment hGraphExec, MemorySegment hNode, MemorySegment nodeParams) {
        var mh$ = cudaGraphExecExternalSemaphoresWaitNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecExternalSemaphoresWaitNodeSetParams", hGraphExec, hNode, nodeParams);
            }
            return (int)mh$.invokeExact(hGraphExec, hNode, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeSetEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeSetEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeSetEnabled$descriptor() {
        return cudaGraphNodeSetEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled)
     * }
     */
    public static MethodHandle cudaGraphNodeSetEnabled$handle() {
        return cudaGraphNodeSetEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled)
     * }
     */
    public static MemorySegment cudaGraphNodeSetEnabled$address() {
        return cudaGraphNodeSetEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled)
     * }
     */
    public static int cudaGraphNodeSetEnabled(MemorySegment hGraphExec, MemorySegment hNode, int isEnabled) {
        var mh$ = cudaGraphNodeSetEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeSetEnabled", hGraphExec, hNode, isEnabled);
            }
            return (int)mh$.invokeExact(hGraphExec, hNode, isEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeGetEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeGetEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int *isEnabled)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeGetEnabled$descriptor() {
        return cudaGraphNodeGetEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int *isEnabled)
     * }
     */
    public static MethodHandle cudaGraphNodeGetEnabled$handle() {
        return cudaGraphNodeGetEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int *isEnabled)
     * }
     */
    public static MemorySegment cudaGraphNodeGetEnabled$address() {
        return cudaGraphNodeGetEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int *isEnabled)
     * }
     */
    public static int cudaGraphNodeGetEnabled(MemorySegment hGraphExec, MemorySegment hNode, MemorySegment isEnabled) {
        var mh$ = cudaGraphNodeGetEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeGetEnabled", hGraphExec, hNode, isEnabled);
            }
            return (int)mh$.invokeExact(hGraphExec, hNode, isEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecUpdate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo *resultInfo)
     * }
     */
    public static FunctionDescriptor cudaGraphExecUpdate$descriptor() {
        return cudaGraphExecUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo *resultInfo)
     * }
     */
    public static MethodHandle cudaGraphExecUpdate$handle() {
        return cudaGraphExecUpdate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo *resultInfo)
     * }
     */
    public static MemorySegment cudaGraphExecUpdate$address() {
        return cudaGraphExecUpdate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo *resultInfo)
     * }
     */
    public static int cudaGraphExecUpdate(MemorySegment hGraphExec, MemorySegment hGraph, MemorySegment resultInfo) {
        var mh$ = cudaGraphExecUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecUpdate", hGraphExec, hGraph, resultInfo);
            }
            return (int)mh$.invokeExact(hGraphExec, hGraph, resultInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphUpload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphUpload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaGraphUpload$descriptor() {
        return cudaGraphUpload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaGraphUpload$handle() {
        return cudaGraphUpload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaGraphUpload$address() {
        return cudaGraphUpload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static int cudaGraphUpload(MemorySegment graphExec, MemorySegment stream) {
        var mh$ = cudaGraphUpload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphUpload", graphExec, stream);
            }
            return (int)mh$.invokeExact(graphExec, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphLaunch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphLaunch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaGraphLaunch$descriptor() {
        return cudaGraphLaunch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaGraphLaunch$handle() {
        return cudaGraphLaunch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaGraphLaunch$address() {
        return cudaGraphLaunch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream)
     * }
     */
    public static int cudaGraphLaunch(MemorySegment graphExec, MemorySegment stream) {
        var mh$ = cudaGraphLaunch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphLaunch", graphExec, stream);
            }
            return (int)mh$.invokeExact(graphExec, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec)
     * }
     */
    public static FunctionDescriptor cudaGraphExecDestroy$descriptor() {
        return cudaGraphExecDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec)
     * }
     */
    public static MethodHandle cudaGraphExecDestroy$handle() {
        return cudaGraphExecDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec)
     * }
     */
    public static MemorySegment cudaGraphExecDestroy$address() {
        return cudaGraphExecDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec)
     * }
     */
    public static int cudaGraphExecDestroy(MemorySegment graphExec) {
        var mh$ = cudaGraphExecDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecDestroy", graphExec);
            }
            return (int)mh$.invokeExact(graphExec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroy(cudaGraph_t graph)
     * }
     */
    public static FunctionDescriptor cudaGraphDestroy$descriptor() {
        return cudaGraphDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroy(cudaGraph_t graph)
     * }
     */
    public static MethodHandle cudaGraphDestroy$handle() {
        return cudaGraphDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroy(cudaGraph_t graph)
     * }
     */
    public static MemorySegment cudaGraphDestroy$address() {
        return cudaGraphDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDestroy(cudaGraph_t graph)
     * }
     */
    public static int cudaGraphDestroy(MemorySegment graph) {
        var mh$ = cudaGraphDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphDestroy", graph);
            }
            return (int)mh$.invokeExact(graph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphDebugDotPrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphDebugDotPrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char *path, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaGraphDebugDotPrint$descriptor() {
        return cudaGraphDebugDotPrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char *path, unsigned int flags)
     * }
     */
    public static MethodHandle cudaGraphDebugDotPrint$handle() {
        return cudaGraphDebugDotPrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char *path, unsigned int flags)
     * }
     */
    public static MemorySegment cudaGraphDebugDotPrint$address() {
        return cudaGraphDebugDotPrint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char *path, unsigned int flags)
     * }
     */
    public static int cudaGraphDebugDotPrint(MemorySegment graph, MemorySegment path, int flags) {
        var mh$ = cudaGraphDebugDotPrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphDebugDotPrint", graph, path, flags);
            }
            return (int)mh$.invokeExact(graph, path, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaUserObjectCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaUserObjectCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectCreate(cudaUserObject_t *object_out, void *ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaUserObjectCreate$descriptor() {
        return cudaUserObjectCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectCreate(cudaUserObject_t *object_out, void *ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)
     * }
     */
    public static MethodHandle cudaUserObjectCreate$handle() {
        return cudaUserObjectCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectCreate(cudaUserObject_t *object_out, void *ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)
     * }
     */
    public static MemorySegment cudaUserObjectCreate$address() {
        return cudaUserObjectCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectCreate(cudaUserObject_t *object_out, void *ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)
     * }
     */
    public static int cudaUserObjectCreate(MemorySegment object_out, MemorySegment ptr, MemorySegment destroy, int initialRefcount, int flags) {
        var mh$ = cudaUserObjectCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaUserObjectCreate", object_out, ptr, destroy, initialRefcount, flags);
            }
            return (int)mh$.invokeExact(object_out, ptr, destroy, initialRefcount, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaUserObjectRetain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaUserObjectRetain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static FunctionDescriptor cudaUserObjectRetain$descriptor() {
        return cudaUserObjectRetain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static MethodHandle cudaUserObjectRetain$handle() {
        return cudaUserObjectRetain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static MemorySegment cudaUserObjectRetain$address() {
        return cudaUserObjectRetain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static int cudaUserObjectRetain(MemorySegment object, int count) {
        var mh$ = cudaUserObjectRetain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaUserObjectRetain", object, count);
            }
            return (int)mh$.invokeExact(object, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaUserObjectRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaUserObjectRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static FunctionDescriptor cudaUserObjectRelease$descriptor() {
        return cudaUserObjectRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static MethodHandle cudaUserObjectRelease$handle() {
        return cudaUserObjectRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static MemorySegment cudaUserObjectRelease$address() {
        return cudaUserObjectRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned int count)
     * }
     */
    public static int cudaUserObjectRelease(MemorySegment object, int count) {
        var mh$ = cudaUserObjectRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaUserObjectRelease", object, count);
            }
            return (int)mh$.invokeExact(object, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphRetainUserObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphRetainUserObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaGraphRetainUserObject$descriptor() {
        return cudaGraphRetainUserObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags)
     * }
     */
    public static MethodHandle cudaGraphRetainUserObject$handle() {
        return cudaGraphRetainUserObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags)
     * }
     */
    public static MemorySegment cudaGraphRetainUserObject$address() {
        return cudaGraphRetainUserObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags)
     * }
     */
    public static int cudaGraphRetainUserObject(MemorySegment graph, MemorySegment object, int count, int flags) {
        var mh$ = cudaGraphRetainUserObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphRetainUserObject", graph, object, count, flags);
            }
            return (int)mh$.invokeExact(graph, object, count, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphReleaseUserObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphReleaseUserObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count)
     * }
     */
    public static FunctionDescriptor cudaGraphReleaseUserObject$descriptor() {
        return cudaGraphReleaseUserObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count)
     * }
     */
    public static MethodHandle cudaGraphReleaseUserObject$handle() {
        return cudaGraphReleaseUserObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count)
     * }
     */
    public static MemorySegment cudaGraphReleaseUserObject$address() {
        return cudaGraphReleaseUserObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count)
     * }
     */
    public static int cudaGraphReleaseUserObject(MemorySegment graph, MemorySegment object, int count) {
        var mh$ = cudaGraphReleaseUserObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphReleaseUserObject", graph, object, count);
            }
            return (int)mh$.invokeExact(graph, object, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddNode$descriptor() {
        return cudaGraphAddNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphAddNode$handle() {
        return cudaGraphAddNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphAddNode$address() {
        return cudaGraphAddNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphAddNode(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, long numDependencies, MemorySegment nodeParams) {
        var mh$ = cudaGraphAddNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddNode", pGraphNode, graph, pDependencies, numDependencies, nodeParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, numDependencies, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphAddNode_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphAddNode_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphAddNode_v2$descriptor() {
        return cudaGraphAddNode_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphAddNode_v2$handle() {
        return cudaGraphAddNode_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphAddNode_v2$address() {
        return cudaGraphAddNode_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphAddNode_v2(MemorySegment pGraphNode, MemorySegment graph, MemorySegment pDependencies, MemorySegment dependencyData, long numDependencies, MemorySegment nodeParams) {
        var mh$ = cudaGraphAddNode_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphAddNode_v2", pGraphNode, graph, pDependencies, dependencyData, numDependencies, nodeParams);
            }
            return (int)mh$.invokeExact(pGraphNode, graph, pDependencies, dependencyData, numDependencies, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphNodeSetParams$descriptor() {
        return cudaGraphNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphNodeSetParams$handle() {
        return cudaGraphNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphNodeSetParams$address() {
        return cudaGraphNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphNodeSetParams(MemorySegment node, MemorySegment nodeParams) {
        var mh$ = cudaGraphNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphNodeSetParams", node, nodeParams);
            }
            return (int)mh$.invokeExact(node, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphExecNodeSetParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphExecNodeSetParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static FunctionDescriptor cudaGraphExecNodeSetParams$descriptor() {
        return cudaGraphExecNodeSetParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MethodHandle cudaGraphExecNodeSetParams$handle() {
        return cudaGraphExecNodeSetParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static MemorySegment cudaGraphExecNodeSetParams$address() {
        return cudaGraphExecNodeSetParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, struct cudaGraphNodeParams *nodeParams)
     * }
     */
    public static int cudaGraphExecNodeSetParams(MemorySegment graphExec, MemorySegment node, MemorySegment nodeParams) {
        var mh$ = cudaGraphExecNodeSetParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphExecNodeSetParams", graphExec, node, nodeParams);
            }
            return (int)mh$.invokeExact(graphExec, node, nodeParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGraphConditionalHandleCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGraphConditionalHandleCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle *pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaGraphConditionalHandleCreate$descriptor() {
        return cudaGraphConditionalHandleCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle *pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags)
     * }
     */
    public static MethodHandle cudaGraphConditionalHandleCreate$handle() {
        return cudaGraphConditionalHandleCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle *pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags)
     * }
     */
    public static MemorySegment cudaGraphConditionalHandleCreate$address() {
        return cudaGraphConditionalHandleCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle *pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags)
     * }
     */
    public static int cudaGraphConditionalHandleCreate(MemorySegment pHandle_out, MemorySegment graph, int defaultLaunchValue, int flags) {
        var mh$ = cudaGraphConditionalHandleCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGraphConditionalHandleCreate", pHandle_out, graph, defaultLaunchValue, flags);
            }
            return (int)mh$.invokeExact(pHandle_out, graph, defaultLaunchValue, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetDriverEntryPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetDriverEntryPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPoint(const char *symbol, void **funcPtr, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static FunctionDescriptor cudaGetDriverEntryPoint$descriptor() {
        return cudaGetDriverEntryPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPoint(const char *symbol, void **funcPtr, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static MethodHandle cudaGetDriverEntryPoint$handle() {
        return cudaGetDriverEntryPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPoint(const char *symbol, void **funcPtr, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static MemorySegment cudaGetDriverEntryPoint$address() {
        return cudaGetDriverEntryPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPoint(const char *symbol, void **funcPtr, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static int cudaGetDriverEntryPoint(MemorySegment symbol, MemorySegment funcPtr, long flags, MemorySegment driverStatus) {
        var mh$ = cudaGetDriverEntryPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetDriverEntryPoint", symbol, funcPtr, flags, driverStatus);
            }
            return (int)mh$.invokeExact(symbol, funcPtr, flags, driverStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetDriverEntryPointByVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetDriverEntryPointByVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPointByVersion(const char *symbol, void **funcPtr, unsigned int cudaVersion, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static FunctionDescriptor cudaGetDriverEntryPointByVersion$descriptor() {
        return cudaGetDriverEntryPointByVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPointByVersion(const char *symbol, void **funcPtr, unsigned int cudaVersion, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static MethodHandle cudaGetDriverEntryPointByVersion$handle() {
        return cudaGetDriverEntryPointByVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPointByVersion(const char *symbol, void **funcPtr, unsigned int cudaVersion, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static MemorySegment cudaGetDriverEntryPointByVersion$address() {
        return cudaGetDriverEntryPointByVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDriverEntryPointByVersion(const char *symbol, void **funcPtr, unsigned int cudaVersion, unsigned long long flags, enum cudaDriverEntryPointQueryResult *driverStatus)
     * }
     */
    public static int cudaGetDriverEntryPointByVersion(MemorySegment symbol, MemorySegment funcPtr, int cudaVersion, long flags, MemorySegment driverStatus) {
        var mh$ = cudaGetDriverEntryPointByVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetDriverEntryPointByVersion", symbol, funcPtr, cudaVersion, flags, driverStatus);
            }
            return (int)mh$.invokeExact(symbol, funcPtr, cudaVersion, flags, driverStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetExportTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetExportTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId)
     * }
     */
    public static FunctionDescriptor cudaGetExportTable$descriptor() {
        return cudaGetExportTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId)
     * }
     */
    public static MethodHandle cudaGetExportTable$handle() {
        return cudaGetExportTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId)
     * }
     */
    public static MemorySegment cudaGetExportTable$address() {
        return cudaGetExportTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId)
     * }
     */
    public static int cudaGetExportTable(MemorySegment ppExportTable, MemorySegment pExportTableId) {
        var mh$ = cudaGetExportTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetExportTable", ppExportTable, pExportTableId);
            }
            return (int)mh$.invokeExact(ppExportTable, pExportTableId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetFuncBySymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetFuncBySymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t *functionPtr, const void *symbolPtr)
     * }
     */
    public static FunctionDescriptor cudaGetFuncBySymbol$descriptor() {
        return cudaGetFuncBySymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t *functionPtr, const void *symbolPtr)
     * }
     */
    public static MethodHandle cudaGetFuncBySymbol$handle() {
        return cudaGetFuncBySymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t *functionPtr, const void *symbolPtr)
     * }
     */
    public static MemorySegment cudaGetFuncBySymbol$address() {
        return cudaGetFuncBySymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t *functionPtr, const void *symbolPtr)
     * }
     */
    public static int cudaGetFuncBySymbol(MemorySegment functionPtr, MemorySegment symbolPtr) {
        var mh$ = cudaGetFuncBySymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetFuncBySymbol", functionPtr, symbolPtr);
            }
            return (int)mh$.invokeExact(functionPtr, symbolPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetKernel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetKernel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetKernel(cudaKernel_t *kernelPtr, const void *entryFuncAddr)
     * }
     */
    public static FunctionDescriptor cudaGetKernel$descriptor() {
        return cudaGetKernel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetKernel(cudaKernel_t *kernelPtr, const void *entryFuncAddr)
     * }
     */
    public static MethodHandle cudaGetKernel$handle() {
        return cudaGetKernel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetKernel(cudaKernel_t *kernelPtr, const void *entryFuncAddr)
     * }
     */
    public static MemorySegment cudaGetKernel$address() {
        return cudaGetKernel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetKernel(cudaKernel_t *kernelPtr, const void *entryFuncAddr)
     * }
     */
    public static int cudaGetKernel(MemorySegment kernelPtr, MemorySegment entryFuncAddr) {
        var mh$ = cudaGetKernel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetKernel", kernelPtr, entryFuncAddr);
            }
            return (int)mh$.invokeExact(kernelPtr, entryFuncAddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = PanamaFFMAPI.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = PanamaFFMAPI.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = PanamaFFMAPI.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = PanamaFFMAPI.C_LONG;
    private static final int CUVS_ERROR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CUVS_ERROR = 0
     * }
     */
    public static int CUVS_ERROR() {
        return CUVS_ERROR;
    }
    private static final int CUVS_SUCCESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CUVS_SUCCESS = 1
     * }
     */
    public static int CUVS_SUCCESS() {
        return CUVS_SUCCESS;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const char *cuvsGetLastErrorText()
     * }
     */
    public static class cuvsGetLastErrorText {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                PanamaFFMAPI.C_POINTER        );
        private static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsGetLastErrorText");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private cuvsGetLastErrorText(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const char *cuvsGetLastErrorText()
         * }
         */
        public static cuvsGetLastErrorText makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new cuvsGetLastErrorText(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("cuvsGetLastErrorText", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class cuvsSetLastErrorText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsSetLastErrorText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cuvsSetLastErrorText(const char *error)
     * }
     */
    public static FunctionDescriptor cuvsSetLastErrorText$descriptor() {
        return cuvsSetLastErrorText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cuvsSetLastErrorText(const char *error)
     * }
     */
    public static MethodHandle cuvsSetLastErrorText$handle() {
        return cuvsSetLastErrorText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cuvsSetLastErrorText(const char *error)
     * }
     */
    public static MemorySegment cuvsSetLastErrorText$address() {
        return cuvsSetLastErrorText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cuvsSetLastErrorText(const char *error)
     * }
     */
    public static void cuvsSetLastErrorText(MemorySegment error) {
        var mh$ = cuvsSetLastErrorText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsSetLastErrorText", error);
            }
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef uintptr_t cuvsResources_t
     * }
     */
    public static final OfLong cuvsResources_t = PanamaFFMAPI.C_LONG;

    private static class cuvsResourcesCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsResourcesCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesCreate(cuvsResources_t *res)
     * }
     */
    public static FunctionDescriptor cuvsResourcesCreate$descriptor() {
        return cuvsResourcesCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesCreate(cuvsResources_t *res)
     * }
     */
    public static MethodHandle cuvsResourcesCreate$handle() {
        return cuvsResourcesCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesCreate(cuvsResources_t *res)
     * }
     */
    public static MemorySegment cuvsResourcesCreate$address() {
        return cuvsResourcesCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesCreate(cuvsResources_t *res)
     * }
     */
    public static int cuvsResourcesCreate(MemorySegment res) {
        var mh$ = cuvsResourcesCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsResourcesCreate", res);
            }
            return (int)mh$.invokeExact(res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsResourcesDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsResourcesDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesDestroy(cuvsResources_t res)
     * }
     */
    public static FunctionDescriptor cuvsResourcesDestroy$descriptor() {
        return cuvsResourcesDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesDestroy(cuvsResources_t res)
     * }
     */
    public static MethodHandle cuvsResourcesDestroy$handle() {
        return cuvsResourcesDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesDestroy(cuvsResources_t res)
     * }
     */
    public static MemorySegment cuvsResourcesDestroy$address() {
        return cuvsResourcesDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsResourcesDestroy(cuvsResources_t res)
     * }
     */
    public static int cuvsResourcesDestroy(long res) {
        var mh$ = cuvsResourcesDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsResourcesDestroy", res);
            }
            return (int)mh$.invokeExact(res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsStreamSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsStreamSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSet(cuvsResources_t res, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cuvsStreamSet$descriptor() {
        return cuvsStreamSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSet(cuvsResources_t res, cudaStream_t stream)
     * }
     */
    public static MethodHandle cuvsStreamSet$handle() {
        return cuvsStreamSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSet(cuvsResources_t res, cudaStream_t stream)
     * }
     */
    public static MemorySegment cuvsStreamSet$address() {
        return cuvsStreamSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSet(cuvsResources_t res, cudaStream_t stream)
     * }
     */
    public static int cuvsStreamSet(long res, MemorySegment stream) {
        var mh$ = cuvsStreamSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsStreamSet", res, stream);
            }
            return (int)mh$.invokeExact(res, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsStreamGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsStreamGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamGet(cuvsResources_t res, cudaStream_t *stream)
     * }
     */
    public static FunctionDescriptor cuvsStreamGet$descriptor() {
        return cuvsStreamGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamGet(cuvsResources_t res, cudaStream_t *stream)
     * }
     */
    public static MethodHandle cuvsStreamGet$handle() {
        return cuvsStreamGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamGet(cuvsResources_t res, cudaStream_t *stream)
     * }
     */
    public static MemorySegment cuvsStreamGet$address() {
        return cuvsStreamGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamGet(cuvsResources_t res, cudaStream_t *stream)
     * }
     */
    public static int cuvsStreamGet(long res, MemorySegment stream) {
        var mh$ = cuvsStreamGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsStreamGet", res, stream);
            }
            return (int)mh$.invokeExact(res, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsStreamSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsStreamSync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSync(cuvsResources_t res)
     * }
     */
    public static FunctionDescriptor cuvsStreamSync$descriptor() {
        return cuvsStreamSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSync(cuvsResources_t res)
     * }
     */
    public static MethodHandle cuvsStreamSync$handle() {
        return cuvsStreamSync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSync(cuvsResources_t res)
     * }
     */
    public static MemorySegment cuvsStreamSync$address() {
        return cuvsStreamSync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsStreamSync(cuvsResources_t res)
     * }
     */
    public static int cuvsStreamSync(long res) {
        var mh$ = cuvsStreamSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsStreamSync", res);
            }
            return (int)mh$.invokeExact(res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsRMMAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsRMMAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMAlloc(cuvsResources_t res, void **ptr, size_t bytes)
     * }
     */
    public static FunctionDescriptor cuvsRMMAlloc$descriptor() {
        return cuvsRMMAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMAlloc(cuvsResources_t res, void **ptr, size_t bytes)
     * }
     */
    public static MethodHandle cuvsRMMAlloc$handle() {
        return cuvsRMMAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMAlloc(cuvsResources_t res, void **ptr, size_t bytes)
     * }
     */
    public static MemorySegment cuvsRMMAlloc$address() {
        return cuvsRMMAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMAlloc(cuvsResources_t res, void **ptr, size_t bytes)
     * }
     */
    public static int cuvsRMMAlloc(long res, MemorySegment ptr, long bytes) {
        var mh$ = cuvsRMMAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsRMMAlloc", res, ptr, bytes);
            }
            return (int)mh$.invokeExact(res, ptr, bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsRMMFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsRMMFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMFree(cuvsResources_t res, void *ptr, size_t bytes)
     * }
     */
    public static FunctionDescriptor cuvsRMMFree$descriptor() {
        return cuvsRMMFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMFree(cuvsResources_t res, void *ptr, size_t bytes)
     * }
     */
    public static MethodHandle cuvsRMMFree$handle() {
        return cuvsRMMFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMFree(cuvsResources_t res, void *ptr, size_t bytes)
     * }
     */
    public static MemorySegment cuvsRMMFree$address() {
        return cuvsRMMFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMFree(cuvsResources_t res, void *ptr, size_t bytes)
     * }
     */
    public static int cuvsRMMFree(long res, MemorySegment ptr, long bytes) {
        var mh$ = cuvsRMMFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsRMMFree", res, ptr, bytes);
            }
            return (int)mh$.invokeExact(res, ptr, bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsRMMPoolMemoryResourceEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_BOOL
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsRMMPoolMemoryResourceEnable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMPoolMemoryResourceEnable(int initial_pool_size_percent, int max_pool_size_percent, bool managed)
     * }
     */
    public static FunctionDescriptor cuvsRMMPoolMemoryResourceEnable$descriptor() {
        return cuvsRMMPoolMemoryResourceEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMPoolMemoryResourceEnable(int initial_pool_size_percent, int max_pool_size_percent, bool managed)
     * }
     */
    public static MethodHandle cuvsRMMPoolMemoryResourceEnable$handle() {
        return cuvsRMMPoolMemoryResourceEnable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMPoolMemoryResourceEnable(int initial_pool_size_percent, int max_pool_size_percent, bool managed)
     * }
     */
    public static MemorySegment cuvsRMMPoolMemoryResourceEnable$address() {
        return cuvsRMMPoolMemoryResourceEnable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMPoolMemoryResourceEnable(int initial_pool_size_percent, int max_pool_size_percent, bool managed)
     * }
     */
    public static int cuvsRMMPoolMemoryResourceEnable(int initial_pool_size_percent, int max_pool_size_percent, boolean managed) {
        var mh$ = cuvsRMMPoolMemoryResourceEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsRMMPoolMemoryResourceEnable", initial_pool_size_percent, max_pool_size_percent, managed);
            }
            return (int)mh$.invokeExact(initial_pool_size_percent, max_pool_size_percent, managed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMMemoryResourceReset()
     * }
     */
    public static class cuvsRMMMemoryResourceReset {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                PanamaFFMAPI.C_INT        );
        private static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsRMMMemoryResourceReset");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private cuvsRMMMemoryResourceReset(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * cuvsError_t cuvsRMMMemoryResourceReset()
         * }
         */
        public static cuvsRMMMemoryResourceReset makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new cuvsRMMMemoryResourceReset(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("cuvsRMMMemoryResourceReset", x0);
                }
                return (int)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class cuvsRMMHostAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsRMMHostAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostAlloc(void **ptr, size_t bytes)
     * }
     */
    public static FunctionDescriptor cuvsRMMHostAlloc$descriptor() {
        return cuvsRMMHostAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostAlloc(void **ptr, size_t bytes)
     * }
     */
    public static MethodHandle cuvsRMMHostAlloc$handle() {
        return cuvsRMMHostAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostAlloc(void **ptr, size_t bytes)
     * }
     */
    public static MemorySegment cuvsRMMHostAlloc$address() {
        return cuvsRMMHostAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostAlloc(void **ptr, size_t bytes)
     * }
     */
    public static int cuvsRMMHostAlloc(MemorySegment ptr, long bytes) {
        var mh$ = cuvsRMMHostAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsRMMHostAlloc", ptr, bytes);
            }
            return (int)mh$.invokeExact(ptr, bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsRMMHostFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsRMMHostFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostFree(void *ptr, size_t bytes)
     * }
     */
    public static FunctionDescriptor cuvsRMMHostFree$descriptor() {
        return cuvsRMMHostFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostFree(void *ptr, size_t bytes)
     * }
     */
    public static MethodHandle cuvsRMMHostFree$handle() {
        return cuvsRMMHostFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostFree(void *ptr, size_t bytes)
     * }
     */
    public static MemorySegment cuvsRMMHostFree$address() {
        return cuvsRMMHostFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsRMMHostFree(void *ptr, size_t bytes)
     * }
     */
    public static int cuvsRMMHostFree(MemorySegment ptr, long bytes) {
        var mh$ = cuvsRMMHostFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsRMMHostFree", ptr, bytes);
            }
            return (int)mh$.invokeExact(ptr, bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int L2Expanded = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.L2Expanded = 0
     * }
     */
    public static int L2Expanded() {
        return L2Expanded;
    }
    private static final int L2SqrtExpanded = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.L2SqrtExpanded = 1
     * }
     */
    public static int L2SqrtExpanded() {
        return L2SqrtExpanded;
    }
    private static final int CosineExpanded = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CosineExpanded = 2
     * }
     */
    public static int CosineExpanded() {
        return CosineExpanded;
    }
    private static final int L1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.L1 = 3
     * }
     */
    public static int L1() {
        return L1;
    }
    private static final int L2Unexpanded = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.L2Unexpanded = 4
     * }
     */
    public static int L2Unexpanded() {
        return L2Unexpanded;
    }
    private static final int L2SqrtUnexpanded = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.L2SqrtUnexpanded = 5
     * }
     */
    public static int L2SqrtUnexpanded() {
        return L2SqrtUnexpanded;
    }
    private static final int InnerProduct = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.InnerProduct = 6
     * }
     */
    public static int InnerProduct() {
        return InnerProduct;
    }
    private static final int Linf = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Linf = 7
     * }
     */
    public static int Linf() {
        return Linf;
    }
    private static final int Canberra = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Canberra = 8
     * }
     */
    public static int Canberra() {
        return Canberra;
    }
    private static final int LpUnexpanded = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LpUnexpanded = 9
     * }
     */
    public static int LpUnexpanded() {
        return LpUnexpanded;
    }
    private static final int CorrelationExpanded = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CorrelationExpanded = 10
     * }
     */
    public static int CorrelationExpanded() {
        return CorrelationExpanded;
    }
    private static final int JaccardExpanded = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JaccardExpanded = 11
     * }
     */
    public static int JaccardExpanded() {
        return JaccardExpanded;
    }
    private static final int HellingerExpanded = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HellingerExpanded = 12
     * }
     */
    public static int HellingerExpanded() {
        return HellingerExpanded;
    }
    private static final int Haversine = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Haversine = 13
     * }
     */
    public static int Haversine() {
        return Haversine;
    }
    private static final int BrayCurtis = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BrayCurtis = 14
     * }
     */
    public static int BrayCurtis() {
        return BrayCurtis;
    }
    private static final int JensenShannon = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JensenShannon = 15
     * }
     */
    public static int JensenShannon() {
        return JensenShannon;
    }
    private static final int HammingUnexpanded = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HammingUnexpanded = 16
     * }
     */
    public static int HammingUnexpanded() {
        return HammingUnexpanded;
    }
    private static final int KLDivergence = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KLDivergence = 17
     * }
     */
    public static int KLDivergence() {
        return KLDivergence;
    }
    private static final int RusselRaoExpanded = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RusselRaoExpanded = 18
     * }
     */
    public static int RusselRaoExpanded() {
        return RusselRaoExpanded;
    }
    private static final int DiceExpanded = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DiceExpanded = 19
     * }
     */
    public static int DiceExpanded() {
        return DiceExpanded;
    }
    private static final int BitwiseHamming = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BitwiseHamming = 20
     * }
     */
    public static int BitwiseHamming() {
        return BitwiseHamming;
    }
    private static final int Precomputed = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.Precomputed = 100
     * }
     */
    public static int Precomputed() {
        return Precomputed;
    }
    private static final int kDLCPU = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLCPU = 1
     * }
     */
    public static int kDLCPU() {
        return kDLCPU;
    }
    private static final int kDLCUDA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLCUDA = 2
     * }
     */
    public static int kDLCUDA() {
        return kDLCUDA;
    }
    private static final int kDLCUDAHost = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLCUDAHost = 3
     * }
     */
    public static int kDLCUDAHost() {
        return kDLCUDAHost;
    }
    private static final int kDLOpenCL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLOpenCL = 4
     * }
     */
    public static int kDLOpenCL() {
        return kDLOpenCL;
    }
    private static final int kDLVulkan = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLVulkan = 7
     * }
     */
    public static int kDLVulkan() {
        return kDLVulkan;
    }
    private static final int kDLMetal = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLMetal = 8
     * }
     */
    public static int kDLMetal() {
        return kDLMetal;
    }
    private static final int kDLVPI = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLVPI = 9
     * }
     */
    public static int kDLVPI() {
        return kDLVPI;
    }
    private static final int kDLROCM = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLROCM = 10
     * }
     */
    public static int kDLROCM() {
        return kDLROCM;
    }
    private static final int kDLROCMHost = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLROCMHost = 11
     * }
     */
    public static int kDLROCMHost() {
        return kDLROCMHost;
    }
    private static final int kDLExtDev = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLExtDev = 12
     * }
     */
    public static int kDLExtDev() {
        return kDLExtDev;
    }
    private static final int kDLCUDAManaged = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLCUDAManaged = 13
     * }
     */
    public static int kDLCUDAManaged() {
        return kDLCUDAManaged;
    }
    private static final int kDLOneAPI = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLOneAPI = 14
     * }
     */
    public static int kDLOneAPI() {
        return kDLOneAPI;
    }
    private static final int kDLWebGPU = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLWebGPU = 15
     * }
     */
    public static int kDLWebGPU() {
        return kDLWebGPU;
    }
    private static final int kDLHexagon = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLHexagon = 16
     * }
     */
    public static int kDLHexagon() {
        return kDLHexagon;
    }
    private static final int kDLInt = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLInt = 0
     * }
     */
    public static int kDLInt() {
        return kDLInt;
    }
    private static final int kDLUInt = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLUInt = 1
     * }
     */
    public static int kDLUInt() {
        return kDLUInt;
    }
    private static final int kDLFloat = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLFloat = 2
     * }
     */
    public static int kDLFloat() {
        return kDLFloat;
    }
    private static final int kDLOpaqueHandle = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLOpaqueHandle = 3
     * }
     */
    public static int kDLOpaqueHandle() {
        return kDLOpaqueHandle;
    }
    private static final int kDLBfloat = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLBfloat = 4
     * }
     */
    public static int kDLBfloat() {
        return kDLBfloat;
    }
    private static final int kDLComplex = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLComplex = 5
     * }
     */
    public static int kDLComplex() {
        return kDLComplex;
    }
    private static final int kDLBool = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDLBool = 6
     * }
     */
    public static int kDLBool() {
        return kDLBool;
    }
    private static final int NO_FILTER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cuvsFilterType.NO_FILTER = 0
     * }
     */
    public static int NO_FILTER() {
        return NO_FILTER;
    }
    private static final int BITSET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cuvsFilterType.BITSET = 1
     * }
     */
    public static int BITSET() {
        return BITSET;
    }
    private static final int BITMAP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cuvsFilterType.BITMAP = 2
     * }
     */
    public static int BITMAP() {
        return BITMAP;
    }
    private static final int PER_SUBSPACE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum codebook_gen.PER_SUBSPACE = 0
     * }
     */
    public static int PER_SUBSPACE() {
        return PER_SUBSPACE;
    }
    private static final int PER_CLUSTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum codebook_gen.PER_CLUSTER = 1
     * }
     */
    public static int PER_CLUSTER() {
        return PER_CLUSTER;
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsIvfPqIndexParams {
     *     cuvsDistanceType metric;
     *     float metric_arg;
     *     bool add_data_on_build;
     *     uint32_t n_lists;
     *     uint32_t kmeans_n_iters;
     *     double kmeans_trainset_fraction;
     *     uint32_t pq_bits;
     *     uint32_t pq_dim;
     *     enum codebook_gen codebook_kind;
     *     bool force_random_rotation;
     *     bool conservative_memory_allocation;
     *     uint32_t max_train_points_per_pq_code;
     * } *cuvsIvfPqIndexParams_t
     * }
     */
    public static final AddressLayout cuvsIvfPqIndexParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsIvfPqIndexParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqIndexParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsCreate(cuvsIvfPqIndexParams_t *index_params)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqIndexParamsCreate$descriptor() {
        return cuvsIvfPqIndexParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsCreate(cuvsIvfPqIndexParams_t *index_params)
     * }
     */
    public static MethodHandle cuvsIvfPqIndexParamsCreate$handle() {
        return cuvsIvfPqIndexParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsCreate(cuvsIvfPqIndexParams_t *index_params)
     * }
     */
    public static MemorySegment cuvsIvfPqIndexParamsCreate$address() {
        return cuvsIvfPqIndexParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsCreate(cuvsIvfPqIndexParams_t *index_params)
     * }
     */
    public static int cuvsIvfPqIndexParamsCreate(MemorySegment index_params) {
        var mh$ = cuvsIvfPqIndexParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqIndexParamsCreate", index_params);
            }
            return (int)mh$.invokeExact(index_params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqIndexParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqIndexParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsDestroy(cuvsIvfPqIndexParams_t index_params)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqIndexParamsDestroy$descriptor() {
        return cuvsIvfPqIndexParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsDestroy(cuvsIvfPqIndexParams_t index_params)
     * }
     */
    public static MethodHandle cuvsIvfPqIndexParamsDestroy$handle() {
        return cuvsIvfPqIndexParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsDestroy(cuvsIvfPqIndexParams_t index_params)
     * }
     */
    public static MemorySegment cuvsIvfPqIndexParamsDestroy$address() {
        return cuvsIvfPqIndexParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexParamsDestroy(cuvsIvfPqIndexParams_t index_params)
     * }
     */
    public static int cuvsIvfPqIndexParamsDestroy(MemorySegment index_params) {
        var mh$ = cuvsIvfPqIndexParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqIndexParamsDestroy", index_params);
            }
            return (int)mh$.invokeExact(index_params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsIvfPqSearchParams {
     *     uint32_t n_probes;
     *     cudaDataType_t lut_dtype;
     *     cudaDataType_t internal_distance_dtype;
     *     double preferred_shmem_carveout;
     * } *cuvsIvfPqSearchParams_t
     * }
     */
    public static final AddressLayout cuvsIvfPqSearchParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsIvfPqSearchParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqSearchParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsCreate(cuvsIvfPqSearchParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqSearchParamsCreate$descriptor() {
        return cuvsIvfPqSearchParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsCreate(cuvsIvfPqSearchParams_t *params)
     * }
     */
    public static MethodHandle cuvsIvfPqSearchParamsCreate$handle() {
        return cuvsIvfPqSearchParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsCreate(cuvsIvfPqSearchParams_t *params)
     * }
     */
    public static MemorySegment cuvsIvfPqSearchParamsCreate$address() {
        return cuvsIvfPqSearchParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsCreate(cuvsIvfPqSearchParams_t *params)
     * }
     */
    public static int cuvsIvfPqSearchParamsCreate(MemorySegment params) {
        var mh$ = cuvsIvfPqSearchParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqSearchParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqSearchParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqSearchParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsDestroy(cuvsIvfPqSearchParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqSearchParamsDestroy$descriptor() {
        return cuvsIvfPqSearchParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsDestroy(cuvsIvfPqSearchParams_t params)
     * }
     */
    public static MethodHandle cuvsIvfPqSearchParamsDestroy$handle() {
        return cuvsIvfPqSearchParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsDestroy(cuvsIvfPqSearchParams_t params)
     * }
     */
    public static MemorySegment cuvsIvfPqSearchParamsDestroy$address() {
        return cuvsIvfPqSearchParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearchParamsDestroy(cuvsIvfPqSearchParams_t params)
     * }
     */
    public static int cuvsIvfPqSearchParamsDestroy(MemorySegment params) {
        var mh$ = cuvsIvfPqSearchParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqSearchParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef cuvsIvfPqIndex *cuvsIvfPqIndex_t
     * }
     */
    public static final AddressLayout cuvsIvfPqIndex_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsIvfPqIndexCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqIndexCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexCreate(cuvsIvfPqIndex_t *index)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqIndexCreate$descriptor() {
        return cuvsIvfPqIndexCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexCreate(cuvsIvfPqIndex_t *index)
     * }
     */
    public static MethodHandle cuvsIvfPqIndexCreate$handle() {
        return cuvsIvfPqIndexCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexCreate(cuvsIvfPqIndex_t *index)
     * }
     */
    public static MemorySegment cuvsIvfPqIndexCreate$address() {
        return cuvsIvfPqIndexCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexCreate(cuvsIvfPqIndex_t *index)
     * }
     */
    public static int cuvsIvfPqIndexCreate(MemorySegment index) {
        var mh$ = cuvsIvfPqIndexCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqIndexCreate", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqIndexDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqIndexDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexDestroy(cuvsIvfPqIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqIndexDestroy$descriptor() {
        return cuvsIvfPqIndexDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexDestroy(cuvsIvfPqIndex_t index)
     * }
     */
    public static MethodHandle cuvsIvfPqIndexDestroy$handle() {
        return cuvsIvfPqIndexDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexDestroy(cuvsIvfPqIndex_t index)
     * }
     */
    public static MemorySegment cuvsIvfPqIndexDestroy$address() {
        return cuvsIvfPqIndexDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqIndexDestroy(cuvsIvfPqIndex_t index)
     * }
     */
    public static int cuvsIvfPqIndexDestroy(MemorySegment index) {
        var mh$ = cuvsIvfPqIndexDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqIndexDestroy", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqBuild {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqBuild");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqBuild(cuvsResources_t res, cuvsIvfPqIndexParams_t params, DLManagedTensor *dataset, cuvsIvfPqIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqBuild$descriptor() {
        return cuvsIvfPqBuild.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqBuild(cuvsResources_t res, cuvsIvfPqIndexParams_t params, DLManagedTensor *dataset, cuvsIvfPqIndex_t index)
     * }
     */
    public static MethodHandle cuvsIvfPqBuild$handle() {
        return cuvsIvfPqBuild.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqBuild(cuvsResources_t res, cuvsIvfPqIndexParams_t params, DLManagedTensor *dataset, cuvsIvfPqIndex_t index)
     * }
     */
    public static MemorySegment cuvsIvfPqBuild$address() {
        return cuvsIvfPqBuild.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqBuild(cuvsResources_t res, cuvsIvfPqIndexParams_t params, DLManagedTensor *dataset, cuvsIvfPqIndex_t index)
     * }
     */
    public static int cuvsIvfPqBuild(long res, MemorySegment params, MemorySegment dataset, MemorySegment index) {
        var mh$ = cuvsIvfPqBuild.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqBuild", res, params, dataset, index);
            }
            return (int)mh$.invokeExact(res, params, dataset, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqSearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearch(cuvsResources_t res, cuvsIvfPqSearchParams_t search_params, cuvsIvfPqIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqSearch$descriptor() {
        return cuvsIvfPqSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearch(cuvsResources_t res, cuvsIvfPqSearchParams_t search_params, cuvsIvfPqIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static MethodHandle cuvsIvfPqSearch$handle() {
        return cuvsIvfPqSearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearch(cuvsResources_t res, cuvsIvfPqSearchParams_t search_params, cuvsIvfPqIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static MemorySegment cuvsIvfPqSearch$address() {
        return cuvsIvfPqSearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSearch(cuvsResources_t res, cuvsIvfPqSearchParams_t search_params, cuvsIvfPqIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static int cuvsIvfPqSearch(long res, MemorySegment search_params, MemorySegment index, MemorySegment queries, MemorySegment neighbors, MemorySegment distances) {
        var mh$ = cuvsIvfPqSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqSearch", res, search_params, index, queries, neighbors, distances);
            }
            return (int)mh$.invokeExact(res, search_params, index, queries, neighbors, distances);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqSerialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqSerialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSerialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqSerialize$descriptor() {
        return cuvsIvfPqSerialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSerialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static MethodHandle cuvsIvfPqSerialize$handle() {
        return cuvsIvfPqSerialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSerialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static MemorySegment cuvsIvfPqSerialize$address() {
        return cuvsIvfPqSerialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqSerialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static int cuvsIvfPqSerialize(long res, MemorySegment filename, MemorySegment index) {
        var mh$ = cuvsIvfPqSerialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqSerialize", res, filename, index);
            }
            return (int)mh$.invokeExact(res, filename, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqDeserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqDeserialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqDeserialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqDeserialize$descriptor() {
        return cuvsIvfPqDeserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqDeserialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static MethodHandle cuvsIvfPqDeserialize$handle() {
        return cuvsIvfPqDeserialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqDeserialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static MemorySegment cuvsIvfPqDeserialize$address() {
        return cuvsIvfPqDeserialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqDeserialize(cuvsResources_t res, const char *filename, cuvsIvfPqIndex_t index)
     * }
     */
    public static int cuvsIvfPqDeserialize(long res, MemorySegment filename, MemorySegment index) {
        var mh$ = cuvsIvfPqDeserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqDeserialize", res, filename, index);
            }
            return (int)mh$.invokeExact(res, filename, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsIvfPqExtend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsIvfPqExtend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqExtend(cuvsResources_t res, DLManagedTensor *new_vectors, DLManagedTensor *new_indices, cuvsIvfPqIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsIvfPqExtend$descriptor() {
        return cuvsIvfPqExtend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqExtend(cuvsResources_t res, DLManagedTensor *new_vectors, DLManagedTensor *new_indices, cuvsIvfPqIndex_t index)
     * }
     */
    public static MethodHandle cuvsIvfPqExtend$handle() {
        return cuvsIvfPqExtend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqExtend(cuvsResources_t res, DLManagedTensor *new_vectors, DLManagedTensor *new_indices, cuvsIvfPqIndex_t index)
     * }
     */
    public static MemorySegment cuvsIvfPqExtend$address() {
        return cuvsIvfPqExtend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsIvfPqExtend(cuvsResources_t res, DLManagedTensor *new_vectors, DLManagedTensor *new_indices, cuvsIvfPqIndex_t index)
     * }
     */
    public static int cuvsIvfPqExtend(long res, MemorySegment new_vectors, MemorySegment new_indices, MemorySegment index) {
        var mh$ = cuvsIvfPqExtend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsIvfPqExtend", res, new_vectors, new_indices, index);
            }
            return (int)mh$.invokeExact(res, new_vectors, new_indices, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int AUTO_SELECT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraGraphBuildAlgo.AUTO_SELECT = 0
     * }
     */
    public static int AUTO_SELECT() {
        return AUTO_SELECT;
    }
    private static final int IVF_PQ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraGraphBuildAlgo.IVF_PQ = 1
     * }
     */
    public static int IVF_PQ() {
        return IVF_PQ;
    }
    private static final int NN_DESCENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraGraphBuildAlgo.NN_DESCENT = 2
     * }
     */
    public static int NN_DESCENT() {
        return NN_DESCENT;
    }
    private static final int ITERATIVE_CAGRA_SEARCH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraGraphBuildAlgo.ITERATIVE_CAGRA_SEARCH = 3
     * }
     */
    public static int ITERATIVE_CAGRA_SEARCH() {
        return ITERATIVE_CAGRA_SEARCH;
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsCagraCompressionParams {
     *     uint32_t pq_bits;
     *     uint32_t pq_dim;
     *     uint32_t vq_n_centers;
     *     uint32_t kmeans_n_iters;
     *     double vq_kmeans_trainset_fraction;
     *     double pq_kmeans_trainset_fraction;
     * } *cuvsCagraCompressionParams_t
     * }
     */
    public static final AddressLayout cuvsCagraCompressionParams_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct cuvsIvfPqParams {
     *     cuvsIvfPqIndexParams_t ivf_pq_build_params;
     *     cuvsIvfPqSearchParams_t ivf_pq_search_params;
     *     float refinement_rate;
     * } *cuvsIvfPqParams_t
     * }
     */
    public static final AddressLayout cuvsIvfPqParams_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct cuvsCagraIndexParams {
     *     cuvsDistanceType metric;
     *     size_t intermediate_graph_degree;
     *     size_t graph_degree;
     *     enum cuvsCagraGraphBuildAlgo build_algo;
     *     size_t nn_descent_niter;
     *     cuvsCagraCompressionParams_t compression;
     *     cuvsIvfPqParams_t graph_build_params;
     * } *cuvsCagraIndexParams_t
     * }
     */
    public static final AddressLayout cuvsCagraIndexParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsCagraIndexParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraIndexParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsCreate(cuvsCagraIndexParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsCagraIndexParamsCreate$descriptor() {
        return cuvsCagraIndexParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsCreate(cuvsCagraIndexParams_t *params)
     * }
     */
    public static MethodHandle cuvsCagraIndexParamsCreate$handle() {
        return cuvsCagraIndexParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsCreate(cuvsCagraIndexParams_t *params)
     * }
     */
    public static MemorySegment cuvsCagraIndexParamsCreate$address() {
        return cuvsCagraIndexParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsCreate(cuvsCagraIndexParams_t *params)
     * }
     */
    public static int cuvsCagraIndexParamsCreate(MemorySegment params) {
        var mh$ = cuvsCagraIndexParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraIndexParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraIndexParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraIndexParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsDestroy(cuvsCagraIndexParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsCagraIndexParamsDestroy$descriptor() {
        return cuvsCagraIndexParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsDestroy(cuvsCagraIndexParams_t params)
     * }
     */
    public static MethodHandle cuvsCagraIndexParamsDestroy$handle() {
        return cuvsCagraIndexParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsDestroy(cuvsCagraIndexParams_t params)
     * }
     */
    public static MemorySegment cuvsCagraIndexParamsDestroy$address() {
        return cuvsCagraIndexParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexParamsDestroy(cuvsCagraIndexParams_t params)
     * }
     */
    public static int cuvsCagraIndexParamsDestroy(MemorySegment params) {
        var mh$ = cuvsCagraIndexParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraIndexParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraCompressionParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraCompressionParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsCreate(cuvsCagraCompressionParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsCagraCompressionParamsCreate$descriptor() {
        return cuvsCagraCompressionParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsCreate(cuvsCagraCompressionParams_t *params)
     * }
     */
    public static MethodHandle cuvsCagraCompressionParamsCreate$handle() {
        return cuvsCagraCompressionParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsCreate(cuvsCagraCompressionParams_t *params)
     * }
     */
    public static MemorySegment cuvsCagraCompressionParamsCreate$address() {
        return cuvsCagraCompressionParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsCreate(cuvsCagraCompressionParams_t *params)
     * }
     */
    public static int cuvsCagraCompressionParamsCreate(MemorySegment params) {
        var mh$ = cuvsCagraCompressionParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraCompressionParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraCompressionParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraCompressionParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsDestroy(cuvsCagraCompressionParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsCagraCompressionParamsDestroy$descriptor() {
        return cuvsCagraCompressionParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsDestroy(cuvsCagraCompressionParams_t params)
     * }
     */
    public static MethodHandle cuvsCagraCompressionParamsDestroy$handle() {
        return cuvsCagraCompressionParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsDestroy(cuvsCagraCompressionParams_t params)
     * }
     */
    public static MemorySegment cuvsCagraCompressionParamsDestroy$address() {
        return cuvsCagraCompressionParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraCompressionParamsDestroy(cuvsCagraCompressionParams_t params)
     * }
     */
    public static int cuvsCagraCompressionParamsDestroy(MemorySegment params) {
        var mh$ = cuvsCagraCompressionParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraCompressionParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsCagraExtendParams {
     *     uint32_t max_chunk_size;
     * } *cuvsCagraExtendParams_t
     * }
     */
    public static final AddressLayout cuvsCagraExtendParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsCagraExtendParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraExtendParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsCreate(cuvsCagraExtendParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsCagraExtendParamsCreate$descriptor() {
        return cuvsCagraExtendParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsCreate(cuvsCagraExtendParams_t *params)
     * }
     */
    public static MethodHandle cuvsCagraExtendParamsCreate$handle() {
        return cuvsCagraExtendParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsCreate(cuvsCagraExtendParams_t *params)
     * }
     */
    public static MemorySegment cuvsCagraExtendParamsCreate$address() {
        return cuvsCagraExtendParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsCreate(cuvsCagraExtendParams_t *params)
     * }
     */
    public static int cuvsCagraExtendParamsCreate(MemorySegment params) {
        var mh$ = cuvsCagraExtendParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraExtendParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraExtendParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraExtendParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsDestroy(cuvsCagraExtendParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsCagraExtendParamsDestroy$descriptor() {
        return cuvsCagraExtendParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsDestroy(cuvsCagraExtendParams_t params)
     * }
     */
    public static MethodHandle cuvsCagraExtendParamsDestroy$handle() {
        return cuvsCagraExtendParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsDestroy(cuvsCagraExtendParams_t params)
     * }
     */
    public static MemorySegment cuvsCagraExtendParamsDestroy$address() {
        return cuvsCagraExtendParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtendParamsDestroy(cuvsCagraExtendParams_t params)
     * }
     */
    public static int cuvsCagraExtendParamsDestroy(MemorySegment params) {
        var mh$ = cuvsCagraExtendParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraExtendParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SINGLE_CTA = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraSearchAlgo.SINGLE_CTA = 0
     * }
     */
    public static int SINGLE_CTA() {
        return SINGLE_CTA;
    }
    private static final int MULTI_CTA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraSearchAlgo.MULTI_CTA = 1
     * }
     */
    public static int MULTI_CTA() {
        return MULTI_CTA;
    }
    private static final int MULTI_KERNEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraSearchAlgo.MULTI_KERNEL = 2
     * }
     */
    public static int MULTI_KERNEL() {
        return MULTI_KERNEL;
    }
    private static final int AUTO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraSearchAlgo.AUTO = 3
     * }
     */
    public static int AUTO() {
        return AUTO;
    }
    private static final int HASH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraHashMode.HASH = 0
     * }
     */
    public static int HASH() {
        return HASH;
    }
    private static final int SMALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraHashMode.SMALL = 1
     * }
     */
    public static int SMALL() {
        return SMALL;
    }
    private static final int AUTO_HASH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cuvsCagraHashMode.AUTO_HASH = 2
     * }
     */
    public static int AUTO_HASH() {
        return AUTO_HASH;
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsCagraSearchParams {
     *     size_t max_queries;
     *     size_t itopk_size;
     *     size_t max_iterations;
     *     enum cuvsCagraSearchAlgo algo;
     *     size_t team_size;
     *     size_t search_width;
     *     size_t min_iterations;
     *     size_t thread_block_size;
     *     enum cuvsCagraHashMode hashmap_mode;
     *     size_t hashmap_min_bitlen;
     *     float hashmap_max_fill_rate;
     *     uint32_t num_random_samplings;
     *     uint64_t rand_xor_mask;
     * } *cuvsCagraSearchParams_t
     * }
     */
    public static final AddressLayout cuvsCagraSearchParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsCagraSearchParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraSearchParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsCreate(cuvsCagraSearchParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsCagraSearchParamsCreate$descriptor() {
        return cuvsCagraSearchParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsCreate(cuvsCagraSearchParams_t *params)
     * }
     */
    public static MethodHandle cuvsCagraSearchParamsCreate$handle() {
        return cuvsCagraSearchParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsCreate(cuvsCagraSearchParams_t *params)
     * }
     */
    public static MemorySegment cuvsCagraSearchParamsCreate$address() {
        return cuvsCagraSearchParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsCreate(cuvsCagraSearchParams_t *params)
     * }
     */
    public static int cuvsCagraSearchParamsCreate(MemorySegment params) {
        var mh$ = cuvsCagraSearchParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraSearchParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraSearchParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraSearchParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsDestroy(cuvsCagraSearchParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsCagraSearchParamsDestroy$descriptor() {
        return cuvsCagraSearchParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsDestroy(cuvsCagraSearchParams_t params)
     * }
     */
    public static MethodHandle cuvsCagraSearchParamsDestroy$handle() {
        return cuvsCagraSearchParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsDestroy(cuvsCagraSearchParams_t params)
     * }
     */
    public static MemorySegment cuvsCagraSearchParamsDestroy$address() {
        return cuvsCagraSearchParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearchParamsDestroy(cuvsCagraSearchParams_t params)
     * }
     */
    public static int cuvsCagraSearchParamsDestroy(MemorySegment params) {
        var mh$ = cuvsCagraSearchParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraSearchParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef cuvsCagraIndex *cuvsCagraIndex_t
     * }
     */
    public static final AddressLayout cuvsCagraIndex_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsCagraIndexCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraIndexCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexCreate(cuvsCagraIndex_t *index)
     * }
     */
    public static FunctionDescriptor cuvsCagraIndexCreate$descriptor() {
        return cuvsCagraIndexCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexCreate(cuvsCagraIndex_t *index)
     * }
     */
    public static MethodHandle cuvsCagraIndexCreate$handle() {
        return cuvsCagraIndexCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexCreate(cuvsCagraIndex_t *index)
     * }
     */
    public static MemorySegment cuvsCagraIndexCreate$address() {
        return cuvsCagraIndexCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexCreate(cuvsCagraIndex_t *index)
     * }
     */
    public static int cuvsCagraIndexCreate(MemorySegment index) {
        var mh$ = cuvsCagraIndexCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraIndexCreate", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraIndexDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraIndexDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexDestroy(cuvsCagraIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsCagraIndexDestroy$descriptor() {
        return cuvsCagraIndexDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexDestroy(cuvsCagraIndex_t index)
     * }
     */
    public static MethodHandle cuvsCagraIndexDestroy$handle() {
        return cuvsCagraIndexDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexDestroy(cuvsCagraIndex_t index)
     * }
     */
    public static MemorySegment cuvsCagraIndexDestroy$address() {
        return cuvsCagraIndexDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexDestroy(cuvsCagraIndex_t index)
     * }
     */
    public static int cuvsCagraIndexDestroy(MemorySegment index) {
        var mh$ = cuvsCagraIndexDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraIndexDestroy", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraIndexGetDims {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraIndexGetDims");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexGetDims(cuvsCagraIndex_t index, int *dim)
     * }
     */
    public static FunctionDescriptor cuvsCagraIndexGetDims$descriptor() {
        return cuvsCagraIndexGetDims.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexGetDims(cuvsCagraIndex_t index, int *dim)
     * }
     */
    public static MethodHandle cuvsCagraIndexGetDims$handle() {
        return cuvsCagraIndexGetDims.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexGetDims(cuvsCagraIndex_t index, int *dim)
     * }
     */
    public static MemorySegment cuvsCagraIndexGetDims$address() {
        return cuvsCagraIndexGetDims.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraIndexGetDims(cuvsCagraIndex_t index, int *dim)
     * }
     */
    public static int cuvsCagraIndexGetDims(MemorySegment index, MemorySegment dim) {
        var mh$ = cuvsCagraIndexGetDims.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraIndexGetDims", index, dim);
            }
            return (int)mh$.invokeExact(index, dim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraBuild {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraBuild");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraBuild(cuvsResources_t res, cuvsCagraIndexParams_t params, DLManagedTensor *dataset, cuvsCagraIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsCagraBuild$descriptor() {
        return cuvsCagraBuild.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraBuild(cuvsResources_t res, cuvsCagraIndexParams_t params, DLManagedTensor *dataset, cuvsCagraIndex_t index)
     * }
     */
    public static MethodHandle cuvsCagraBuild$handle() {
        return cuvsCagraBuild.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraBuild(cuvsResources_t res, cuvsCagraIndexParams_t params, DLManagedTensor *dataset, cuvsCagraIndex_t index)
     * }
     */
    public static MemorySegment cuvsCagraBuild$address() {
        return cuvsCagraBuild.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraBuild(cuvsResources_t res, cuvsCagraIndexParams_t params, DLManagedTensor *dataset, cuvsCagraIndex_t index)
     * }
     */
    public static int cuvsCagraBuild(long res, MemorySegment params, MemorySegment dataset, MemorySegment index) {
        var mh$ = cuvsCagraBuild.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraBuild", res, params, dataset, index);
            }
            return (int)mh$.invokeExact(res, params, dataset, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraExtend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraExtend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtend(cuvsResources_t res, cuvsCagraExtendParams_t params, DLManagedTensor *additional_dataset, cuvsCagraIndex_t index, DLManagedTensor *return_dataset)
     * }
     */
    public static FunctionDescriptor cuvsCagraExtend$descriptor() {
        return cuvsCagraExtend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtend(cuvsResources_t res, cuvsCagraExtendParams_t params, DLManagedTensor *additional_dataset, cuvsCagraIndex_t index, DLManagedTensor *return_dataset)
     * }
     */
    public static MethodHandle cuvsCagraExtend$handle() {
        return cuvsCagraExtend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtend(cuvsResources_t res, cuvsCagraExtendParams_t params, DLManagedTensor *additional_dataset, cuvsCagraIndex_t index, DLManagedTensor *return_dataset)
     * }
     */
    public static MemorySegment cuvsCagraExtend$address() {
        return cuvsCagraExtend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraExtend(cuvsResources_t res, cuvsCagraExtendParams_t params, DLManagedTensor *additional_dataset, cuvsCagraIndex_t index, DLManagedTensor *return_dataset)
     * }
     */
    public static int cuvsCagraExtend(long res, MemorySegment params, MemorySegment additional_dataset, MemorySegment index, MemorySegment return_dataset) {
        var mh$ = cuvsCagraExtend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraExtend", res, params, additional_dataset, index, return_dataset);
            }
            return (int)mh$.invokeExact(res, params, additional_dataset, index, return_dataset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            cuvsFilter.layout()
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraSearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearch(cuvsResources_t res, cuvsCagraSearchParams_t params, cuvsCagraIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter filter)
     * }
     */
    public static FunctionDescriptor cuvsCagraSearch$descriptor() {
        return cuvsCagraSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearch(cuvsResources_t res, cuvsCagraSearchParams_t params, cuvsCagraIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter filter)
     * }
     */
    public static MethodHandle cuvsCagraSearch$handle() {
        return cuvsCagraSearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearch(cuvsResources_t res, cuvsCagraSearchParams_t params, cuvsCagraIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter filter)
     * }
     */
    public static MemorySegment cuvsCagraSearch$address() {
        return cuvsCagraSearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSearch(cuvsResources_t res, cuvsCagraSearchParams_t params, cuvsCagraIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter filter)
     * }
     */
    public static int cuvsCagraSearch(long res, MemorySegment params, MemorySegment index, MemorySegment queries, MemorySegment neighbors, MemorySegment distances, MemorySegment filter) {
        var mh$ = cuvsCagraSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraSearch", res, params, index, queries, neighbors, distances, filter);
            }
            return (int)mh$.invokeExact(res, params, index, queries, neighbors, distances, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraSerialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_BOOL
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraSerialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index, bool include_dataset)
     * }
     */
    public static FunctionDescriptor cuvsCagraSerialize$descriptor() {
        return cuvsCagraSerialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index, bool include_dataset)
     * }
     */
    public static MethodHandle cuvsCagraSerialize$handle() {
        return cuvsCagraSerialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index, bool include_dataset)
     * }
     */
    public static MemorySegment cuvsCagraSerialize$address() {
        return cuvsCagraSerialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index, bool include_dataset)
     * }
     */
    public static int cuvsCagraSerialize(long res, MemorySegment filename, MemorySegment index, boolean include_dataset) {
        var mh$ = cuvsCagraSerialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraSerialize", res, filename, index, include_dataset);
            }
            return (int)mh$.invokeExact(res, filename, index, include_dataset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraSerializeToHnswlib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraSerializeToHnswlib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerializeToHnswlib(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsCagraSerializeToHnswlib$descriptor() {
        return cuvsCagraSerializeToHnswlib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerializeToHnswlib(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static MethodHandle cuvsCagraSerializeToHnswlib$handle() {
        return cuvsCagraSerializeToHnswlib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerializeToHnswlib(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static MemorySegment cuvsCagraSerializeToHnswlib$address() {
        return cuvsCagraSerializeToHnswlib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraSerializeToHnswlib(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static int cuvsCagraSerializeToHnswlib(long res, MemorySegment filename, MemorySegment index) {
        var mh$ = cuvsCagraSerializeToHnswlib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraSerializeToHnswlib", res, filename, index);
            }
            return (int)mh$.invokeExact(res, filename, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsCagraDeserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsCagraDeserialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraDeserialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsCagraDeserialize$descriptor() {
        return cuvsCagraDeserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraDeserialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static MethodHandle cuvsCagraDeserialize$handle() {
        return cuvsCagraDeserialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraDeserialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static MemorySegment cuvsCagraDeserialize$address() {
        return cuvsCagraDeserialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsCagraDeserialize(cuvsResources_t res, const char *filename, cuvsCagraIndex_t index)
     * }
     */
    public static int cuvsCagraDeserialize(long res, MemorySegment filename, MemorySegment index) {
        var mh$ = cuvsCagraDeserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsCagraDeserialize", res, filename, index);
            }
            return (int)mh$.invokeExact(res, filename, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef cuvsBruteForceIndex *cuvsBruteForceIndex_t
     * }
     */
    public static final AddressLayout cuvsBruteForceIndex_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsBruteForceIndexCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsBruteForceIndexCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexCreate(cuvsBruteForceIndex_t *index)
     * }
     */
    public static FunctionDescriptor cuvsBruteForceIndexCreate$descriptor() {
        return cuvsBruteForceIndexCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexCreate(cuvsBruteForceIndex_t *index)
     * }
     */
    public static MethodHandle cuvsBruteForceIndexCreate$handle() {
        return cuvsBruteForceIndexCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexCreate(cuvsBruteForceIndex_t *index)
     * }
     */
    public static MemorySegment cuvsBruteForceIndexCreate$address() {
        return cuvsBruteForceIndexCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexCreate(cuvsBruteForceIndex_t *index)
     * }
     */
    public static int cuvsBruteForceIndexCreate(MemorySegment index) {
        var mh$ = cuvsBruteForceIndexCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsBruteForceIndexCreate", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsBruteForceIndexDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsBruteForceIndexDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexDestroy(cuvsBruteForceIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsBruteForceIndexDestroy$descriptor() {
        return cuvsBruteForceIndexDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexDestroy(cuvsBruteForceIndex_t index)
     * }
     */
    public static MethodHandle cuvsBruteForceIndexDestroy$handle() {
        return cuvsBruteForceIndexDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexDestroy(cuvsBruteForceIndex_t index)
     * }
     */
    public static MemorySegment cuvsBruteForceIndexDestroy$address() {
        return cuvsBruteForceIndexDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceIndexDestroy(cuvsBruteForceIndex_t index)
     * }
     */
    public static int cuvsBruteForceIndexDestroy(MemorySegment index) {
        var mh$ = cuvsBruteForceIndexDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsBruteForceIndexDestroy", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsBruteForceBuild {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_FLOAT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsBruteForceBuild");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceBuild(cuvsResources_t res, DLManagedTensor *dataset, cuvsDistanceType metric, float metric_arg, cuvsBruteForceIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsBruteForceBuild$descriptor() {
        return cuvsBruteForceBuild.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceBuild(cuvsResources_t res, DLManagedTensor *dataset, cuvsDistanceType metric, float metric_arg, cuvsBruteForceIndex_t index)
     * }
     */
    public static MethodHandle cuvsBruteForceBuild$handle() {
        return cuvsBruteForceBuild.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceBuild(cuvsResources_t res, DLManagedTensor *dataset, cuvsDistanceType metric, float metric_arg, cuvsBruteForceIndex_t index)
     * }
     */
    public static MemorySegment cuvsBruteForceBuild$address() {
        return cuvsBruteForceBuild.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceBuild(cuvsResources_t res, DLManagedTensor *dataset, cuvsDistanceType metric, float metric_arg, cuvsBruteForceIndex_t index)
     * }
     */
    public static int cuvsBruteForceBuild(long res, MemorySegment dataset, int metric, float metric_arg, MemorySegment index) {
        var mh$ = cuvsBruteForceBuild.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsBruteForceBuild", res, dataset, metric, metric_arg, index);
            }
            return (int)mh$.invokeExact(res, dataset, metric, metric_arg, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsBruteForceSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            cuvsFilter.layout()
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsBruteForceSearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSearch(cuvsResources_t res, cuvsBruteForceIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter prefilter)
     * }
     */
    public static FunctionDescriptor cuvsBruteForceSearch$descriptor() {
        return cuvsBruteForceSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSearch(cuvsResources_t res, cuvsBruteForceIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter prefilter)
     * }
     */
    public static MethodHandle cuvsBruteForceSearch$handle() {
        return cuvsBruteForceSearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSearch(cuvsResources_t res, cuvsBruteForceIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter prefilter)
     * }
     */
    public static MemorySegment cuvsBruteForceSearch$address() {
        return cuvsBruteForceSearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSearch(cuvsResources_t res, cuvsBruteForceIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances, cuvsFilter prefilter)
     * }
     */
    public static int cuvsBruteForceSearch(long res, MemorySegment index, MemorySegment queries, MemorySegment neighbors, MemorySegment distances, MemorySegment prefilter) {
        var mh$ = cuvsBruteForceSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsBruteForceSearch", res, index, queries, neighbors, distances, prefilter);
            }
            return (int)mh$.invokeExact(res, index, queries, neighbors, distances, prefilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsBruteForceSerialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsBruteForceSerialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSerialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsBruteForceSerialize$descriptor() {
        return cuvsBruteForceSerialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSerialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static MethodHandle cuvsBruteForceSerialize$handle() {
        return cuvsBruteForceSerialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSerialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static MemorySegment cuvsBruteForceSerialize$address() {
        return cuvsBruteForceSerialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceSerialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static int cuvsBruteForceSerialize(long res, MemorySegment filename, MemorySegment index) {
        var mh$ = cuvsBruteForceSerialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsBruteForceSerialize", res, filename, index);
            }
            return (int)mh$.invokeExact(res, filename, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsBruteForceDeserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsBruteForceDeserialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceDeserialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsBruteForceDeserialize$descriptor() {
        return cuvsBruteForceDeserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceDeserialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static MethodHandle cuvsBruteForceDeserialize$handle() {
        return cuvsBruteForceDeserialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceDeserialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static MemorySegment cuvsBruteForceDeserialize$address() {
        return cuvsBruteForceDeserialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsBruteForceDeserialize(cuvsResources_t res, const char *filename, cuvsBruteForceIndex_t index)
     * }
     */
    public static int cuvsBruteForceDeserialize(long res, MemorySegment filename, MemorySegment index) {
        var mh$ = cuvsBruteForceDeserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsBruteForceDeserialize", res, filename, index);
            }
            return (int)mh$.invokeExact(res, filename, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cuvsHnswHierarchy.NONE = 0
     * }
     */
    public static int NONE() {
        return NONE;
    }
    private static final int CPU = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cuvsHnswHierarchy.CPU = 1
     * }
     */
    public static int CPU() {
        return CPU;
    }
    private static final int GPU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cuvsHnswHierarchy.GPU = 2
     * }
     */
    public static int GPU() {
        return GPU;
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsHnswIndexParams {
     *     enum cuvsHnswHierarchy hierarchy;
     *     int ef_construction;
     *     int num_threads;
     * } *cuvsHnswIndexParams_t
     * }
     */
    public static final AddressLayout cuvsHnswIndexParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsHnswIndexParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswIndexParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsCreate(cuvsHnswIndexParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsHnswIndexParamsCreate$descriptor() {
        return cuvsHnswIndexParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsCreate(cuvsHnswIndexParams_t *params)
     * }
     */
    public static MethodHandle cuvsHnswIndexParamsCreate$handle() {
        return cuvsHnswIndexParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsCreate(cuvsHnswIndexParams_t *params)
     * }
     */
    public static MemorySegment cuvsHnswIndexParamsCreate$address() {
        return cuvsHnswIndexParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsCreate(cuvsHnswIndexParams_t *params)
     * }
     */
    public static int cuvsHnswIndexParamsCreate(MemorySegment params) {
        var mh$ = cuvsHnswIndexParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswIndexParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswIndexParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswIndexParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsDestroy(cuvsHnswIndexParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsHnswIndexParamsDestroy$descriptor() {
        return cuvsHnswIndexParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsDestroy(cuvsHnswIndexParams_t params)
     * }
     */
    public static MethodHandle cuvsHnswIndexParamsDestroy$handle() {
        return cuvsHnswIndexParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsDestroy(cuvsHnswIndexParams_t params)
     * }
     */
    public static MemorySegment cuvsHnswIndexParamsDestroy$address() {
        return cuvsHnswIndexParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexParamsDestroy(cuvsHnswIndexParams_t params)
     * }
     */
    public static int cuvsHnswIndexParamsDestroy(MemorySegment params) {
        var mh$ = cuvsHnswIndexParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswIndexParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef cuvsHnswIndex *cuvsHnswIndex_t
     * }
     */
    public static final AddressLayout cuvsHnswIndex_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsHnswIndexCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswIndexCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexCreate(cuvsHnswIndex_t *index)
     * }
     */
    public static FunctionDescriptor cuvsHnswIndexCreate$descriptor() {
        return cuvsHnswIndexCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexCreate(cuvsHnswIndex_t *index)
     * }
     */
    public static MethodHandle cuvsHnswIndexCreate$handle() {
        return cuvsHnswIndexCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexCreate(cuvsHnswIndex_t *index)
     * }
     */
    public static MemorySegment cuvsHnswIndexCreate$address() {
        return cuvsHnswIndexCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexCreate(cuvsHnswIndex_t *index)
     * }
     */
    public static int cuvsHnswIndexCreate(MemorySegment index) {
        var mh$ = cuvsHnswIndexCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswIndexCreate", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswIndexDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswIndexDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexDestroy(cuvsHnswIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsHnswIndexDestroy$descriptor() {
        return cuvsHnswIndexDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexDestroy(cuvsHnswIndex_t index)
     * }
     */
    public static MethodHandle cuvsHnswIndexDestroy$handle() {
        return cuvsHnswIndexDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexDestroy(cuvsHnswIndex_t index)
     * }
     */
    public static MemorySegment cuvsHnswIndexDestroy$address() {
        return cuvsHnswIndexDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswIndexDestroy(cuvsHnswIndex_t index)
     * }
     */
    public static int cuvsHnswIndexDestroy(MemorySegment index) {
        var mh$ = cuvsHnswIndexDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswIndexDestroy", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsHnswExtendParams {
     *     int num_threads;
     * } *cuvsHnswExtendParams_t
     * }
     */
    public static final AddressLayout cuvsHnswExtendParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsHnswExtendParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswExtendParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsCreate(cuvsHnswExtendParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsHnswExtendParamsCreate$descriptor() {
        return cuvsHnswExtendParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsCreate(cuvsHnswExtendParams_t *params)
     * }
     */
    public static MethodHandle cuvsHnswExtendParamsCreate$handle() {
        return cuvsHnswExtendParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsCreate(cuvsHnswExtendParams_t *params)
     * }
     */
    public static MemorySegment cuvsHnswExtendParamsCreate$address() {
        return cuvsHnswExtendParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsCreate(cuvsHnswExtendParams_t *params)
     * }
     */
    public static int cuvsHnswExtendParamsCreate(MemorySegment params) {
        var mh$ = cuvsHnswExtendParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswExtendParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswExtendParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswExtendParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsDestroy(cuvsHnswExtendParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsHnswExtendParamsDestroy$descriptor() {
        return cuvsHnswExtendParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsDestroy(cuvsHnswExtendParams_t params)
     * }
     */
    public static MethodHandle cuvsHnswExtendParamsDestroy$handle() {
        return cuvsHnswExtendParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsDestroy(cuvsHnswExtendParams_t params)
     * }
     */
    public static MemorySegment cuvsHnswExtendParamsDestroy$address() {
        return cuvsHnswExtendParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtendParamsDestroy(cuvsHnswExtendParams_t params)
     * }
     */
    public static int cuvsHnswExtendParamsDestroy(MemorySegment params) {
        var mh$ = cuvsHnswExtendParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswExtendParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswFromCagra {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswFromCagra");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagra(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index)
     * }
     */
    public static FunctionDescriptor cuvsHnswFromCagra$descriptor() {
        return cuvsHnswFromCagra.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagra(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index)
     * }
     */
    public static MethodHandle cuvsHnswFromCagra$handle() {
        return cuvsHnswFromCagra.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagra(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index)
     * }
     */
    public static MemorySegment cuvsHnswFromCagra$address() {
        return cuvsHnswFromCagra.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagra(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index)
     * }
     */
    public static int cuvsHnswFromCagra(long res, MemorySegment params, MemorySegment cagra_index, MemorySegment hnsw_index) {
        var mh$ = cuvsHnswFromCagra.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswFromCagra", res, params, cagra_index, hnsw_index);
            }
            return (int)mh$.invokeExact(res, params, cagra_index, hnsw_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswFromCagraWithDataset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswFromCagraWithDataset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagraWithDataset(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index, DLManagedTensor *dataset_tensor)
     * }
     */
    public static FunctionDescriptor cuvsHnswFromCagraWithDataset$descriptor() {
        return cuvsHnswFromCagraWithDataset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagraWithDataset(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index, DLManagedTensor *dataset_tensor)
     * }
     */
    public static MethodHandle cuvsHnswFromCagraWithDataset$handle() {
        return cuvsHnswFromCagraWithDataset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagraWithDataset(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index, DLManagedTensor *dataset_tensor)
     * }
     */
    public static MemorySegment cuvsHnswFromCagraWithDataset$address() {
        return cuvsHnswFromCagraWithDataset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswFromCagraWithDataset(cuvsResources_t res, cuvsHnswIndexParams_t params, cuvsCagraIndex_t cagra_index, cuvsHnswIndex_t hnsw_index, DLManagedTensor *dataset_tensor)
     * }
     */
    public static int cuvsHnswFromCagraWithDataset(long res, MemorySegment params, MemorySegment cagra_index, MemorySegment hnsw_index, MemorySegment dataset_tensor) {
        var mh$ = cuvsHnswFromCagraWithDataset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswFromCagraWithDataset", res, params, cagra_index, hnsw_index, dataset_tensor);
            }
            return (int)mh$.invokeExact(res, params, cagra_index, hnsw_index, dataset_tensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswExtend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswExtend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtend(cuvsResources_t res, cuvsHnswExtendParams_t params, DLManagedTensor *additional_dataset, cuvsHnswIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsHnswExtend$descriptor() {
        return cuvsHnswExtend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtend(cuvsResources_t res, cuvsHnswExtendParams_t params, DLManagedTensor *additional_dataset, cuvsHnswIndex_t index)
     * }
     */
    public static MethodHandle cuvsHnswExtend$handle() {
        return cuvsHnswExtend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtend(cuvsResources_t res, cuvsHnswExtendParams_t params, DLManagedTensor *additional_dataset, cuvsHnswIndex_t index)
     * }
     */
    public static MemorySegment cuvsHnswExtend$address() {
        return cuvsHnswExtend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswExtend(cuvsResources_t res, cuvsHnswExtendParams_t params, DLManagedTensor *additional_dataset, cuvsHnswIndex_t index)
     * }
     */
    public static int cuvsHnswExtend(long res, MemorySegment params, MemorySegment additional_dataset, MemorySegment index) {
        var mh$ = cuvsHnswExtend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswExtend", res, params, additional_dataset, index);
            }
            return (int)mh$.invokeExact(res, params, additional_dataset, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct cuvsHnswSearchParams {
     *     int32_t ef;
     *     int32_t num_threads;
     * } *cuvsHnswSearchParams_t
     * }
     */
    public static final AddressLayout cuvsHnswSearchParams_t = PanamaFFMAPI.C_POINTER;

    private static class cuvsHnswSearchParamsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswSearchParamsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsCreate(cuvsHnswSearchParams_t *params)
     * }
     */
    public static FunctionDescriptor cuvsHnswSearchParamsCreate$descriptor() {
        return cuvsHnswSearchParamsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsCreate(cuvsHnswSearchParams_t *params)
     * }
     */
    public static MethodHandle cuvsHnswSearchParamsCreate$handle() {
        return cuvsHnswSearchParamsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsCreate(cuvsHnswSearchParams_t *params)
     * }
     */
    public static MemorySegment cuvsHnswSearchParamsCreate$address() {
        return cuvsHnswSearchParamsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsCreate(cuvsHnswSearchParams_t *params)
     * }
     */
    public static int cuvsHnswSearchParamsCreate(MemorySegment params) {
        var mh$ = cuvsHnswSearchParamsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswSearchParamsCreate", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswSearchParamsDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswSearchParamsDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsDestroy(cuvsHnswSearchParams_t params)
     * }
     */
    public static FunctionDescriptor cuvsHnswSearchParamsDestroy$descriptor() {
        return cuvsHnswSearchParamsDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsDestroy(cuvsHnswSearchParams_t params)
     * }
     */
    public static MethodHandle cuvsHnswSearchParamsDestroy$handle() {
        return cuvsHnswSearchParamsDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsDestroy(cuvsHnswSearchParams_t params)
     * }
     */
    public static MemorySegment cuvsHnswSearchParamsDestroy$address() {
        return cuvsHnswSearchParamsDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearchParamsDestroy(cuvsHnswSearchParams_t params)
     * }
     */
    public static int cuvsHnswSearchParamsDestroy(MemorySegment params) {
        var mh$ = cuvsHnswSearchParamsDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswSearchParamsDestroy", params);
            }
            return (int)mh$.invokeExact(params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswSearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearch(cuvsResources_t res, cuvsHnswSearchParams_t params, cuvsHnswIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static FunctionDescriptor cuvsHnswSearch$descriptor() {
        return cuvsHnswSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearch(cuvsResources_t res, cuvsHnswSearchParams_t params, cuvsHnswIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static MethodHandle cuvsHnswSearch$handle() {
        return cuvsHnswSearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearch(cuvsResources_t res, cuvsHnswSearchParams_t params, cuvsHnswIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static MemorySegment cuvsHnswSearch$address() {
        return cuvsHnswSearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSearch(cuvsResources_t res, cuvsHnswSearchParams_t params, cuvsHnswIndex_t index, DLManagedTensor *queries, DLManagedTensor *neighbors, DLManagedTensor *distances)
     * }
     */
    public static int cuvsHnswSearch(long res, MemorySegment params, MemorySegment index, MemorySegment queries, MemorySegment neighbors, MemorySegment distances) {
        var mh$ = cuvsHnswSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswSearch", res, params, index, queries, neighbors, distances);
            }
            return (int)mh$.invokeExact(res, params, index, queries, neighbors, distances);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswSerialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswSerialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSerialize(cuvsResources_t res, const char *filename, cuvsHnswIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsHnswSerialize$descriptor() {
        return cuvsHnswSerialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSerialize(cuvsResources_t res, const char *filename, cuvsHnswIndex_t index)
     * }
     */
    public static MethodHandle cuvsHnswSerialize$handle() {
        return cuvsHnswSerialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSerialize(cuvsResources_t res, const char *filename, cuvsHnswIndex_t index)
     * }
     */
    public static MemorySegment cuvsHnswSerialize$address() {
        return cuvsHnswSerialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswSerialize(cuvsResources_t res, const char *filename, cuvsHnswIndex_t index)
     * }
     */
    public static int cuvsHnswSerialize(long res, MemorySegment filename, MemorySegment index) {
        var mh$ = cuvsHnswSerialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswSerialize", res, filename, index);
            }
            return (int)mh$.invokeExact(res, filename, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cuvsHnswDeserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cuvsHnswDeserialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswDeserialize(cuvsResources_t res, cuvsHnswIndexParams_t params, const char *filename, int dim, cuvsDistanceType metric, cuvsHnswIndex_t index)
     * }
     */
    public static FunctionDescriptor cuvsHnswDeserialize$descriptor() {
        return cuvsHnswDeserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswDeserialize(cuvsResources_t res, cuvsHnswIndexParams_t params, const char *filename, int dim, cuvsDistanceType metric, cuvsHnswIndex_t index)
     * }
     */
    public static MethodHandle cuvsHnswDeserialize$handle() {
        return cuvsHnswDeserialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswDeserialize(cuvsResources_t res, cuvsHnswIndexParams_t params, const char *filename, int dim, cuvsDistanceType metric, cuvsHnswIndex_t index)
     * }
     */
    public static MemorySegment cuvsHnswDeserialize$address() {
        return cuvsHnswDeserialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cuvsError_t cuvsHnswDeserialize(cuvsResources_t res, cuvsHnswIndexParams_t params, const char *filename, int dim, cuvsDistanceType metric, cuvsHnswIndex_t index)
     * }
     */
    public static int cuvsHnswDeserialize(long res, MemorySegment params, MemorySegment filename, int dim, int metric, MemorySegment index) {
        var mh$ = cuvsHnswDeserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cuvsHnswDeserialize", res, params, filename, dim, metric, index);
            }
            return (int)mh$.invokeExact(res, params, filename, dim, metric, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return PTHREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int SEM_VALUE_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return SEM_VALUE_MAX;
    }
    private static final long SSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return SSIZE_MAX;
    }
    private static final int BC_BASE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return BC_BASE_MAX;
    }
    private static final int BC_DIM_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return BC_DIM_MAX;
    }
    private static final int BC_SCALE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return BC_SCALE_MAX;
    }
    private static final int BC_STRING_MAX = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return BC_STRING_MAX;
    }
    private static final int EXPR_NEST_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return EXPR_NEST_MAX;
    }
    private static final int LINE_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return LINE_MAX;
    }
    private static final int RE_DUP_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return RE_DUP_MAX;
    }
    private static final int SCHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return SCHAR_MAX;
    }
    private static final int SHRT_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return SHRT_MAX;
    }
    private static final int INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return INT_MAX;
    }
    private static final long LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return LONG_MAX;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final long LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return LONG_MIN;
    }
    private static final int UCHAR_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return UCHAR_MAX;
    }
    private static final int USHRT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return USHRT_MAX;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final long ULONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final int CHAR_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return CHAR_BIT;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final MemorySegment cudaStreamLegacy = MemorySegment.ofAddress(1L);
    /**
     * {@snippet lang=c :
     * #define cudaStreamLegacy (void*) 1
     * }
     */
    public static MemorySegment cudaStreamLegacy() {
        return cudaStreamLegacy;
    }
    private static final MemorySegment cudaStreamPerThread = MemorySegment.ofAddress(2L);
    /**
     * {@snippet lang=c :
     * #define cudaStreamPerThread (void*) 2
     * }
     */
    public static MemorySegment cudaStreamPerThread() {
        return cudaStreamPerThread;
    }
    private static final int cudaCpuDeviceId = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define cudaCpuDeviceId -1
     * }
     */
    public static int cudaCpuDeviceId() {
        return cudaCpuDeviceId;
    }
    private static final int cudaInvalidDeviceId = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define cudaInvalidDeviceId -2
     * }
     */
    public static int cudaInvalidDeviceId() {
        return cudaInvalidDeviceId;
    }
    private static final int cudaStreamAttributeAccessPolicyWindow = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaStreamAttributeAccessPolicyWindow 1
     * }
     */
    public static int cudaStreamAttributeAccessPolicyWindow() {
        return cudaStreamAttributeAccessPolicyWindow;
    }
    private static final int cudaStreamAttributeSynchronizationPolicy = (int)3L;
    /**
     * {@snippet lang=c :
     * #define cudaStreamAttributeSynchronizationPolicy 3
     * }
     */
    public static int cudaStreamAttributeSynchronizationPolicy() {
        return cudaStreamAttributeSynchronizationPolicy;
    }
    private static final int cudaStreamAttributeMemSyncDomainMap = (int)9L;
    /**
     * {@snippet lang=c :
     * #define cudaStreamAttributeMemSyncDomainMap 9
     * }
     */
    public static int cudaStreamAttributeMemSyncDomainMap() {
        return cudaStreamAttributeMemSyncDomainMap;
    }
    private static final int cudaStreamAttributeMemSyncDomain = (int)10L;
    /**
     * {@snippet lang=c :
     * #define cudaStreamAttributeMemSyncDomain 10
     * }
     */
    public static int cudaStreamAttributeMemSyncDomain() {
        return cudaStreamAttributeMemSyncDomain;
    }
    private static final int cudaStreamAttributePriority = (int)8L;
    /**
     * {@snippet lang=c :
     * #define cudaStreamAttributePriority 8
     * }
     */
    public static int cudaStreamAttributePriority() {
        return cudaStreamAttributePriority;
    }
    private static final int cudaKernelNodeAttributeAccessPolicyWindow = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributeAccessPolicyWindow 1
     * }
     */
    public static int cudaKernelNodeAttributeAccessPolicyWindow() {
        return cudaKernelNodeAttributeAccessPolicyWindow;
    }
    private static final int cudaKernelNodeAttributeCooperative = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributeCooperative 2
     * }
     */
    public static int cudaKernelNodeAttributeCooperative() {
        return cudaKernelNodeAttributeCooperative;
    }
    private static final int cudaKernelNodeAttributePriority = (int)8L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributePriority 8
     * }
     */
    public static int cudaKernelNodeAttributePriority() {
        return cudaKernelNodeAttributePriority;
    }
    private static final int cudaKernelNodeAttributeClusterDimension = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributeClusterDimension 4
     * }
     */
    public static int cudaKernelNodeAttributeClusterDimension() {
        return cudaKernelNodeAttributeClusterDimension;
    }
    private static final int cudaKernelNodeAttributeClusterSchedulingPolicyPreference = (int)5L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributeClusterSchedulingPolicyPreference 5
     * }
     */
    public static int cudaKernelNodeAttributeClusterSchedulingPolicyPreference() {
        return cudaKernelNodeAttributeClusterSchedulingPolicyPreference;
    }
    private static final int cudaKernelNodeAttributeMemSyncDomainMap = (int)9L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributeMemSyncDomainMap 9
     * }
     */
    public static int cudaKernelNodeAttributeMemSyncDomainMap() {
        return cudaKernelNodeAttributeMemSyncDomainMap;
    }
    private static final int cudaKernelNodeAttributeMemSyncDomain = (int)10L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributeMemSyncDomain 10
     * }
     */
    public static int cudaKernelNodeAttributeMemSyncDomain() {
        return cudaKernelNodeAttributeMemSyncDomain;
    }
    private static final int cudaKernelNodeAttributePreferredSharedMemoryCarveout = (int)14L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributePreferredSharedMemoryCarveout 14
     * }
     */
    public static int cudaKernelNodeAttributePreferredSharedMemoryCarveout() {
        return cudaKernelNodeAttributePreferredSharedMemoryCarveout;
    }
    private static final int cudaKernelNodeAttributeDeviceUpdatableKernelNode = (int)13L;
    /**
     * {@snippet lang=c :
     * #define cudaKernelNodeAttributeDeviceUpdatableKernelNode 13
     * }
     */
    public static int cudaKernelNodeAttributeDeviceUpdatableKernelNode() {
        return cudaKernelNodeAttributeDeviceUpdatableKernelNode;
    }
    private static final int __CUDART_API_VERSION = (int)12060L;
    /**
     * {@snippet lang=c :
     * #define __CUDART_API_VERSION 12060
     * }
     */
    public static int __CUDART_API_VERSION() {
        return __CUDART_API_VERSION;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
}
