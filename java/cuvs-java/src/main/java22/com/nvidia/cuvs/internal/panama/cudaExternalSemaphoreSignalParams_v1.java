/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaExternalSemaphoreSignalParams_v1 {
 *     struct {
 *         struct {
 *             unsigned long long value;
 *         } fence;
 *         union {
 *             void *fence;
 *             unsigned long long reserved;
 *         } nvSciSync;
 *         struct {
 *             unsigned long long key;
 *         } keyedMutex;
 *     } params;
 *     unsigned int flags;
 * }
 * }
 */
public class cudaExternalSemaphoreSignalParams_v1 {

    cudaExternalSemaphoreSignalParams_v1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        cudaExternalSemaphoreSignalParams_v1.params.layout().withName("params"),
        PanamaFFMAPI.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaExternalSemaphoreSignalParams_v1");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     struct {
     *         unsigned long long value;
     *     } fence;
     *     union {
     *         void *fence;
     *         unsigned long long reserved;
     *     } nvSciSync;
     *     struct {
     *         unsigned long long key;
     *     } keyedMutex;
     * }
     * }
     */
    public static class params {

        params() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            cudaExternalSemaphoreSignalParams_v1.params.fence.layout().withName("fence"),
            cudaExternalSemaphoreSignalParams_v1.params.nvSciSync.layout().withName("nvSciSync"),
            cudaExternalSemaphoreSignalParams_v1.params.keyedMutex.layout().withName("keyedMutex")
        ).withName("$anon$2694:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     unsigned long long value;
         * }
         * }
         */
        public static class fence {

            fence() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_LONG_LONG.withName("value")
            ).withName("$anon$2698:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfLong value$LAYOUT = (OfLong)$LAYOUT.select(groupElement("value"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * unsigned long long value
             * }
             */
            public static final OfLong value$layout() {
                return value$LAYOUT;
            }

            private static final long value$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * unsigned long long value
             * }
             */
            public static final long value$offset() {
                return value$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * unsigned long long value
             * }
             */
            public static long value(MemorySegment struct) {
                return struct.get(value$LAYOUT, value$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * unsigned long long value
             * }
             */
            public static void value(MemorySegment struct, long fieldValue) {
                struct.set(value$LAYOUT, value$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout fence$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fence"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long value;
         * } fence
         * }
         */
        public static final GroupLayout fence$layout() {
            return fence$LAYOUT;
        }

        private static final long fence$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long value;
         * } fence
         * }
         */
        public static final long fence$offset() {
            return fence$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long value;
         * } fence
         * }
         */
        public static MemorySegment fence(MemorySegment struct) {
            return struct.asSlice(fence$OFFSET, fence$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long value;
         * } fence
         * }
         */
        public static void fence(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, fence$OFFSET, fence$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * union {
         *     void *fence;
         *     unsigned long long reserved;
         * }
         * }
         */
        public static class nvSciSync {

            nvSciSync() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                PanamaFFMAPI.C_POINTER.withName("fence"),
                PanamaFFMAPI.C_LONG_LONG.withName("reserved")
            ).withName("$anon$2704:9");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout fence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fence"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void *fence
             * }
             */
            public static final AddressLayout fence$layout() {
                return fence$LAYOUT;
            }

            private static final long fence$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void *fence
             * }
             */
            public static final long fence$offset() {
                return fence$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void *fence
             * }
             */
            public static MemorySegment fence(MemorySegment union) {
                return union.get(fence$LAYOUT, fence$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void *fence
             * }
             */
            public static void fence(MemorySegment union, MemorySegment fieldValue) {
                union.set(fence$LAYOUT, fence$OFFSET, fieldValue);
            }

            private static final OfLong reserved$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reserved"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * unsigned long long reserved
             * }
             */
            public static final OfLong reserved$layout() {
                return reserved$LAYOUT;
            }

            private static final long reserved$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * unsigned long long reserved
             * }
             */
            public static final long reserved$offset() {
                return reserved$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * unsigned long long reserved
             * }
             */
            public static long reserved(MemorySegment union) {
                return union.get(reserved$LAYOUT, reserved$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * unsigned long long reserved
             * }
             */
            public static void reserved(MemorySegment union, long fieldValue) {
                union.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout nvSciSync$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("nvSciSync"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union {
         *     void *fence;
         *     unsigned long long reserved;
         * } nvSciSync
         * }
         */
        public static final GroupLayout nvSciSync$layout() {
            return nvSciSync$LAYOUT;
        }

        private static final long nvSciSync$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union {
         *     void *fence;
         *     unsigned long long reserved;
         * } nvSciSync
         * }
         */
        public static final long nvSciSync$offset() {
            return nvSciSync$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union {
         *     void *fence;
         *     unsigned long long reserved;
         * } nvSciSync
         * }
         */
        public static MemorySegment nvSciSync(MemorySegment struct) {
            return struct.asSlice(nvSciSync$OFFSET, nvSciSync$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union {
         *     void *fence;
         *     unsigned long long reserved;
         * } nvSciSync
         * }
         */
        public static void nvSciSync(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, nvSciSync$OFFSET, nvSciSync$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     unsigned long long key;
         * }
         * }
         */
        public static class keyedMutex {

            keyedMutex() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_LONG_LONG.withName("key")
            ).withName("$anon$2715:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfLong key$LAYOUT = (OfLong)$LAYOUT.select(groupElement("key"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * unsigned long long key
             * }
             */
            public static final OfLong key$layout() {
                return key$LAYOUT;
            }

            private static final long key$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * unsigned long long key
             * }
             */
            public static final long key$offset() {
                return key$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * unsigned long long key
             * }
             */
            public static long key(MemorySegment struct) {
                return struct.get(key$LAYOUT, key$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * unsigned long long key
             * }
             */
            public static void key(MemorySegment struct, long fieldValue) {
                struct.set(key$LAYOUT, key$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout keyedMutex$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("keyedMutex"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long key;
         * } keyedMutex
         * }
         */
        public static final GroupLayout keyedMutex$layout() {
            return keyedMutex$LAYOUT;
        }

        private static final long keyedMutex$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long key;
         * } keyedMutex
         * }
         */
        public static final long keyedMutex$offset() {
            return keyedMutex$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long key;
         * } keyedMutex
         * }
         */
        public static MemorySegment keyedMutex(MemorySegment struct) {
            return struct.asSlice(keyedMutex$OFFSET, keyedMutex$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned long long key;
         * } keyedMutex
         * }
         */
        public static void keyedMutex(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, keyedMutex$OFFSET, keyedMutex$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout params$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     struct {
     *         unsigned long long value;
     *     } fence;
     *     union {
     *         void *fence;
     *         unsigned long long reserved;
     *     } nvSciSync;
     *     struct {
     *         unsigned long long key;
     *     } keyedMutex;
     * } params
     * }
     */
    public static final GroupLayout params$layout() {
        return params$LAYOUT;
    }

    private static final long params$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     struct {
     *         unsigned long long value;
     *     } fence;
     *     union {
     *         void *fence;
     *         unsigned long long reserved;
     *     } nvSciSync;
     *     struct {
     *         unsigned long long key;
     *     } keyedMutex;
     * } params
     * }
     */
    public static final long params$offset() {
        return params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     struct {
     *         unsigned long long value;
     *     } fence;
     *     union {
     *         void *fence;
     *         unsigned long long reserved;
     *     } nvSciSync;
     *     struct {
     *         unsigned long long key;
     *     } keyedMutex;
     * } params
     * }
     */
    public static MemorySegment params(MemorySegment struct) {
        return struct.asSlice(params$OFFSET, params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     struct {
     *         unsigned long long value;
     *     } fence;
     *     union {
     *         void *fence;
     *         unsigned long long reserved;
     *     } nvSciSync;
     *     struct {
     *         unsigned long long key;
     *     } keyedMutex;
     * } params
     * }
     */
    public static void params(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, params$OFFSET, params$LAYOUT.byteSize());
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
