/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaGraphEdgeData_st {
 *     unsigned char from_port;
 *     unsigned char to_port;
 *     unsigned char type;
 *     unsigned char reserved[5];
 * }
 * }
 */
public class cudaGraphEdgeData_st {

    cudaGraphEdgeData_st() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_CHAR.withName("from_port"),
        PanamaFFMAPI.C_CHAR.withName("to_port"),
        PanamaFFMAPI.C_CHAR.withName("type"),
        MemoryLayout.sequenceLayout(5, PanamaFFMAPI.C_CHAR).withName("reserved")
    ).withName("cudaGraphEdgeData_st");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte from_port$LAYOUT = (OfByte)$LAYOUT.select(groupElement("from_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char from_port
     * }
     */
    public static final OfByte from_port$layout() {
        return from_port$LAYOUT;
    }

    private static final long from_port$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char from_port
     * }
     */
    public static final long from_port$offset() {
        return from_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char from_port
     * }
     */
    public static byte from_port(MemorySegment struct) {
        return struct.get(from_port$LAYOUT, from_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char from_port
     * }
     */
    public static void from_port(MemorySegment struct, byte fieldValue) {
        struct.set(from_port$LAYOUT, from_port$OFFSET, fieldValue);
    }

    private static final OfByte to_port$LAYOUT = (OfByte)$LAYOUT.select(groupElement("to_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char to_port
     * }
     */
    public static final OfByte to_port$layout() {
        return to_port$LAYOUT;
    }

    private static final long to_port$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char to_port
     * }
     */
    public static final long to_port$offset() {
        return to_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char to_port
     * }
     */
    public static byte to_port(MemorySegment struct) {
        return struct.get(to_port$LAYOUT, to_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char to_port
     * }
     */
    public static void to_port(MemorySegment struct, byte fieldValue) {
        struct.set(to_port$LAYOUT, to_port$OFFSET, fieldValue);
    }

    private static final OfByte type$LAYOUT = (OfByte)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char type
     * }
     */
    public static final OfByte type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char type
     * }
     */
    public static byte type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char type
     * }
     */
    public static void type(MemorySegment struct, byte fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char reserved[5]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char reserved[5]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char reserved[5]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char reserved[5]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char reserved[5]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char reserved[5]
     * }
     */
    public static byte reserved(MemorySegment struct, long index0) {
        return (byte)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char reserved[5]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, byte fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
