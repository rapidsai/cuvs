/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaAccessPolicyWindow {
 *     void *base_ptr;
 *     size_t num_bytes;
 *     float hitRatio;
 *     enum cudaAccessProperty hitProp;
 *     enum cudaAccessProperty missProp;
 * }
 * }
 */
public class cudaAccessPolicyWindow {

    cudaAccessPolicyWindow() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_POINTER.withName("base_ptr"),
        PanamaFFMAPI.C_LONG.withName("num_bytes"),
        PanamaFFMAPI.C_FLOAT.withName("hitRatio"),
        PanamaFFMAPI.C_INT.withName("hitProp"),
        PanamaFFMAPI.C_INT.withName("missProp"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaAccessPolicyWindow");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout base_ptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base_ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *base_ptr
     * }
     */
    public static final AddressLayout base_ptr$layout() {
        return base_ptr$LAYOUT;
    }

    private static final long base_ptr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *base_ptr
     * }
     */
    public static final long base_ptr$offset() {
        return base_ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *base_ptr
     * }
     */
    public static MemorySegment base_ptr(MemorySegment struct) {
        return struct.get(base_ptr$LAYOUT, base_ptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *base_ptr
     * }
     */
    public static void base_ptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base_ptr$LAYOUT, base_ptr$OFFSET, fieldValue);
    }

    private static final OfLong num_bytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_bytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t num_bytes
     * }
     */
    public static final OfLong num_bytes$layout() {
        return num_bytes$LAYOUT;
    }

    private static final long num_bytes$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t num_bytes
     * }
     */
    public static final long num_bytes$offset() {
        return num_bytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t num_bytes
     * }
     */
    public static long num_bytes(MemorySegment struct) {
        return struct.get(num_bytes$LAYOUT, num_bytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t num_bytes
     * }
     */
    public static void num_bytes(MemorySegment struct, long fieldValue) {
        struct.set(num_bytes$LAYOUT, num_bytes$OFFSET, fieldValue);
    }

    private static final OfFloat hitRatio$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("hitRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float hitRatio
     * }
     */
    public static final OfFloat hitRatio$layout() {
        return hitRatio$LAYOUT;
    }

    private static final long hitRatio$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float hitRatio
     * }
     */
    public static final long hitRatio$offset() {
        return hitRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float hitRatio
     * }
     */
    public static float hitRatio(MemorySegment struct) {
        return struct.get(hitRatio$LAYOUT, hitRatio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float hitRatio
     * }
     */
    public static void hitRatio(MemorySegment struct, float fieldValue) {
        struct.set(hitRatio$LAYOUT, hitRatio$OFFSET, fieldValue);
    }

    private static final OfInt hitProp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hitProp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty hitProp
     * }
     */
    public static final OfInt hitProp$layout() {
        return hitProp$LAYOUT;
    }

    private static final long hitProp$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty hitProp
     * }
     */
    public static final long hitProp$offset() {
        return hitProp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty hitProp
     * }
     */
    public static int hitProp(MemorySegment struct) {
        return struct.get(hitProp$LAYOUT, hitProp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty hitProp
     * }
     */
    public static void hitProp(MemorySegment struct, int fieldValue) {
        struct.set(hitProp$LAYOUT, hitProp$OFFSET, fieldValue);
    }

    private static final OfInt missProp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("missProp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty missProp
     * }
     */
    public static final OfInt missProp$layout() {
        return missProp$LAYOUT;
    }

    private static final long missProp$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty missProp
     * }
     */
    public static final long missProp$offset() {
        return missProp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty missProp
     * }
     */
    public static int missProp(MemorySegment struct) {
        return struct.get(missProp$LAYOUT, missProp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaAccessProperty missProp
     * }
     */
    public static void missProp(MemorySegment struct, int fieldValue) {
        struct.set(missProp$LAYOUT, missProp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
