/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaResourceDesc {
 *     enum cudaResourceType resType;
 *     union {
 *         struct {
 *             cudaArray_t array;
 *         } array;
 *         struct {
 *             cudaMipmappedArray_t mipmap;
 *         } mipmap;
 *         struct {
 *             void *devPtr;
 *             struct cudaChannelFormatDesc desc;
 *             size_t sizeInBytes;
 *         } linear;
 *         struct {
 *             void *devPtr;
 *             struct cudaChannelFormatDesc desc;
 *             size_t width;
 *             size_t height;
 *             size_t pitchInBytes;
 *         } pitch2D;
 *     } res;
 * }
 * }
 */
public class cudaResourceDesc {

    cudaResourceDesc() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_INT.withName("resType"),
        MemoryLayout.paddingLayout(4),
        cudaResourceDesc.res.layout().withName("res")
    ).withName("cudaResourceDesc");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt resType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("resType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaResourceType resType
     * }
     */
    public static final OfInt resType$layout() {
        return resType$LAYOUT;
    }

    private static final long resType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaResourceType resType
     * }
     */
    public static final long resType$offset() {
        return resType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaResourceType resType
     * }
     */
    public static int resType(MemorySegment struct) {
        return struct.get(resType$LAYOUT, resType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaResourceType resType
     * }
     */
    public static void resType(MemorySegment struct, int fieldValue) {
        struct.set(resType$LAYOUT, resType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         cudaArray_t array;
     *     } array;
     *     struct {
     *         cudaMipmappedArray_t mipmap;
     *     } mipmap;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t sizeInBytes;
     *     } linear;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t width;
     *         size_t height;
     *         size_t pitchInBytes;
     *     } pitch2D;
     * }
     * }
     */
    public static class res {

        res() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            cudaResourceDesc.res.array.layout().withName("array"),
            cudaResourceDesc.res.mipmap.layout().withName("mipmap"),
            cudaResourceDesc.res.linear.layout().withName("linear"),
            cudaResourceDesc.res.pitch2D.layout().withName("pitch2D")
        ).withName("$anon$1564:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     cudaArray_t array;
         * }
         * }
         */
        public static class array {

            array() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_POINTER.withName("array")
            ).withName("$anon$1565:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("array"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * cudaArray_t array
             * }
             */
            public static final AddressLayout array$layout() {
                return array$LAYOUT;
            }

            private static final long array$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * cudaArray_t array
             * }
             */
            public static final long array$offset() {
                return array$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * cudaArray_t array
             * }
             */
            public static MemorySegment array(MemorySegment struct) {
                return struct.get(array$LAYOUT, array$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * cudaArray_t array
             * }
             */
            public static void array(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(array$LAYOUT, array$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array$, long index) {
                return array$.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout array$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("array"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     cudaArray_t array;
         * } array
         * }
         */
        public static final GroupLayout array$layout() {
            return array$LAYOUT;
        }

        private static final long array$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     cudaArray_t array;
         * } array
         * }
         */
        public static final long array$offset() {
            return array$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     cudaArray_t array;
         * } array
         * }
         */
        public static MemorySegment array(MemorySegment union) {
            return union.asSlice(array$OFFSET, array$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     cudaArray_t array;
         * } array
         * }
         */
        public static void array(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, array$OFFSET, array$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     cudaMipmappedArray_t mipmap;
         * }
         * }
         */
        public static class mipmap {

            mipmap() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_POINTER.withName("mipmap")
            ).withName("$anon$1568:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout mipmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mipmap"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * cudaMipmappedArray_t mipmap
             * }
             */
            public static final AddressLayout mipmap$layout() {
                return mipmap$LAYOUT;
            }

            private static final long mipmap$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * cudaMipmappedArray_t mipmap
             * }
             */
            public static final long mipmap$offset() {
                return mipmap$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * cudaMipmappedArray_t mipmap
             * }
             */
            public static MemorySegment mipmap(MemorySegment struct) {
                return struct.get(mipmap$LAYOUT, mipmap$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * cudaMipmappedArray_t mipmap
             * }
             */
            public static void mipmap(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(mipmap$LAYOUT, mipmap$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout mipmap$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mipmap"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     cudaMipmappedArray_t mipmap;
         * } mipmap
         * }
         */
        public static final GroupLayout mipmap$layout() {
            return mipmap$LAYOUT;
        }

        private static final long mipmap$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     cudaMipmappedArray_t mipmap;
         * } mipmap
         * }
         */
        public static final long mipmap$offset() {
            return mipmap$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     cudaMipmappedArray_t mipmap;
         * } mipmap
         * }
         */
        public static MemorySegment mipmap(MemorySegment union) {
            return union.asSlice(mipmap$OFFSET, mipmap$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     cudaMipmappedArray_t mipmap;
         * } mipmap
         * }
         */
        public static void mipmap(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, mipmap$OFFSET, mipmap$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t sizeInBytes;
         * }
         * }
         */
        public static class linear {

            linear() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_POINTER.withName("devPtr"),
                cudaChannelFormatDesc.layout().withName("desc"),
                MemoryLayout.paddingLayout(4),
                PanamaFFMAPI.C_LONG.withName("sizeInBytes")
            ).withName("$anon$1571:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout devPtr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("devPtr"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static final AddressLayout devPtr$layout() {
                return devPtr$LAYOUT;
            }

            private static final long devPtr$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static final long devPtr$offset() {
                return devPtr$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static MemorySegment devPtr(MemorySegment struct) {
                return struct.get(devPtr$LAYOUT, devPtr$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static void devPtr(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(devPtr$LAYOUT, devPtr$OFFSET, fieldValue);
            }

            private static final GroupLayout desc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("desc"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static final GroupLayout desc$layout() {
                return desc$LAYOUT;
            }

            private static final long desc$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static final long desc$offset() {
                return desc$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static MemorySegment desc(MemorySegment struct) {
                return struct.asSlice(desc$OFFSET, desc$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static void desc(MemorySegment struct, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, struct, desc$OFFSET, desc$LAYOUT.byteSize());
            }

            private static final OfLong sizeInBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sizeInBytes"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t sizeInBytes
             * }
             */
            public static final OfLong sizeInBytes$layout() {
                return sizeInBytes$LAYOUT;
            }

            private static final long sizeInBytes$OFFSET = 32;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t sizeInBytes
             * }
             */
            public static final long sizeInBytes$offset() {
                return sizeInBytes$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t sizeInBytes
             * }
             */
            public static long sizeInBytes(MemorySegment struct) {
                return struct.get(sizeInBytes$LAYOUT, sizeInBytes$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t sizeInBytes
             * }
             */
            public static void sizeInBytes(MemorySegment struct, long fieldValue) {
                struct.set(sizeInBytes$LAYOUT, sizeInBytes$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout linear$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("linear"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t sizeInBytes;
         * } linear
         * }
         */
        public static final GroupLayout linear$layout() {
            return linear$LAYOUT;
        }

        private static final long linear$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t sizeInBytes;
         * } linear
         * }
         */
        public static final long linear$offset() {
            return linear$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t sizeInBytes;
         * } linear
         * }
         */
        public static MemorySegment linear(MemorySegment union) {
            return union.asSlice(linear$OFFSET, linear$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t sizeInBytes;
         * } linear
         * }
         */
        public static void linear(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, linear$OFFSET, linear$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t width;
         *     size_t height;
         *     size_t pitchInBytes;
         * }
         * }
         */
        public static class pitch2D {

            pitch2D() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_POINTER.withName("devPtr"),
                cudaChannelFormatDesc.layout().withName("desc"),
                MemoryLayout.paddingLayout(4),
                PanamaFFMAPI.C_LONG.withName("width"),
                PanamaFFMAPI.C_LONG.withName("height"),
                PanamaFFMAPI.C_LONG.withName("pitchInBytes")
            ).withName("$anon$1576:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout devPtr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("devPtr"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static final AddressLayout devPtr$layout() {
                return devPtr$LAYOUT;
            }

            private static final long devPtr$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static final long devPtr$offset() {
                return devPtr$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static MemorySegment devPtr(MemorySegment struct) {
                return struct.get(devPtr$LAYOUT, devPtr$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void *devPtr
             * }
             */
            public static void devPtr(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(devPtr$LAYOUT, devPtr$OFFSET, fieldValue);
            }

            private static final GroupLayout desc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("desc"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static final GroupLayout desc$layout() {
                return desc$LAYOUT;
            }

            private static final long desc$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static final long desc$offset() {
                return desc$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static MemorySegment desc(MemorySegment struct) {
                return struct.asSlice(desc$OFFSET, desc$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct cudaChannelFormatDesc desc
             * }
             */
            public static void desc(MemorySegment struct, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, struct, desc$OFFSET, desc$LAYOUT.byteSize());
            }

            private static final OfLong width$LAYOUT = (OfLong)$LAYOUT.select(groupElement("width"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t width
             * }
             */
            public static final OfLong width$layout() {
                return width$LAYOUT;
            }

            private static final long width$OFFSET = 32;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t width
             * }
             */
            public static final long width$offset() {
                return width$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t width
             * }
             */
            public static long width(MemorySegment struct) {
                return struct.get(width$LAYOUT, width$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t width
             * }
             */
            public static void width(MemorySegment struct, long fieldValue) {
                struct.set(width$LAYOUT, width$OFFSET, fieldValue);
            }

            private static final OfLong height$LAYOUT = (OfLong)$LAYOUT.select(groupElement("height"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t height
             * }
             */
            public static final OfLong height$layout() {
                return height$LAYOUT;
            }

            private static final long height$OFFSET = 40;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t height
             * }
             */
            public static final long height$offset() {
                return height$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t height
             * }
             */
            public static long height(MemorySegment struct) {
                return struct.get(height$LAYOUT, height$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t height
             * }
             */
            public static void height(MemorySegment struct, long fieldValue) {
                struct.set(height$LAYOUT, height$OFFSET, fieldValue);
            }

            private static final OfLong pitchInBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pitchInBytes"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t pitchInBytes
             * }
             */
            public static final OfLong pitchInBytes$layout() {
                return pitchInBytes$LAYOUT;
            }

            private static final long pitchInBytes$OFFSET = 48;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t pitchInBytes
             * }
             */
            public static final long pitchInBytes$offset() {
                return pitchInBytes$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t pitchInBytes
             * }
             */
            public static long pitchInBytes(MemorySegment struct) {
                return struct.get(pitchInBytes$LAYOUT, pitchInBytes$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t pitchInBytes
             * }
             */
            public static void pitchInBytes(MemorySegment struct, long fieldValue) {
                struct.set(pitchInBytes$LAYOUT, pitchInBytes$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout pitch2D$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pitch2D"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t width;
         *     size_t height;
         *     size_t pitchInBytes;
         * } pitch2D
         * }
         */
        public static final GroupLayout pitch2D$layout() {
            return pitch2D$LAYOUT;
        }

        private static final long pitch2D$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t width;
         *     size_t height;
         *     size_t pitchInBytes;
         * } pitch2D
         * }
         */
        public static final long pitch2D$offset() {
            return pitch2D$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t width;
         *     size_t height;
         *     size_t pitchInBytes;
         * } pitch2D
         * }
         */
        public static MemorySegment pitch2D(MemorySegment union) {
            return union.asSlice(pitch2D$OFFSET, pitch2D$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     void *devPtr;
         *     struct cudaChannelFormatDesc desc;
         *     size_t width;
         *     size_t height;
         *     size_t pitchInBytes;
         * } pitch2D
         * }
         */
        public static void pitch2D(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, pitch2D$OFFSET, pitch2D$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout res$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("res"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         cudaArray_t array;
     *     } array;
     *     struct {
     *         cudaMipmappedArray_t mipmap;
     *     } mipmap;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t sizeInBytes;
     *     } linear;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t width;
     *         size_t height;
     *         size_t pitchInBytes;
     *     } pitch2D;
     * } res
     * }
     */
    public static final GroupLayout res$layout() {
        return res$LAYOUT;
    }

    private static final long res$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         cudaArray_t array;
     *     } array;
     *     struct {
     *         cudaMipmappedArray_t mipmap;
     *     } mipmap;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t sizeInBytes;
     *     } linear;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t width;
     *         size_t height;
     *         size_t pitchInBytes;
     *     } pitch2D;
     * } res
     * }
     */
    public static final long res$offset() {
        return res$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         cudaArray_t array;
     *     } array;
     *     struct {
     *         cudaMipmappedArray_t mipmap;
     *     } mipmap;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t sizeInBytes;
     *     } linear;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t width;
     *         size_t height;
     *         size_t pitchInBytes;
     *     } pitch2D;
     * } res
     * }
     */
    public static MemorySegment res(MemorySegment struct) {
        return struct.asSlice(res$OFFSET, res$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         cudaArray_t array;
     *     } array;
     *     struct {
     *         cudaMipmappedArray_t mipmap;
     *     } mipmap;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t sizeInBytes;
     *     } linear;
     *     struct {
     *         void *devPtr;
     *         struct cudaChannelFormatDesc desc;
     *         size_t width;
     *         size_t height;
     *         size_t pitchInBytes;
     *     } pitch2D;
     * } res
     * }
     */
    public static void res(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, res$OFFSET, res$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
