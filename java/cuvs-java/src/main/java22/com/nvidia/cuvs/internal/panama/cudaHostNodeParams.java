/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaHostNodeParams {
 *     cudaHostFn_t fn;
 *     void *userData;
 * }
 * }
 */
public class cudaHostNodeParams {

    cudaHostNodeParams() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_POINTER.withName("fn"),
        PanamaFFMAPI.C_POINTER.withName("userData")
    ).withName("cudaHostNodeParams");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout fn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaHostFn_t fn
     * }
     */
    public static final AddressLayout fn$layout() {
        return fn$LAYOUT;
    }

    private static final long fn$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaHostFn_t fn
     * }
     */
    public static final long fn$offset() {
        return fn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaHostFn_t fn
     * }
     */
    public static MemorySegment fn(MemorySegment struct) {
        return struct.get(fn$LAYOUT, fn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaHostFn_t fn
     * }
     */
    public static void fn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fn$LAYOUT, fn$OFFSET, fieldValue);
    }

    private static final AddressLayout userData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final AddressLayout userData$layout() {
        return userData$LAYOUT;
    }

    private static final long userData$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static final long userData$offset() {
        return userData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static MemorySegment userData(MemorySegment struct) {
        return struct.get(userData$LAYOUT, userData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userData
     * }
     */
    public static void userData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userData$LAYOUT, userData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
