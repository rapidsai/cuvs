/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaArraySparseProperties {
 *     struct {
 *         unsigned int width;
 *         unsigned int height;
 *         unsigned int depth;
 *     } tileExtent;
 *     unsigned int miptailFirstLevel;
 *     unsigned long long miptailSize;
 *     unsigned int flags;
 *     unsigned int reserved[4];
 * }
 * }
 */
public class cudaArraySparseProperties {

    cudaArraySparseProperties() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        cudaArraySparseProperties.tileExtent.layout().withName("tileExtent"),
        PanamaFFMAPI.C_INT.withName("miptailFirstLevel"),
        PanamaFFMAPI.C_LONG_LONG.withName("miptailSize"),
        PanamaFFMAPI.C_INT.withName("flags"),
        MemoryLayout.sequenceLayout(4, PanamaFFMAPI.C_INT).withName("reserved"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaArraySparseProperties");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     unsigned int width;
     *     unsigned int height;
     *     unsigned int depth;
     * }
     * }
     */
    public static class tileExtent {

        tileExtent() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            PanamaFFMAPI.C_INT.withName("width"),
            PanamaFFMAPI.C_INT.withName("height"),
            PanamaFFMAPI.C_INT.withName("depth")
        ).withName("$anon$1203:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int width
         * }
         */
        public static final OfInt width$layout() {
            return width$LAYOUT;
        }

        private static final long width$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int width
         * }
         */
        public static final long width$offset() {
            return width$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int width
         * }
         */
        public static int width(MemorySegment struct) {
            return struct.get(width$LAYOUT, width$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int width
         * }
         */
        public static void width(MemorySegment struct, int fieldValue) {
            struct.set(width$LAYOUT, width$OFFSET, fieldValue);
        }

        private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int height
         * }
         */
        public static final OfInt height$layout() {
            return height$LAYOUT;
        }

        private static final long height$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int height
         * }
         */
        public static final long height$offset() {
            return height$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int height
         * }
         */
        public static int height(MemorySegment struct) {
            return struct.get(height$LAYOUT, height$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int height
         * }
         */
        public static void height(MemorySegment struct, int fieldValue) {
            struct.set(height$LAYOUT, height$OFFSET, fieldValue);
        }

        private static final OfInt depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int depth
         * }
         */
        public static final OfInt depth$layout() {
            return depth$LAYOUT;
        }

        private static final long depth$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int depth
         * }
         */
        public static final long depth$offset() {
            return depth$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int depth
         * }
         */
        public static int depth(MemorySegment struct) {
            return struct.get(depth$LAYOUT, depth$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int depth
         * }
         */
        public static void depth(MemorySegment struct, int fieldValue) {
            struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout tileExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tileExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int width;
     *     unsigned int height;
     *     unsigned int depth;
     * } tileExtent
     * }
     */
    public static final GroupLayout tileExtent$layout() {
        return tileExtent$LAYOUT;
    }

    private static final long tileExtent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int width;
     *     unsigned int height;
     *     unsigned int depth;
     * } tileExtent
     * }
     */
    public static final long tileExtent$offset() {
        return tileExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int width;
     *     unsigned int height;
     *     unsigned int depth;
     * } tileExtent
     * }
     */
    public static MemorySegment tileExtent(MemorySegment struct) {
        return struct.asSlice(tileExtent$OFFSET, tileExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int width;
     *     unsigned int height;
     *     unsigned int depth;
     * } tileExtent
     * }
     */
    public static void tileExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tileExtent$OFFSET, tileExtent$LAYOUT.byteSize());
    }

    private static final OfInt miptailFirstLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("miptailFirstLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int miptailFirstLevel
     * }
     */
    public static final OfInt miptailFirstLevel$layout() {
        return miptailFirstLevel$LAYOUT;
    }

    private static final long miptailFirstLevel$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int miptailFirstLevel
     * }
     */
    public static final long miptailFirstLevel$offset() {
        return miptailFirstLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int miptailFirstLevel
     * }
     */
    public static int miptailFirstLevel(MemorySegment struct) {
        return struct.get(miptailFirstLevel$LAYOUT, miptailFirstLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int miptailFirstLevel
     * }
     */
    public static void miptailFirstLevel(MemorySegment struct, int fieldValue) {
        struct.set(miptailFirstLevel$LAYOUT, miptailFirstLevel$OFFSET, fieldValue);
    }

    private static final OfLong miptailSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("miptailSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long miptailSize
     * }
     */
    public static final OfLong miptailSize$layout() {
        return miptailSize$LAYOUT;
    }

    private static final long miptailSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long miptailSize
     * }
     */
    public static final long miptailSize$offset() {
        return miptailSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long miptailSize
     * }
     */
    public static long miptailSize(MemorySegment struct) {
        return struct.get(miptailSize$LAYOUT, miptailSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long miptailSize
     * }
     */
    public static void miptailSize(MemorySegment struct, long fieldValue) {
        struct.set(miptailSize$LAYOUT, miptailSize$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int reserved[4]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int reserved[4]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int reserved[4]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int reserved[4]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int reserved[4]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int reserved[4]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int reserved[4]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
