/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaExternalSemaphoreSignalNodeParams {
 *     cudaExternalSemaphore_t *extSemArray;
 *     const struct cudaExternalSemaphoreSignalParams *paramsArray;
 *     unsigned int numExtSems;
 * }
 * }
 */
public class cudaExternalSemaphoreSignalNodeParams {

    cudaExternalSemaphoreSignalNodeParams() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_POINTER.withName("extSemArray"),
        PanamaFFMAPI.C_POINTER.withName("paramsArray"),
        PanamaFFMAPI.C_INT.withName("numExtSems"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaExternalSemaphoreSignalNodeParams");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout extSemArray$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("extSemArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaExternalSemaphore_t *extSemArray
     * }
     */
    public static final AddressLayout extSemArray$layout() {
        return extSemArray$LAYOUT;
    }

    private static final long extSemArray$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaExternalSemaphore_t *extSemArray
     * }
     */
    public static final long extSemArray$offset() {
        return extSemArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaExternalSemaphore_t *extSemArray
     * }
     */
    public static MemorySegment extSemArray(MemorySegment struct) {
        return struct.get(extSemArray$LAYOUT, extSemArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaExternalSemaphore_t *extSemArray
     * }
     */
    public static void extSemArray(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(extSemArray$LAYOUT, extSemArray$OFFSET, fieldValue);
    }

    private static final AddressLayout paramsArray$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("paramsArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct cudaExternalSemaphoreSignalParams *paramsArray
     * }
     */
    public static final AddressLayout paramsArray$layout() {
        return paramsArray$LAYOUT;
    }

    private static final long paramsArray$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct cudaExternalSemaphoreSignalParams *paramsArray
     * }
     */
    public static final long paramsArray$offset() {
        return paramsArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct cudaExternalSemaphoreSignalParams *paramsArray
     * }
     */
    public static MemorySegment paramsArray(MemorySegment struct) {
        return struct.get(paramsArray$LAYOUT, paramsArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct cudaExternalSemaphoreSignalParams *paramsArray
     * }
     */
    public static void paramsArray(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(paramsArray$LAYOUT, paramsArray$OFFSET, fieldValue);
    }

    private static final OfInt numExtSems$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numExtSems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int numExtSems
     * }
     */
    public static final OfInt numExtSems$layout() {
        return numExtSems$LAYOUT;
    }

    private static final long numExtSems$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int numExtSems
     * }
     */
    public static final long numExtSems$offset() {
        return numExtSems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int numExtSems
     * }
     */
    public static int numExtSems(MemorySegment struct) {
        return struct.get(numExtSems$LAYOUT, numExtSems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int numExtSems
     * }
     */
    public static void numExtSems(MemorySegment struct, int fieldValue) {
        struct.set(numExtSems$LAYOUT, numExtSems$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
