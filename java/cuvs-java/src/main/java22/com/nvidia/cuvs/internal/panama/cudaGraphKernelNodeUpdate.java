/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaGraphKernelNodeUpdate {
 *     cudaGraphDeviceNode_t node;
 *     enum cudaGraphKernelNodeField field;
 *     union {
 *         dim3 gridDim;
 *         struct {
 *             const void *pValue;
 *             size_t offset;
 *             size_t size;
 *         } param;
 *         unsigned int isEnabled;
 *     } updateData;
 * }
 * }
 */
public class cudaGraphKernelNodeUpdate {

    cudaGraphKernelNodeUpdate() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_POINTER.withName("node"),
        PanamaFFMAPI.C_INT.withName("field"),
        MemoryLayout.paddingLayout(4),
        cudaGraphKernelNodeUpdate.updateData.layout().withName("updateData")
    ).withName("cudaGraphKernelNodeUpdate");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout node$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("node"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaGraphDeviceNode_t node
     * }
     */
    public static final AddressLayout node$layout() {
        return node$LAYOUT;
    }

    private static final long node$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaGraphDeviceNode_t node
     * }
     */
    public static final long node$offset() {
        return node$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaGraphDeviceNode_t node
     * }
     */
    public static MemorySegment node(MemorySegment struct) {
        return struct.get(node$LAYOUT, node$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaGraphDeviceNode_t node
     * }
     */
    public static void node(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(node$LAYOUT, node$OFFSET, fieldValue);
    }

    private static final OfInt field$LAYOUT = (OfInt)$LAYOUT.select(groupElement("field"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField field
     * }
     */
    public static final OfInt field$layout() {
        return field$LAYOUT;
    }

    private static final long field$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField field
     * }
     */
    public static final long field$offset() {
        return field$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField field
     * }
     */
    public static int field(MemorySegment struct) {
        return struct.get(field$LAYOUT, field$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField field
     * }
     */
    public static void field(MemorySegment struct, int fieldValue) {
        struct.set(field$LAYOUT, field$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     dim3 gridDim;
     *     struct {
     *         const void *pValue;
     *         size_t offset;
     *         size_t size;
     *     } param;
     *     unsigned int isEnabled;
     * }
     * }
     */
    public static class updateData {

        updateData() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            dim3.layout().withName("gridDim"),
            cudaGraphKernelNodeUpdate.updateData.param.layout().withName("param"),
            PanamaFFMAPI.C_INT.withName("isEnabled")
        ).withName("$anon$3302:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout gridDim$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gridDim"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * dim3 gridDim
         * }
         */
        public static final GroupLayout gridDim$layout() {
            return gridDim$LAYOUT;
        }

        private static final long gridDim$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * dim3 gridDim
         * }
         */
        public static final long gridDim$offset() {
            return gridDim$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * dim3 gridDim
         * }
         */
        public static MemorySegment gridDim(MemorySegment union) {
            return union.asSlice(gridDim$OFFSET, gridDim$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * dim3 gridDim
         * }
         */
        public static void gridDim(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, gridDim$OFFSET, gridDim$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     const void *pValue;
         *     size_t offset;
         *     size_t size;
         * }
         * }
         */
        public static class param {

            param() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_POINTER.withName("pValue"),
                PanamaFFMAPI.C_LONG.withName("offset"),
                PanamaFFMAPI.C_LONG.withName("size")
            ).withName("$anon$3309:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout pValue$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pValue"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * const void *pValue
             * }
             */
            public static final AddressLayout pValue$layout() {
                return pValue$LAYOUT;
            }

            private static final long pValue$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * const void *pValue
             * }
             */
            public static final long pValue$offset() {
                return pValue$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * const void *pValue
             * }
             */
            public static MemorySegment pValue(MemorySegment struct) {
                return struct.get(pValue$LAYOUT, pValue$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * const void *pValue
             * }
             */
            public static void pValue(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(pValue$LAYOUT, pValue$OFFSET, fieldValue);
            }

            private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t offset
             * }
             */
            public static final OfLong offset$layout() {
                return offset$LAYOUT;
            }

            private static final long offset$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t offset
             * }
             */
            public static final long offset$offset() {
                return offset$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t offset
             * }
             */
            public static long offset(MemorySegment struct) {
                return struct.get(offset$LAYOUT, offset$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t offset
             * }
             */
            public static void offset(MemorySegment struct, long fieldValue) {
                struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
            }

            private static final OfLong size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t size
             * }
             */
            public static final OfLong size$layout() {
                return size$LAYOUT;
            }

            private static final long size$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t size
             * }
             */
            public static final long size$offset() {
                return size$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t size
             * }
             */
            public static long size(MemorySegment struct) {
                return struct.get(size$LAYOUT, size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t size
             * }
             */
            public static void size(MemorySegment struct, long fieldValue) {
                struct.set(size$LAYOUT, size$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout param$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("param"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     const void *pValue;
         *     size_t offset;
         *     size_t size;
         * } param
         * }
         */
        public static final GroupLayout param$layout() {
            return param$LAYOUT;
        }

        private static final long param$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     const void *pValue;
         *     size_t offset;
         *     size_t size;
         * } param
         * }
         */
        public static final long param$offset() {
            return param$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     const void *pValue;
         *     size_t offset;
         *     size_t size;
         * } param
         * }
         */
        public static MemorySegment param(MemorySegment union) {
            return union.asSlice(param$OFFSET, param$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     const void *pValue;
         *     size_t offset;
         *     size_t size;
         * } param
         * }
         */
        public static void param(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, param$OFFSET, param$LAYOUT.byteSize());
        }

        private static final OfInt isEnabled$LAYOUT = (OfInt)$LAYOUT.select(groupElement("isEnabled"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int isEnabled
         * }
         */
        public static final OfInt isEnabled$layout() {
            return isEnabled$LAYOUT;
        }

        private static final long isEnabled$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int isEnabled
         * }
         */
        public static final long isEnabled$offset() {
            return isEnabled$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int isEnabled
         * }
         */
        public static int isEnabled(MemorySegment union) {
            return union.get(isEnabled$LAYOUT, isEnabled$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int isEnabled
         * }
         */
        public static void isEnabled(MemorySegment union, int fieldValue) {
            union.set(isEnabled$LAYOUT, isEnabled$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout updateData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("updateData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     dim3 gridDim;
     *     struct {
     *         const void *pValue;
     *         size_t offset;
     *         size_t size;
     *     } param;
     *     unsigned int isEnabled;
     * } updateData
     * }
     */
    public static final GroupLayout updateData$layout() {
        return updateData$LAYOUT;
    }

    private static final long updateData$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     dim3 gridDim;
     *     struct {
     *         const void *pValue;
     *         size_t offset;
     *         size_t size;
     *     } param;
     *     unsigned int isEnabled;
     * } updateData
     * }
     */
    public static final long updateData$offset() {
        return updateData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     dim3 gridDim;
     *     struct {
     *         const void *pValue;
     *         size_t offset;
     *         size_t size;
     *     } param;
     *     unsigned int isEnabled;
     * } updateData
     * }
     */
    public static MemorySegment updateData(MemorySegment struct) {
        return struct.asSlice(updateData$OFFSET, updateData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     dim3 gridDim;
     *     struct {
     *         const void *pValue;
     *         size_t offset;
     *         size_t size;
     *     } param;
     *     unsigned int isEnabled;
     * } updateData
     * }
     */
    public static void updateData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, updateData$OFFSET, updateData$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
