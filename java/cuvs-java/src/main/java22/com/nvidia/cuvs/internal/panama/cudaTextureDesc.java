/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaTextureDesc {
 *     enum cudaTextureAddressMode addressMode[3];
 *     enum cudaTextureFilterMode filterMode;
 *     enum cudaTextureReadMode readMode;
 *     int sRGB;
 *     float borderColor[4];
 *     int normalizedCoords;
 *     unsigned int maxAnisotropy;
 *     enum cudaTextureFilterMode mipmapFilterMode;
 *     float mipmapLevelBias;
 *     float minMipmapLevelClamp;
 *     float maxMipmapLevelClamp;
 *     int disableTrilinearOptimization;
 *     int seamlessCubemap;
 * }
 * }
 */
public class cudaTextureDesc {

    cudaTextureDesc() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("addressMode"),
        PanamaFFMAPI.C_INT.withName("filterMode"),
        PanamaFFMAPI.C_INT.withName("readMode"),
        PanamaFFMAPI.C_INT.withName("sRGB"),
        MemoryLayout.sequenceLayout(4, PanamaFFMAPI.C_FLOAT).withName("borderColor"),
        PanamaFFMAPI.C_INT.withName("normalizedCoords"),
        PanamaFFMAPI.C_INT.withName("maxAnisotropy"),
        PanamaFFMAPI.C_INT.withName("mipmapFilterMode"),
        PanamaFFMAPI.C_FLOAT.withName("mipmapLevelBias"),
        PanamaFFMAPI.C_FLOAT.withName("minMipmapLevelClamp"),
        PanamaFFMAPI.C_FLOAT.withName("maxMipmapLevelClamp"),
        PanamaFFMAPI.C_INT.withName("disableTrilinearOptimization"),
        PanamaFFMAPI.C_INT.withName("seamlessCubemap")
    ).withName("cudaTextureDesc");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout addressMode$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("addressMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaTextureAddressMode addressMode[3]
     * }
     */
    public static final SequenceLayout addressMode$layout() {
        return addressMode$LAYOUT;
    }

    private static final long addressMode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaTextureAddressMode addressMode[3]
     * }
     */
    public static final long addressMode$offset() {
        return addressMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaTextureAddressMode addressMode[3]
     * }
     */
    public static MemorySegment addressMode(MemorySegment struct) {
        return struct.asSlice(addressMode$OFFSET, addressMode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaTextureAddressMode addressMode[3]
     * }
     */
    public static void addressMode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, addressMode$OFFSET, addressMode$LAYOUT.byteSize());
    }

    private static long[] addressMode$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * enum cudaTextureAddressMode addressMode[3]
     * }
     */
    public static long[] addressMode$dimensions() {
        return addressMode$DIMS;
    }
    private static final VarHandle addressMode$ELEM_HANDLE = addressMode$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * enum cudaTextureAddressMode addressMode[3]
     * }
     */
    public static int addressMode(MemorySegment struct, long index0) {
        return (int)addressMode$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * enum cudaTextureAddressMode addressMode[3]
     * }
     */
    public static void addressMode(MemorySegment struct, long index0, int fieldValue) {
        addressMode$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt filterMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("filterMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode filterMode
     * }
     */
    public static final OfInt filterMode$layout() {
        return filterMode$LAYOUT;
    }

    private static final long filterMode$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode filterMode
     * }
     */
    public static final long filterMode$offset() {
        return filterMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode filterMode
     * }
     */
    public static int filterMode(MemorySegment struct) {
        return struct.get(filterMode$LAYOUT, filterMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode filterMode
     * }
     */
    public static void filterMode(MemorySegment struct, int fieldValue) {
        struct.set(filterMode$LAYOUT, filterMode$OFFSET, fieldValue);
    }

    private static final OfInt readMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("readMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaTextureReadMode readMode
     * }
     */
    public static final OfInt readMode$layout() {
        return readMode$LAYOUT;
    }

    private static final long readMode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaTextureReadMode readMode
     * }
     */
    public static final long readMode$offset() {
        return readMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaTextureReadMode readMode
     * }
     */
    public static int readMode(MemorySegment struct) {
        return struct.get(readMode$LAYOUT, readMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaTextureReadMode readMode
     * }
     */
    public static void readMode(MemorySegment struct, int fieldValue) {
        struct.set(readMode$LAYOUT, readMode$OFFSET, fieldValue);
    }

    private static final OfInt sRGB$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sRGB"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sRGB
     * }
     */
    public static final OfInt sRGB$layout() {
        return sRGB$LAYOUT;
    }

    private static final long sRGB$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sRGB
     * }
     */
    public static final long sRGB$offset() {
        return sRGB$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sRGB
     * }
     */
    public static int sRGB(MemorySegment struct) {
        return struct.get(sRGB$LAYOUT, sRGB$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sRGB
     * }
     */
    public static void sRGB(MemorySegment struct, int fieldValue) {
        struct.set(sRGB$LAYOUT, sRGB$OFFSET, fieldValue);
    }

    private static final SequenceLayout borderColor$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("borderColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float borderColor[4]
     * }
     */
    public static final SequenceLayout borderColor$layout() {
        return borderColor$LAYOUT;
    }

    private static final long borderColor$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float borderColor[4]
     * }
     */
    public static final long borderColor$offset() {
        return borderColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float borderColor[4]
     * }
     */
    public static MemorySegment borderColor(MemorySegment struct) {
        return struct.asSlice(borderColor$OFFSET, borderColor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float borderColor[4]
     * }
     */
    public static void borderColor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, borderColor$OFFSET, borderColor$LAYOUT.byteSize());
    }

    private static long[] borderColor$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float borderColor[4]
     * }
     */
    public static long[] borderColor$dimensions() {
        return borderColor$DIMS;
    }
    private static final VarHandle borderColor$ELEM_HANDLE = borderColor$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float borderColor[4]
     * }
     */
    public static float borderColor(MemorySegment struct, long index0) {
        return (float)borderColor$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float borderColor[4]
     * }
     */
    public static void borderColor(MemorySegment struct, long index0, float fieldValue) {
        borderColor$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt normalizedCoords$LAYOUT = (OfInt)$LAYOUT.select(groupElement("normalizedCoords"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int normalizedCoords
     * }
     */
    public static final OfInt normalizedCoords$layout() {
        return normalizedCoords$LAYOUT;
    }

    private static final long normalizedCoords$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int normalizedCoords
     * }
     */
    public static final long normalizedCoords$offset() {
        return normalizedCoords$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int normalizedCoords
     * }
     */
    public static int normalizedCoords(MemorySegment struct) {
        return struct.get(normalizedCoords$LAYOUT, normalizedCoords$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int normalizedCoords
     * }
     */
    public static void normalizedCoords(MemorySegment struct, int fieldValue) {
        struct.set(normalizedCoords$LAYOUT, normalizedCoords$OFFSET, fieldValue);
    }

    private static final OfInt maxAnisotropy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxAnisotropy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int maxAnisotropy
     * }
     */
    public static final OfInt maxAnisotropy$layout() {
        return maxAnisotropy$LAYOUT;
    }

    private static final long maxAnisotropy$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int maxAnisotropy
     * }
     */
    public static final long maxAnisotropy$offset() {
        return maxAnisotropy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int maxAnisotropy
     * }
     */
    public static int maxAnisotropy(MemorySegment struct) {
        return struct.get(maxAnisotropy$LAYOUT, maxAnisotropy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int maxAnisotropy
     * }
     */
    public static void maxAnisotropy(MemorySegment struct, int fieldValue) {
        struct.set(maxAnisotropy$LAYOUT, maxAnisotropy$OFFSET, fieldValue);
    }

    private static final OfInt mipmapFilterMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mipmapFilterMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode mipmapFilterMode
     * }
     */
    public static final OfInt mipmapFilterMode$layout() {
        return mipmapFilterMode$LAYOUT;
    }

    private static final long mipmapFilterMode$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode mipmapFilterMode
     * }
     */
    public static final long mipmapFilterMode$offset() {
        return mipmapFilterMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode mipmapFilterMode
     * }
     */
    public static int mipmapFilterMode(MemorySegment struct) {
        return struct.get(mipmapFilterMode$LAYOUT, mipmapFilterMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaTextureFilterMode mipmapFilterMode
     * }
     */
    public static void mipmapFilterMode(MemorySegment struct, int fieldValue) {
        struct.set(mipmapFilterMode$LAYOUT, mipmapFilterMode$OFFSET, fieldValue);
    }

    private static final OfFloat mipmapLevelBias$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("mipmapLevelBias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float mipmapLevelBias
     * }
     */
    public static final OfFloat mipmapLevelBias$layout() {
        return mipmapLevelBias$LAYOUT;
    }

    private static final long mipmapLevelBias$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float mipmapLevelBias
     * }
     */
    public static final long mipmapLevelBias$offset() {
        return mipmapLevelBias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float mipmapLevelBias
     * }
     */
    public static float mipmapLevelBias(MemorySegment struct) {
        return struct.get(mipmapLevelBias$LAYOUT, mipmapLevelBias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float mipmapLevelBias
     * }
     */
    public static void mipmapLevelBias(MemorySegment struct, float fieldValue) {
        struct.set(mipmapLevelBias$LAYOUT, mipmapLevelBias$OFFSET, fieldValue);
    }

    private static final OfFloat minMipmapLevelClamp$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minMipmapLevelClamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minMipmapLevelClamp
     * }
     */
    public static final OfFloat minMipmapLevelClamp$layout() {
        return minMipmapLevelClamp$LAYOUT;
    }

    private static final long minMipmapLevelClamp$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minMipmapLevelClamp
     * }
     */
    public static final long minMipmapLevelClamp$offset() {
        return minMipmapLevelClamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minMipmapLevelClamp
     * }
     */
    public static float minMipmapLevelClamp(MemorySegment struct) {
        return struct.get(minMipmapLevelClamp$LAYOUT, minMipmapLevelClamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minMipmapLevelClamp
     * }
     */
    public static void minMipmapLevelClamp(MemorySegment struct, float fieldValue) {
        struct.set(minMipmapLevelClamp$LAYOUT, minMipmapLevelClamp$OFFSET, fieldValue);
    }

    private static final OfFloat maxMipmapLevelClamp$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxMipmapLevelClamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxMipmapLevelClamp
     * }
     */
    public static final OfFloat maxMipmapLevelClamp$layout() {
        return maxMipmapLevelClamp$LAYOUT;
    }

    private static final long maxMipmapLevelClamp$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxMipmapLevelClamp
     * }
     */
    public static final long maxMipmapLevelClamp$offset() {
        return maxMipmapLevelClamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxMipmapLevelClamp
     * }
     */
    public static float maxMipmapLevelClamp(MemorySegment struct) {
        return struct.get(maxMipmapLevelClamp$LAYOUT, maxMipmapLevelClamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxMipmapLevelClamp
     * }
     */
    public static void maxMipmapLevelClamp(MemorySegment struct, float fieldValue) {
        struct.set(maxMipmapLevelClamp$LAYOUT, maxMipmapLevelClamp$OFFSET, fieldValue);
    }

    private static final OfInt disableTrilinearOptimization$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disableTrilinearOptimization"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int disableTrilinearOptimization
     * }
     */
    public static final OfInt disableTrilinearOptimization$layout() {
        return disableTrilinearOptimization$LAYOUT;
    }

    private static final long disableTrilinearOptimization$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int disableTrilinearOptimization
     * }
     */
    public static final long disableTrilinearOptimization$offset() {
        return disableTrilinearOptimization$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int disableTrilinearOptimization
     * }
     */
    public static int disableTrilinearOptimization(MemorySegment struct) {
        return struct.get(disableTrilinearOptimization$LAYOUT, disableTrilinearOptimization$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int disableTrilinearOptimization
     * }
     */
    public static void disableTrilinearOptimization(MemorySegment struct, int fieldValue) {
        struct.set(disableTrilinearOptimization$LAYOUT, disableTrilinearOptimization$OFFSET, fieldValue);
    }

    private static final OfInt seamlessCubemap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("seamlessCubemap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int seamlessCubemap
     * }
     */
    public static final OfInt seamlessCubemap$layout() {
        return seamlessCubemap$LAYOUT;
    }

    private static final long seamlessCubemap$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int seamlessCubemap
     * }
     */
    public static final long seamlessCubemap$offset() {
        return seamlessCubemap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int seamlessCubemap
     * }
     */
    public static int seamlessCubemap(MemorySegment struct) {
        return struct.get(seamlessCubemap$LAYOUT, seamlessCubemap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int seamlessCubemap
     * }
     */
    public static void seamlessCubemap(MemorySegment struct, int fieldValue) {
        struct.set(seamlessCubemap$LAYOUT, seamlessCubemap$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
