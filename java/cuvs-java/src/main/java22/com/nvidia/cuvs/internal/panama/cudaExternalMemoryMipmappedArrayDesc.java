/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaExternalMemoryMipmappedArrayDesc {
 *     unsigned long long offset;
 *     struct cudaChannelFormatDesc formatDesc;
 *     struct cudaExtent extent;
 *     unsigned int flags;
 *     unsigned int numLevels;
 * }
 * }
 */
public class cudaExternalMemoryMipmappedArrayDesc {

    cudaExternalMemoryMipmappedArrayDesc() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_LONG_LONG.withName("offset"),
        cudaChannelFormatDesc.layout().withName("formatDesc"),
        MemoryLayout.paddingLayout(4),
        cudaExtent.layout().withName("extent"),
        PanamaFFMAPI.C_INT.withName("flags"),
        PanamaFFMAPI.C_INT.withName("numLevels")
    ).withName("cudaExternalMemoryMipmappedArrayDesc");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final GroupLayout formatDesc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("formatDesc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaChannelFormatDesc formatDesc
     * }
     */
    public static final GroupLayout formatDesc$layout() {
        return formatDesc$LAYOUT;
    }

    private static final long formatDesc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaChannelFormatDesc formatDesc
     * }
     */
    public static final long formatDesc$offset() {
        return formatDesc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaChannelFormatDesc formatDesc
     * }
     */
    public static MemorySegment formatDesc(MemorySegment struct) {
        return struct.asSlice(formatDesc$OFFSET, formatDesc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaChannelFormatDesc formatDesc
     * }
     */
    public static void formatDesc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, formatDesc$OFFSET, formatDesc$LAYOUT.byteSize());
    }

    private static final GroupLayout extent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("extent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static final GroupLayout extent$layout() {
        return extent$LAYOUT;
    }

    private static final long extent$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static final long extent$offset() {
        return extent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static MemorySegment extent(MemorySegment struct) {
        return struct.asSlice(extent$OFFSET, extent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaExtent extent
     * }
     */
    public static void extent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, extent$OFFSET, extent$LAYOUT.byteSize());
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt numLevels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numLevels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int numLevels
     * }
     */
    public static final OfInt numLevels$layout() {
        return numLevels$LAYOUT;
    }

    private static final long numLevels$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int numLevels
     * }
     */
    public static final long numLevels$offset() {
        return numLevels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int numLevels
     * }
     */
    public static int numLevels(MemorySegment struct) {
        return struct.get(numLevels$LAYOUT, numLevels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int numLevels
     * }
     */
    public static void numLevels(MemorySegment struct, int fieldValue) {
        struct.set(numLevels$LAYOUT, numLevels$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
