/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaMemsetParamsV2 {
 *     void *dst;
 *     size_t pitch;
 *     unsigned int value;
 *     unsigned int elementSize;
 *     size_t width;
 *     size_t height;
 * }
 * }
 */
public class cudaMemsetParamsV2 {

    cudaMemsetParamsV2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_POINTER.withName("dst"),
        PanamaFFMAPI.C_LONG.withName("pitch"),
        PanamaFFMAPI.C_INT.withName("value"),
        PanamaFFMAPI.C_INT.withName("elementSize"),
        PanamaFFMAPI.C_LONG.withName("width"),
        PanamaFFMAPI.C_LONG.withName("height")
    ).withName("cudaMemsetParamsV2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout dst$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *dst
     * }
     */
    public static final AddressLayout dst$layout() {
        return dst$LAYOUT;
    }

    private static final long dst$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *dst
     * }
     */
    public static final long dst$offset() {
        return dst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *dst
     * }
     */
    public static MemorySegment dst(MemorySegment struct) {
        return struct.get(dst$LAYOUT, dst$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *dst
     * }
     */
    public static void dst(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dst$LAYOUT, dst$OFFSET, fieldValue);
    }

    private static final OfLong pitch$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pitch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static final OfLong pitch$layout() {
        return pitch$LAYOUT;
    }

    private static final long pitch$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static final long pitch$offset() {
        return pitch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static long pitch(MemorySegment struct) {
        return struct.get(pitch$LAYOUT, pitch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static void pitch(MemorySegment struct, long fieldValue) {
        struct.set(pitch$LAYOUT, pitch$OFFSET, fieldValue);
    }

    private static final OfInt value$LAYOUT = (OfInt)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int value
     * }
     */
    public static final OfInt value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int value
     * }
     */
    public static int value(MemorySegment struct) {
        return struct.get(value$LAYOUT, value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int value
     * }
     */
    public static void value(MemorySegment struct, int fieldValue) {
        struct.set(value$LAYOUT, value$OFFSET, fieldValue);
    }

    private static final OfInt elementSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("elementSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int elementSize
     * }
     */
    public static final OfInt elementSize$layout() {
        return elementSize$LAYOUT;
    }

    private static final long elementSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int elementSize
     * }
     */
    public static final long elementSize$offset() {
        return elementSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int elementSize
     * }
     */
    public static int elementSize(MemorySegment struct) {
        return struct.get(elementSize$LAYOUT, elementSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int elementSize
     * }
     */
    public static void elementSize(MemorySegment struct, int fieldValue) {
        struct.set(elementSize$LAYOUT, elementSize$OFFSET, fieldValue);
    }

    private static final OfLong width$LAYOUT = (OfLong)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static final OfLong width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static long width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t width
     * }
     */
    public static void width(MemorySegment struct, long fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfLong height$LAYOUT = (OfLong)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static final OfLong height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static long height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t height
     * }
     */
    public static void height(MemorySegment struct, long fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
