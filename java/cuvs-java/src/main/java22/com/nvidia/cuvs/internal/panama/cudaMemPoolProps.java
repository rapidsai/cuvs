/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaMemPoolProps {
 *     enum cudaMemAllocationType allocType;
 *     enum cudaMemAllocationHandleType handleTypes;
 *     struct cudaMemLocation location;
 *     void *win32SecurityAttributes;
 *     size_t maxSize;
 *     unsigned short usage;
 *     unsigned char reserved[54];
 * }
 * }
 */
public class cudaMemPoolProps {

    cudaMemPoolProps() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_INT.withName("allocType"),
        PanamaFFMAPI.C_INT.withName("handleTypes"),
        cudaMemLocation.layout().withName("location"),
        PanamaFFMAPI.C_POINTER.withName("win32SecurityAttributes"),
        PanamaFFMAPI.C_LONG.withName("maxSize"),
        PanamaFFMAPI.C_SHORT.withName("usage"),
        MemoryLayout.sequenceLayout(54, PanamaFFMAPI.C_CHAR).withName("reserved")
    ).withName("cudaMemPoolProps");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt allocType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allocType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationType allocType
     * }
     */
    public static final OfInt allocType$layout() {
        return allocType$LAYOUT;
    }

    private static final long allocType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationType allocType
     * }
     */
    public static final long allocType$offset() {
        return allocType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationType allocType
     * }
     */
    public static int allocType(MemorySegment struct) {
        return struct.get(allocType$LAYOUT, allocType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationType allocType
     * }
     */
    public static void allocType(MemorySegment struct, int fieldValue) {
        struct.set(allocType$LAYOUT, allocType$OFFSET, fieldValue);
    }

    private static final OfInt handleTypes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("handleTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType handleTypes
     * }
     */
    public static final OfInt handleTypes$layout() {
        return handleTypes$LAYOUT;
    }

    private static final long handleTypes$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType handleTypes
     * }
     */
    public static final long handleTypes$offset() {
        return handleTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType handleTypes
     * }
     */
    public static int handleTypes(MemorySegment struct) {
        return struct.get(handleTypes$LAYOUT, handleTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType handleTypes
     * }
     */
    public static void handleTypes(MemorySegment struct, int fieldValue) {
        struct.set(handleTypes$LAYOUT, handleTypes$OFFSET, fieldValue);
    }

    private static final GroupLayout location$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("location"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaMemLocation location
     * }
     */
    public static final GroupLayout location$layout() {
        return location$LAYOUT;
    }

    private static final long location$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaMemLocation location
     * }
     */
    public static final long location$offset() {
        return location$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaMemLocation location
     * }
     */
    public static MemorySegment location(MemorySegment struct) {
        return struct.asSlice(location$OFFSET, location$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaMemLocation location
     * }
     */
    public static void location(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, location$OFFSET, location$LAYOUT.byteSize());
    }

    private static final AddressLayout win32SecurityAttributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("win32SecurityAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *win32SecurityAttributes
     * }
     */
    public static final AddressLayout win32SecurityAttributes$layout() {
        return win32SecurityAttributes$LAYOUT;
    }

    private static final long win32SecurityAttributes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *win32SecurityAttributes
     * }
     */
    public static final long win32SecurityAttributes$offset() {
        return win32SecurityAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *win32SecurityAttributes
     * }
     */
    public static MemorySegment win32SecurityAttributes(MemorySegment struct) {
        return struct.get(win32SecurityAttributes$LAYOUT, win32SecurityAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *win32SecurityAttributes
     * }
     */
    public static void win32SecurityAttributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(win32SecurityAttributes$LAYOUT, win32SecurityAttributes$OFFSET, fieldValue);
    }

    private static final OfLong maxSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maxSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t maxSize
     * }
     */
    public static final OfLong maxSize$layout() {
        return maxSize$LAYOUT;
    }

    private static final long maxSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t maxSize
     * }
     */
    public static final long maxSize$offset() {
        return maxSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t maxSize
     * }
     */
    public static long maxSize(MemorySegment struct) {
        return struct.get(maxSize$LAYOUT, maxSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t maxSize
     * }
     */
    public static void maxSize(MemorySegment struct, long fieldValue) {
        struct.set(maxSize$LAYOUT, maxSize$OFFSET, fieldValue);
    }

    private static final OfShort usage$LAYOUT = (OfShort)$LAYOUT.select(groupElement("usage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short usage
     * }
     */
    public static final OfShort usage$layout() {
        return usage$LAYOUT;
    }

    private static final long usage$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short usage
     * }
     */
    public static final long usage$offset() {
        return usage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short usage
     * }
     */
    public static short usage(MemorySegment struct) {
        return struct.get(usage$LAYOUT, usage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short usage
     * }
     */
    public static void usage(MemorySegment struct, short fieldValue) {
        struct.set(usage$LAYOUT, usage$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char reserved[54]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char reserved[54]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char reserved[54]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char reserved[54]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 54 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char reserved[54]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char reserved[54]
     * }
     */
    public static byte reserved(MemorySegment struct, long index0) {
        return (byte)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char reserved[54]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, byte fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
