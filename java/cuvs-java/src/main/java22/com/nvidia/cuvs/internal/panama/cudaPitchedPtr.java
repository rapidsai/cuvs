/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaPitchedPtr {
 *     void *ptr;
 *     size_t pitch;
 *     size_t xsize;
 *     size_t ysize;
 * }
 * }
 */
public class cudaPitchedPtr {

    cudaPitchedPtr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_POINTER.withName("ptr"),
        PanamaFFMAPI.C_LONG.withName("pitch"),
        PanamaFFMAPI.C_LONG.withName("xsize"),
        PanamaFFMAPI.C_LONG.withName("ysize")
    ).withName("cudaPitchedPtr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout ptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final AddressLayout ptr$layout() {
        return ptr$LAYOUT;
    }

    private static final long ptr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final long ptr$offset() {
        return ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static MemorySegment ptr(MemorySegment struct) {
        return struct.get(ptr$LAYOUT, ptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static void ptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ptr$LAYOUT, ptr$OFFSET, fieldValue);
    }

    private static final OfLong pitch$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pitch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static final OfLong pitch$layout() {
        return pitch$LAYOUT;
    }

    private static final long pitch$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static final long pitch$offset() {
        return pitch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static long pitch(MemorySegment struct) {
        return struct.get(pitch$LAYOUT, pitch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t pitch
     * }
     */
    public static void pitch(MemorySegment struct, long fieldValue) {
        struct.set(pitch$LAYOUT, pitch$OFFSET, fieldValue);
    }

    private static final OfLong xsize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("xsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t xsize
     * }
     */
    public static final OfLong xsize$layout() {
        return xsize$LAYOUT;
    }

    private static final long xsize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t xsize
     * }
     */
    public static final long xsize$offset() {
        return xsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t xsize
     * }
     */
    public static long xsize(MemorySegment struct) {
        return struct.get(xsize$LAYOUT, xsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t xsize
     * }
     */
    public static void xsize(MemorySegment struct, long fieldValue) {
        struct.set(xsize$LAYOUT, xsize$OFFSET, fieldValue);
    }

    private static final OfLong ysize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ysize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t ysize
     * }
     */
    public static final OfLong ysize$layout() {
        return ysize$LAYOUT;
    }

    private static final long ysize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t ysize
     * }
     */
    public static final long ysize$offset() {
        return ysize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t ysize
     * }
     */
    public static long ysize(MemorySegment struct) {
        return struct.get(ysize$LAYOUT, ysize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t ysize
     * }
     */
    public static void ysize(MemorySegment struct, long fieldValue) {
        struct.set(ysize$LAYOUT, ysize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
