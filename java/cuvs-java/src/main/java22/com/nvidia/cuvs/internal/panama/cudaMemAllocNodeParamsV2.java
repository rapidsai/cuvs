/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaMemAllocNodeParamsV2 {
 *     struct cudaMemPoolProps poolProps;
 *     const struct cudaMemAccessDesc *accessDescs;
 *     size_t accessDescCount;
 *     size_t bytesize;
 *     void *dptr;
 * }
 * }
 */
public class cudaMemAllocNodeParamsV2 {

    cudaMemAllocNodeParamsV2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        cudaMemPoolProps.layout().withName("poolProps"),
        PanamaFFMAPI.C_POINTER.withName("accessDescs"),
        PanamaFFMAPI.C_LONG.withName("accessDescCount"),
        PanamaFFMAPI.C_LONG.withName("bytesize"),
        PanamaFFMAPI.C_POINTER.withName("dptr")
    ).withName("cudaMemAllocNodeParamsV2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout poolProps$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("poolProps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct cudaMemPoolProps poolProps
     * }
     */
    public static final GroupLayout poolProps$layout() {
        return poolProps$LAYOUT;
    }

    private static final long poolProps$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct cudaMemPoolProps poolProps
     * }
     */
    public static final long poolProps$offset() {
        return poolProps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct cudaMemPoolProps poolProps
     * }
     */
    public static MemorySegment poolProps(MemorySegment struct) {
        return struct.asSlice(poolProps$OFFSET, poolProps$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct cudaMemPoolProps poolProps
     * }
     */
    public static void poolProps(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, poolProps$OFFSET, poolProps$LAYOUT.byteSize());
    }

    private static final AddressLayout accessDescs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accessDescs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct cudaMemAccessDesc *accessDescs
     * }
     */
    public static final AddressLayout accessDescs$layout() {
        return accessDescs$LAYOUT;
    }

    private static final long accessDescs$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct cudaMemAccessDesc *accessDescs
     * }
     */
    public static final long accessDescs$offset() {
        return accessDescs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct cudaMemAccessDesc *accessDescs
     * }
     */
    public static MemorySegment accessDescs(MemorySegment struct) {
        return struct.get(accessDescs$LAYOUT, accessDescs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct cudaMemAccessDesc *accessDescs
     * }
     */
    public static void accessDescs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accessDescs$LAYOUT, accessDescs$OFFSET, fieldValue);
    }

    private static final OfLong accessDescCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("accessDescCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t accessDescCount
     * }
     */
    public static final OfLong accessDescCount$layout() {
        return accessDescCount$LAYOUT;
    }

    private static final long accessDescCount$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t accessDescCount
     * }
     */
    public static final long accessDescCount$offset() {
        return accessDescCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t accessDescCount
     * }
     */
    public static long accessDescCount(MemorySegment struct) {
        return struct.get(accessDescCount$LAYOUT, accessDescCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t accessDescCount
     * }
     */
    public static void accessDescCount(MemorySegment struct, long fieldValue) {
        struct.set(accessDescCount$LAYOUT, accessDescCount$OFFSET, fieldValue);
    }

    private static final OfLong bytesize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bytesize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t bytesize
     * }
     */
    public static final OfLong bytesize$layout() {
        return bytesize$LAYOUT;
    }

    private static final long bytesize$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t bytesize
     * }
     */
    public static final long bytesize$offset() {
        return bytesize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t bytesize
     * }
     */
    public static long bytesize(MemorySegment struct) {
        return struct.get(bytesize$LAYOUT, bytesize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t bytesize
     * }
     */
    public static void bytesize(MemorySegment struct, long fieldValue) {
        struct.set(bytesize$LAYOUT, bytesize$OFFSET, fieldValue);
    }

    private static final AddressLayout dptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *dptr
     * }
     */
    public static final AddressLayout dptr$layout() {
        return dptr$LAYOUT;
    }

    private static final long dptr$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *dptr
     * }
     */
    public static final long dptr$offset() {
        return dptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *dptr
     * }
     */
    public static MemorySegment dptr(MemorySegment struct) {
        return struct.get(dptr$LAYOUT, dptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *dptr
     * }
     */
    public static void dptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dptr$LAYOUT, dptr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
