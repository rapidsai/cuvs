/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaDeviceProp {
 *     char name[256];
 *     cudaUUID_t uuid;
 *     char luid[8];
 *     unsigned int luidDeviceNodeMask;
 *     size_t totalGlobalMem;
 *     size_t sharedMemPerBlock;
 *     int regsPerBlock;
 *     int warpSize;
 *     size_t memPitch;
 *     int maxThreadsPerBlock;
 *     int maxThreadsDim[3];
 *     int maxGridSize[3];
 *     int clockRate;
 *     size_t totalConstMem;
 *     int major;
 *     int minor;
 *     size_t textureAlignment;
 *     size_t texturePitchAlignment;
 *     int deviceOverlap;
 *     int multiProcessorCount;
 *     int kernelExecTimeoutEnabled;
 *     int integrated;
 *     int canMapHostMemory;
 *     int computeMode;
 *     int maxTexture1D;
 *     int maxTexture1DMipmap;
 *     int maxTexture1DLinear;
 *     int maxTexture2D[2];
 *     int maxTexture2DMipmap[2];
 *     int maxTexture2DLinear[3];
 *     int maxTexture2DGather[2];
 *     int maxTexture3D[3];
 *     int maxTexture3DAlt[3];
 *     int maxTextureCubemap;
 *     int maxTexture1DLayered[2];
 *     int maxTexture2DLayered[3];
 *     int maxTextureCubemapLayered[2];
 *     int maxSurface1D;
 *     int maxSurface2D[2];
 *     int maxSurface3D[3];
 *     int maxSurface1DLayered[2];
 *     int maxSurface2DLayered[3];
 *     int maxSurfaceCubemap;
 *     int maxSurfaceCubemapLayered[2];
 *     size_t surfaceAlignment;
 *     int concurrentKernels;
 *     int ECCEnabled;
 *     int pciBusID;
 *     int pciDeviceID;
 *     int pciDomainID;
 *     int tccDriver;
 *     int asyncEngineCount;
 *     int unifiedAddressing;
 *     int memoryClockRate;
 *     int memoryBusWidth;
 *     int l2CacheSize;
 *     int persistingL2CacheMaxSize;
 *     int maxThreadsPerMultiProcessor;
 *     int streamPrioritiesSupported;
 *     int globalL1CacheSupported;
 *     int localL1CacheSupported;
 *     size_t sharedMemPerMultiprocessor;
 *     int regsPerMultiprocessor;
 *     int managedMemory;
 *     int isMultiGpuBoard;
 *     int multiGpuBoardGroupID;
 *     int hostNativeAtomicSupported;
 *     int singleToDoublePrecisionPerfRatio;
 *     int pageableMemoryAccess;
 *     int concurrentManagedAccess;
 *     int computePreemptionSupported;
 *     int canUseHostPointerForRegisteredMem;
 *     int cooperativeLaunch;
 *     int cooperativeMultiDeviceLaunch;
 *     size_t sharedMemPerBlockOptin;
 *     int pageableMemoryAccessUsesHostPageTables;
 *     int directManagedMemAccessFromHost;
 *     int maxBlocksPerMultiProcessor;
 *     int accessPolicyMaxWindowSize;
 *     size_t reservedSharedMemPerBlock;
 *     int hostRegisterSupported;
 *     int sparseCudaArraySupported;
 *     int hostRegisterReadOnlySupported;
 *     int timelineSemaphoreInteropSupported;
 *     int memoryPoolsSupported;
 *     int gpuDirectRDMASupported;
 *     unsigned int gpuDirectRDMAFlushWritesOptions;
 *     int gpuDirectRDMAWritesOrdering;
 *     unsigned int memoryPoolSupportedHandleTypes;
 *     int deferredMappingCudaArraySupported;
 *     int ipcEventSupported;
 *     int clusterLaunch;
 *     int unifiedFunctionPointers;
 *     int reserved2[2];
 *     int reserved1[1];
 *     int reserved[60];
 * }
 * }
 */
public class cudaDeviceProp {

    cudaDeviceProp() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(256, PanamaFFMAPI.C_CHAR).withName("name"),
        CUuuid_st.layout().withName("uuid"),
        MemoryLayout.sequenceLayout(8, PanamaFFMAPI.C_CHAR).withName("luid"),
        PanamaFFMAPI.C_INT.withName("luidDeviceNodeMask"),
        MemoryLayout.paddingLayout(4),
        PanamaFFMAPI.C_LONG.withName("totalGlobalMem"),
        PanamaFFMAPI.C_LONG.withName("sharedMemPerBlock"),
        PanamaFFMAPI.C_INT.withName("regsPerBlock"),
        PanamaFFMAPI.C_INT.withName("warpSize"),
        PanamaFFMAPI.C_LONG.withName("memPitch"),
        PanamaFFMAPI.C_INT.withName("maxThreadsPerBlock"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxThreadsDim"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxGridSize"),
        PanamaFFMAPI.C_INT.withName("clockRate"),
        PanamaFFMAPI.C_LONG.withName("totalConstMem"),
        PanamaFFMAPI.C_INT.withName("major"),
        PanamaFFMAPI.C_INT.withName("minor"),
        PanamaFFMAPI.C_LONG.withName("textureAlignment"),
        PanamaFFMAPI.C_LONG.withName("texturePitchAlignment"),
        PanamaFFMAPI.C_INT.withName("deviceOverlap"),
        PanamaFFMAPI.C_INT.withName("multiProcessorCount"),
        PanamaFFMAPI.C_INT.withName("kernelExecTimeoutEnabled"),
        PanamaFFMAPI.C_INT.withName("integrated"),
        PanamaFFMAPI.C_INT.withName("canMapHostMemory"),
        PanamaFFMAPI.C_INT.withName("computeMode"),
        PanamaFFMAPI.C_INT.withName("maxTexture1D"),
        PanamaFFMAPI.C_INT.withName("maxTexture1DMipmap"),
        PanamaFFMAPI.C_INT.withName("maxTexture1DLinear"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxTexture2D"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxTexture2DMipmap"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxTexture2DLinear"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxTexture2DGather"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxTexture3D"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxTexture3DAlt"),
        PanamaFFMAPI.C_INT.withName("maxTextureCubemap"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxTexture1DLayered"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxTexture2DLayered"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxTextureCubemapLayered"),
        PanamaFFMAPI.C_INT.withName("maxSurface1D"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxSurface2D"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxSurface3D"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxSurface1DLayered"),
        MemoryLayout.sequenceLayout(3, PanamaFFMAPI.C_INT).withName("maxSurface2DLayered"),
        PanamaFFMAPI.C_INT.withName("maxSurfaceCubemap"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("maxSurfaceCubemapLayered"),
        PanamaFFMAPI.C_LONG.withName("surfaceAlignment"),
        PanamaFFMAPI.C_INT.withName("concurrentKernels"),
        PanamaFFMAPI.C_INT.withName("ECCEnabled"),
        PanamaFFMAPI.C_INT.withName("pciBusID"),
        PanamaFFMAPI.C_INT.withName("pciDeviceID"),
        PanamaFFMAPI.C_INT.withName("pciDomainID"),
        PanamaFFMAPI.C_INT.withName("tccDriver"),
        PanamaFFMAPI.C_INT.withName("asyncEngineCount"),
        PanamaFFMAPI.C_INT.withName("unifiedAddressing"),
        PanamaFFMAPI.C_INT.withName("memoryClockRate"),
        PanamaFFMAPI.C_INT.withName("memoryBusWidth"),
        PanamaFFMAPI.C_INT.withName("l2CacheSize"),
        PanamaFFMAPI.C_INT.withName("persistingL2CacheMaxSize"),
        PanamaFFMAPI.C_INT.withName("maxThreadsPerMultiProcessor"),
        PanamaFFMAPI.C_INT.withName("streamPrioritiesSupported"),
        PanamaFFMAPI.C_INT.withName("globalL1CacheSupported"),
        PanamaFFMAPI.C_INT.withName("localL1CacheSupported"),
        PanamaFFMAPI.C_LONG.withName("sharedMemPerMultiprocessor"),
        PanamaFFMAPI.C_INT.withName("regsPerMultiprocessor"),
        PanamaFFMAPI.C_INT.withName("managedMemory"),
        PanamaFFMAPI.C_INT.withName("isMultiGpuBoard"),
        PanamaFFMAPI.C_INT.withName("multiGpuBoardGroupID"),
        PanamaFFMAPI.C_INT.withName("hostNativeAtomicSupported"),
        PanamaFFMAPI.C_INT.withName("singleToDoublePrecisionPerfRatio"),
        PanamaFFMAPI.C_INT.withName("pageableMemoryAccess"),
        PanamaFFMAPI.C_INT.withName("concurrentManagedAccess"),
        PanamaFFMAPI.C_INT.withName("computePreemptionSupported"),
        PanamaFFMAPI.C_INT.withName("canUseHostPointerForRegisteredMem"),
        PanamaFFMAPI.C_INT.withName("cooperativeLaunch"),
        PanamaFFMAPI.C_INT.withName("cooperativeMultiDeviceLaunch"),
        PanamaFFMAPI.C_LONG.withName("sharedMemPerBlockOptin"),
        PanamaFFMAPI.C_INT.withName("pageableMemoryAccessUsesHostPageTables"),
        PanamaFFMAPI.C_INT.withName("directManagedMemAccessFromHost"),
        PanamaFFMAPI.C_INT.withName("maxBlocksPerMultiProcessor"),
        PanamaFFMAPI.C_INT.withName("accessPolicyMaxWindowSize"),
        PanamaFFMAPI.C_LONG.withName("reservedSharedMemPerBlock"),
        PanamaFFMAPI.C_INT.withName("hostRegisterSupported"),
        PanamaFFMAPI.C_INT.withName("sparseCudaArraySupported"),
        PanamaFFMAPI.C_INT.withName("hostRegisterReadOnlySupported"),
        PanamaFFMAPI.C_INT.withName("timelineSemaphoreInteropSupported"),
        PanamaFFMAPI.C_INT.withName("memoryPoolsSupported"),
        PanamaFFMAPI.C_INT.withName("gpuDirectRDMASupported"),
        PanamaFFMAPI.C_INT.withName("gpuDirectRDMAFlushWritesOptions"),
        PanamaFFMAPI.C_INT.withName("gpuDirectRDMAWritesOrdering"),
        PanamaFFMAPI.C_INT.withName("memoryPoolSupportedHandleTypes"),
        PanamaFFMAPI.C_INT.withName("deferredMappingCudaArraySupported"),
        PanamaFFMAPI.C_INT.withName("ipcEventSupported"),
        PanamaFFMAPI.C_INT.withName("clusterLaunch"),
        PanamaFFMAPI.C_INT.withName("unifiedFunctionPointers"),
        MemoryLayout.sequenceLayout(2, PanamaFFMAPI.C_INT).withName("reserved2"),
        MemoryLayout.sequenceLayout(1, PanamaFFMAPI.C_INT).withName("reserved1"),
        MemoryLayout.sequenceLayout(60, PanamaFFMAPI.C_INT).withName("reserved")
    ).withName("cudaDeviceProp");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static final SequenceLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static long[] name$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static long[] name$dimensions() {
        return name$DIMS;
    }
    private static final VarHandle name$ELEM_HANDLE = name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static byte name(MemorySegment struct, long index0) {
        return (byte)name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char name[256]
     * }
     */
    public static void name(MemorySegment struct, long index0, byte fieldValue) {
        name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout uuid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaUUID_t uuid
     * }
     */
    public static final GroupLayout uuid$layout() {
        return uuid$LAYOUT;
    }

    private static final long uuid$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaUUID_t uuid
     * }
     */
    public static final long uuid$offset() {
        return uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaUUID_t uuid
     * }
     */
    public static MemorySegment uuid(MemorySegment struct) {
        return struct.asSlice(uuid$OFFSET, uuid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaUUID_t uuid
     * }
     */
    public static void uuid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uuid$OFFSET, uuid$LAYOUT.byteSize());
    }

    private static final SequenceLayout luid$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("luid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char luid[8]
     * }
     */
    public static final SequenceLayout luid$layout() {
        return luid$LAYOUT;
    }

    private static final long luid$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char luid[8]
     * }
     */
    public static final long luid$offset() {
        return luid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char luid[8]
     * }
     */
    public static MemorySegment luid(MemorySegment struct) {
        return struct.asSlice(luid$OFFSET, luid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char luid[8]
     * }
     */
    public static void luid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, luid$OFFSET, luid$LAYOUT.byteSize());
    }

    private static long[] luid$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char luid[8]
     * }
     */
    public static long[] luid$dimensions() {
        return luid$DIMS;
    }
    private static final VarHandle luid$ELEM_HANDLE = luid$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char luid[8]
     * }
     */
    public static byte luid(MemorySegment struct, long index0) {
        return (byte)luid$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char luid[8]
     * }
     */
    public static void luid(MemorySegment struct, long index0, byte fieldValue) {
        luid$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt luidDeviceNodeMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("luidDeviceNodeMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int luidDeviceNodeMask
     * }
     */
    public static final OfInt luidDeviceNodeMask$layout() {
        return luidDeviceNodeMask$LAYOUT;
    }

    private static final long luidDeviceNodeMask$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int luidDeviceNodeMask
     * }
     */
    public static final long luidDeviceNodeMask$offset() {
        return luidDeviceNodeMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int luidDeviceNodeMask
     * }
     */
    public static int luidDeviceNodeMask(MemorySegment struct) {
        return struct.get(luidDeviceNodeMask$LAYOUT, luidDeviceNodeMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int luidDeviceNodeMask
     * }
     */
    public static void luidDeviceNodeMask(MemorySegment struct, int fieldValue) {
        struct.set(luidDeviceNodeMask$LAYOUT, luidDeviceNodeMask$OFFSET, fieldValue);
    }

    private static final OfLong totalGlobalMem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("totalGlobalMem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t totalGlobalMem
     * }
     */
    public static final OfLong totalGlobalMem$layout() {
        return totalGlobalMem$LAYOUT;
    }

    private static final long totalGlobalMem$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t totalGlobalMem
     * }
     */
    public static final long totalGlobalMem$offset() {
        return totalGlobalMem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t totalGlobalMem
     * }
     */
    public static long totalGlobalMem(MemorySegment struct) {
        return struct.get(totalGlobalMem$LAYOUT, totalGlobalMem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t totalGlobalMem
     * }
     */
    public static void totalGlobalMem(MemorySegment struct, long fieldValue) {
        struct.set(totalGlobalMem$LAYOUT, totalGlobalMem$OFFSET, fieldValue);
    }

    private static final OfLong sharedMemPerBlock$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sharedMemPerBlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlock
     * }
     */
    public static final OfLong sharedMemPerBlock$layout() {
        return sharedMemPerBlock$LAYOUT;
    }

    private static final long sharedMemPerBlock$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlock
     * }
     */
    public static final long sharedMemPerBlock$offset() {
        return sharedMemPerBlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlock
     * }
     */
    public static long sharedMemPerBlock(MemorySegment struct) {
        return struct.get(sharedMemPerBlock$LAYOUT, sharedMemPerBlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlock
     * }
     */
    public static void sharedMemPerBlock(MemorySegment struct, long fieldValue) {
        struct.set(sharedMemPerBlock$LAYOUT, sharedMemPerBlock$OFFSET, fieldValue);
    }

    private static final OfInt regsPerBlock$LAYOUT = (OfInt)$LAYOUT.select(groupElement("regsPerBlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int regsPerBlock
     * }
     */
    public static final OfInt regsPerBlock$layout() {
        return regsPerBlock$LAYOUT;
    }

    private static final long regsPerBlock$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int regsPerBlock
     * }
     */
    public static final long regsPerBlock$offset() {
        return regsPerBlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int regsPerBlock
     * }
     */
    public static int regsPerBlock(MemorySegment struct) {
        return struct.get(regsPerBlock$LAYOUT, regsPerBlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int regsPerBlock
     * }
     */
    public static void regsPerBlock(MemorySegment struct, int fieldValue) {
        struct.set(regsPerBlock$LAYOUT, regsPerBlock$OFFSET, fieldValue);
    }

    private static final OfInt warpSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("warpSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int warpSize
     * }
     */
    public static final OfInt warpSize$layout() {
        return warpSize$LAYOUT;
    }

    private static final long warpSize$OFFSET = 308;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int warpSize
     * }
     */
    public static final long warpSize$offset() {
        return warpSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int warpSize
     * }
     */
    public static int warpSize(MemorySegment struct) {
        return struct.get(warpSize$LAYOUT, warpSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int warpSize
     * }
     */
    public static void warpSize(MemorySegment struct, int fieldValue) {
        struct.set(warpSize$LAYOUT, warpSize$OFFSET, fieldValue);
    }

    private static final OfLong memPitch$LAYOUT = (OfLong)$LAYOUT.select(groupElement("memPitch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t memPitch
     * }
     */
    public static final OfLong memPitch$layout() {
        return memPitch$LAYOUT;
    }

    private static final long memPitch$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t memPitch
     * }
     */
    public static final long memPitch$offset() {
        return memPitch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t memPitch
     * }
     */
    public static long memPitch(MemorySegment struct) {
        return struct.get(memPitch$LAYOUT, memPitch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t memPitch
     * }
     */
    public static void memPitch(MemorySegment struct, long fieldValue) {
        struct.set(memPitch$LAYOUT, memPitch$OFFSET, fieldValue);
    }

    private static final OfInt maxThreadsPerBlock$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxThreadsPerBlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxThreadsPerBlock
     * }
     */
    public static final OfInt maxThreadsPerBlock$layout() {
        return maxThreadsPerBlock$LAYOUT;
    }

    private static final long maxThreadsPerBlock$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxThreadsPerBlock
     * }
     */
    public static final long maxThreadsPerBlock$offset() {
        return maxThreadsPerBlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxThreadsPerBlock
     * }
     */
    public static int maxThreadsPerBlock(MemorySegment struct) {
        return struct.get(maxThreadsPerBlock$LAYOUT, maxThreadsPerBlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxThreadsPerBlock
     * }
     */
    public static void maxThreadsPerBlock(MemorySegment struct, int fieldValue) {
        struct.set(maxThreadsPerBlock$LAYOUT, maxThreadsPerBlock$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxThreadsDim$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxThreadsDim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxThreadsDim[3]
     * }
     */
    public static final SequenceLayout maxThreadsDim$layout() {
        return maxThreadsDim$LAYOUT;
    }

    private static final long maxThreadsDim$OFFSET = 324;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxThreadsDim[3]
     * }
     */
    public static final long maxThreadsDim$offset() {
        return maxThreadsDim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxThreadsDim[3]
     * }
     */
    public static MemorySegment maxThreadsDim(MemorySegment struct) {
        return struct.asSlice(maxThreadsDim$OFFSET, maxThreadsDim$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxThreadsDim[3]
     * }
     */
    public static void maxThreadsDim(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxThreadsDim$OFFSET, maxThreadsDim$LAYOUT.byteSize());
    }

    private static long[] maxThreadsDim$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxThreadsDim[3]
     * }
     */
    public static long[] maxThreadsDim$dimensions() {
        return maxThreadsDim$DIMS;
    }
    private static final VarHandle maxThreadsDim$ELEM_HANDLE = maxThreadsDim$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxThreadsDim[3]
     * }
     */
    public static int maxThreadsDim(MemorySegment struct, long index0) {
        return (int)maxThreadsDim$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxThreadsDim[3]
     * }
     */
    public static void maxThreadsDim(MemorySegment struct, long index0, int fieldValue) {
        maxThreadsDim$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxGridSize$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxGridSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxGridSize[3]
     * }
     */
    public static final SequenceLayout maxGridSize$layout() {
        return maxGridSize$LAYOUT;
    }

    private static final long maxGridSize$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxGridSize[3]
     * }
     */
    public static final long maxGridSize$offset() {
        return maxGridSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxGridSize[3]
     * }
     */
    public static MemorySegment maxGridSize(MemorySegment struct) {
        return struct.asSlice(maxGridSize$OFFSET, maxGridSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxGridSize[3]
     * }
     */
    public static void maxGridSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxGridSize$OFFSET, maxGridSize$LAYOUT.byteSize());
    }

    private static long[] maxGridSize$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxGridSize[3]
     * }
     */
    public static long[] maxGridSize$dimensions() {
        return maxGridSize$DIMS;
    }
    private static final VarHandle maxGridSize$ELEM_HANDLE = maxGridSize$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxGridSize[3]
     * }
     */
    public static int maxGridSize(MemorySegment struct, long index0) {
        return (int)maxGridSize$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxGridSize[3]
     * }
     */
    public static void maxGridSize(MemorySegment struct, long index0, int fieldValue) {
        maxGridSize$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt clockRate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clockRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int clockRate
     * }
     */
    public static final OfInt clockRate$layout() {
        return clockRate$LAYOUT;
    }

    private static final long clockRate$OFFSET = 348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int clockRate
     * }
     */
    public static final long clockRate$offset() {
        return clockRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int clockRate
     * }
     */
    public static int clockRate(MemorySegment struct) {
        return struct.get(clockRate$LAYOUT, clockRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int clockRate
     * }
     */
    public static void clockRate(MemorySegment struct, int fieldValue) {
        struct.set(clockRate$LAYOUT, clockRate$OFFSET, fieldValue);
    }

    private static final OfLong totalConstMem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("totalConstMem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t totalConstMem
     * }
     */
    public static final OfLong totalConstMem$layout() {
        return totalConstMem$LAYOUT;
    }

    private static final long totalConstMem$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t totalConstMem
     * }
     */
    public static final long totalConstMem$offset() {
        return totalConstMem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t totalConstMem
     * }
     */
    public static long totalConstMem(MemorySegment struct) {
        return struct.get(totalConstMem$LAYOUT, totalConstMem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t totalConstMem
     * }
     */
    public static void totalConstMem(MemorySegment struct, long fieldValue) {
        struct.set(totalConstMem$LAYOUT, totalConstMem$OFFSET, fieldValue);
    }

    private static final OfInt major$LAYOUT = (OfInt)$LAYOUT.select(groupElement("major"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static final OfInt major$layout() {
        return major$LAYOUT;
    }

    private static final long major$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static final long major$offset() {
        return major$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static int major(MemorySegment struct) {
        return struct.get(major$LAYOUT, major$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static void major(MemorySegment struct, int fieldValue) {
        struct.set(major$LAYOUT, major$OFFSET, fieldValue);
    }

    private static final OfInt minor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static final OfInt minor$layout() {
        return minor$LAYOUT;
    }

    private static final long minor$OFFSET = 364;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static final long minor$offset() {
        return minor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static int minor(MemorySegment struct) {
        return struct.get(minor$LAYOUT, minor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static void minor(MemorySegment struct, int fieldValue) {
        struct.set(minor$LAYOUT, minor$OFFSET, fieldValue);
    }

    private static final OfLong textureAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("textureAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t textureAlignment
     * }
     */
    public static final OfLong textureAlignment$layout() {
        return textureAlignment$LAYOUT;
    }

    private static final long textureAlignment$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t textureAlignment
     * }
     */
    public static final long textureAlignment$offset() {
        return textureAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t textureAlignment
     * }
     */
    public static long textureAlignment(MemorySegment struct) {
        return struct.get(textureAlignment$LAYOUT, textureAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t textureAlignment
     * }
     */
    public static void textureAlignment(MemorySegment struct, long fieldValue) {
        struct.set(textureAlignment$LAYOUT, textureAlignment$OFFSET, fieldValue);
    }

    private static final OfLong texturePitchAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("texturePitchAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t texturePitchAlignment
     * }
     */
    public static final OfLong texturePitchAlignment$layout() {
        return texturePitchAlignment$LAYOUT;
    }

    private static final long texturePitchAlignment$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t texturePitchAlignment
     * }
     */
    public static final long texturePitchAlignment$offset() {
        return texturePitchAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t texturePitchAlignment
     * }
     */
    public static long texturePitchAlignment(MemorySegment struct) {
        return struct.get(texturePitchAlignment$LAYOUT, texturePitchAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t texturePitchAlignment
     * }
     */
    public static void texturePitchAlignment(MemorySegment struct, long fieldValue) {
        struct.set(texturePitchAlignment$LAYOUT, texturePitchAlignment$OFFSET, fieldValue);
    }

    private static final OfInt deviceOverlap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deviceOverlap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int deviceOverlap
     * }
     */
    public static final OfInt deviceOverlap$layout() {
        return deviceOverlap$LAYOUT;
    }

    private static final long deviceOverlap$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int deviceOverlap
     * }
     */
    public static final long deviceOverlap$offset() {
        return deviceOverlap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int deviceOverlap
     * }
     */
    public static int deviceOverlap(MemorySegment struct) {
        return struct.get(deviceOverlap$LAYOUT, deviceOverlap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int deviceOverlap
     * }
     */
    public static void deviceOverlap(MemorySegment struct, int fieldValue) {
        struct.set(deviceOverlap$LAYOUT, deviceOverlap$OFFSET, fieldValue);
    }

    private static final OfInt multiProcessorCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiProcessorCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int multiProcessorCount
     * }
     */
    public static final OfInt multiProcessorCount$layout() {
        return multiProcessorCount$LAYOUT;
    }

    private static final long multiProcessorCount$OFFSET = 388;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int multiProcessorCount
     * }
     */
    public static final long multiProcessorCount$offset() {
        return multiProcessorCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int multiProcessorCount
     * }
     */
    public static int multiProcessorCount(MemorySegment struct) {
        return struct.get(multiProcessorCount$LAYOUT, multiProcessorCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int multiProcessorCount
     * }
     */
    public static void multiProcessorCount(MemorySegment struct, int fieldValue) {
        struct.set(multiProcessorCount$LAYOUT, multiProcessorCount$OFFSET, fieldValue);
    }

    private static final OfInt kernelExecTimeoutEnabled$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kernelExecTimeoutEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int kernelExecTimeoutEnabled
     * }
     */
    public static final OfInt kernelExecTimeoutEnabled$layout() {
        return kernelExecTimeoutEnabled$LAYOUT;
    }

    private static final long kernelExecTimeoutEnabled$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int kernelExecTimeoutEnabled
     * }
     */
    public static final long kernelExecTimeoutEnabled$offset() {
        return kernelExecTimeoutEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int kernelExecTimeoutEnabled
     * }
     */
    public static int kernelExecTimeoutEnabled(MemorySegment struct) {
        return struct.get(kernelExecTimeoutEnabled$LAYOUT, kernelExecTimeoutEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int kernelExecTimeoutEnabled
     * }
     */
    public static void kernelExecTimeoutEnabled(MemorySegment struct, int fieldValue) {
        struct.set(kernelExecTimeoutEnabled$LAYOUT, kernelExecTimeoutEnabled$OFFSET, fieldValue);
    }

    private static final OfInt integrated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("integrated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int integrated
     * }
     */
    public static final OfInt integrated$layout() {
        return integrated$LAYOUT;
    }

    private static final long integrated$OFFSET = 396;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int integrated
     * }
     */
    public static final long integrated$offset() {
        return integrated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int integrated
     * }
     */
    public static int integrated(MemorySegment struct) {
        return struct.get(integrated$LAYOUT, integrated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int integrated
     * }
     */
    public static void integrated(MemorySegment struct, int fieldValue) {
        struct.set(integrated$LAYOUT, integrated$OFFSET, fieldValue);
    }

    private static final OfInt canMapHostMemory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("canMapHostMemory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int canMapHostMemory
     * }
     */
    public static final OfInt canMapHostMemory$layout() {
        return canMapHostMemory$LAYOUT;
    }

    private static final long canMapHostMemory$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int canMapHostMemory
     * }
     */
    public static final long canMapHostMemory$offset() {
        return canMapHostMemory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int canMapHostMemory
     * }
     */
    public static int canMapHostMemory(MemorySegment struct) {
        return struct.get(canMapHostMemory$LAYOUT, canMapHostMemory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int canMapHostMemory
     * }
     */
    public static void canMapHostMemory(MemorySegment struct, int fieldValue) {
        struct.set(canMapHostMemory$LAYOUT, canMapHostMemory$OFFSET, fieldValue);
    }

    private static final OfInt computeMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("computeMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int computeMode
     * }
     */
    public static final OfInt computeMode$layout() {
        return computeMode$LAYOUT;
    }

    private static final long computeMode$OFFSET = 404;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int computeMode
     * }
     */
    public static final long computeMode$offset() {
        return computeMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int computeMode
     * }
     */
    public static int computeMode(MemorySegment struct) {
        return struct.get(computeMode$LAYOUT, computeMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int computeMode
     * }
     */
    public static void computeMode(MemorySegment struct, int fieldValue) {
        struct.set(computeMode$LAYOUT, computeMode$OFFSET, fieldValue);
    }

    private static final OfInt maxTexture1D$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTexture1D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture1D
     * }
     */
    public static final OfInt maxTexture1D$layout() {
        return maxTexture1D$LAYOUT;
    }

    private static final long maxTexture1D$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture1D
     * }
     */
    public static final long maxTexture1D$offset() {
        return maxTexture1D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture1D
     * }
     */
    public static int maxTexture1D(MemorySegment struct) {
        return struct.get(maxTexture1D$LAYOUT, maxTexture1D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture1D
     * }
     */
    public static void maxTexture1D(MemorySegment struct, int fieldValue) {
        struct.set(maxTexture1D$LAYOUT, maxTexture1D$OFFSET, fieldValue);
    }

    private static final OfInt maxTexture1DMipmap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTexture1DMipmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture1DMipmap
     * }
     */
    public static final OfInt maxTexture1DMipmap$layout() {
        return maxTexture1DMipmap$LAYOUT;
    }

    private static final long maxTexture1DMipmap$OFFSET = 412;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture1DMipmap
     * }
     */
    public static final long maxTexture1DMipmap$offset() {
        return maxTexture1DMipmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture1DMipmap
     * }
     */
    public static int maxTexture1DMipmap(MemorySegment struct) {
        return struct.get(maxTexture1DMipmap$LAYOUT, maxTexture1DMipmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture1DMipmap
     * }
     */
    public static void maxTexture1DMipmap(MemorySegment struct, int fieldValue) {
        struct.set(maxTexture1DMipmap$LAYOUT, maxTexture1DMipmap$OFFSET, fieldValue);
    }

    private static final OfInt maxTexture1DLinear$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTexture1DLinear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture1DLinear
     * }
     */
    public static final OfInt maxTexture1DLinear$layout() {
        return maxTexture1DLinear$LAYOUT;
    }

    private static final long maxTexture1DLinear$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture1DLinear
     * }
     */
    public static final long maxTexture1DLinear$offset() {
        return maxTexture1DLinear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture1DLinear
     * }
     */
    public static int maxTexture1DLinear(MemorySegment struct) {
        return struct.get(maxTexture1DLinear$LAYOUT, maxTexture1DLinear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture1DLinear
     * }
     */
    public static void maxTexture1DLinear(MemorySegment struct, int fieldValue) {
        struct.set(maxTexture1DLinear$LAYOUT, maxTexture1DLinear$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxTexture2D$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture2D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture2D[2]
     * }
     */
    public static final SequenceLayout maxTexture2D$layout() {
        return maxTexture2D$LAYOUT;
    }

    private static final long maxTexture2D$OFFSET = 420;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture2D[2]
     * }
     */
    public static final long maxTexture2D$offset() {
        return maxTexture2D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture2D[2]
     * }
     */
    public static MemorySegment maxTexture2D(MemorySegment struct) {
        return struct.asSlice(maxTexture2D$OFFSET, maxTexture2D$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture2D[2]
     * }
     */
    public static void maxTexture2D(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture2D$OFFSET, maxTexture2D$LAYOUT.byteSize());
    }

    private static long[] maxTexture2D$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture2D[2]
     * }
     */
    public static long[] maxTexture2D$dimensions() {
        return maxTexture2D$DIMS;
    }
    private static final VarHandle maxTexture2D$ELEM_HANDLE = maxTexture2D$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture2D[2]
     * }
     */
    public static int maxTexture2D(MemorySegment struct, long index0) {
        return (int)maxTexture2D$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture2D[2]
     * }
     */
    public static void maxTexture2D(MemorySegment struct, long index0, int fieldValue) {
        maxTexture2D$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxTexture2DMipmap$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture2DMipmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture2DMipmap[2]
     * }
     */
    public static final SequenceLayout maxTexture2DMipmap$layout() {
        return maxTexture2DMipmap$LAYOUT;
    }

    private static final long maxTexture2DMipmap$OFFSET = 428;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture2DMipmap[2]
     * }
     */
    public static final long maxTexture2DMipmap$offset() {
        return maxTexture2DMipmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture2DMipmap[2]
     * }
     */
    public static MemorySegment maxTexture2DMipmap(MemorySegment struct) {
        return struct.asSlice(maxTexture2DMipmap$OFFSET, maxTexture2DMipmap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture2DMipmap[2]
     * }
     */
    public static void maxTexture2DMipmap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture2DMipmap$OFFSET, maxTexture2DMipmap$LAYOUT.byteSize());
    }

    private static long[] maxTexture2DMipmap$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture2DMipmap[2]
     * }
     */
    public static long[] maxTexture2DMipmap$dimensions() {
        return maxTexture2DMipmap$DIMS;
    }
    private static final VarHandle maxTexture2DMipmap$ELEM_HANDLE = maxTexture2DMipmap$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture2DMipmap[2]
     * }
     */
    public static int maxTexture2DMipmap(MemorySegment struct, long index0) {
        return (int)maxTexture2DMipmap$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture2DMipmap[2]
     * }
     */
    public static void maxTexture2DMipmap(MemorySegment struct, long index0, int fieldValue) {
        maxTexture2DMipmap$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxTexture2DLinear$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture2DLinear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture2DLinear[3]
     * }
     */
    public static final SequenceLayout maxTexture2DLinear$layout() {
        return maxTexture2DLinear$LAYOUT;
    }

    private static final long maxTexture2DLinear$OFFSET = 436;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture2DLinear[3]
     * }
     */
    public static final long maxTexture2DLinear$offset() {
        return maxTexture2DLinear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture2DLinear[3]
     * }
     */
    public static MemorySegment maxTexture2DLinear(MemorySegment struct) {
        return struct.asSlice(maxTexture2DLinear$OFFSET, maxTexture2DLinear$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture2DLinear[3]
     * }
     */
    public static void maxTexture2DLinear(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture2DLinear$OFFSET, maxTexture2DLinear$LAYOUT.byteSize());
    }

    private static long[] maxTexture2DLinear$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture2DLinear[3]
     * }
     */
    public static long[] maxTexture2DLinear$dimensions() {
        return maxTexture2DLinear$DIMS;
    }
    private static final VarHandle maxTexture2DLinear$ELEM_HANDLE = maxTexture2DLinear$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture2DLinear[3]
     * }
     */
    public static int maxTexture2DLinear(MemorySegment struct, long index0) {
        return (int)maxTexture2DLinear$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture2DLinear[3]
     * }
     */
    public static void maxTexture2DLinear(MemorySegment struct, long index0, int fieldValue) {
        maxTexture2DLinear$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxTexture2DGather$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture2DGather"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture2DGather[2]
     * }
     */
    public static final SequenceLayout maxTexture2DGather$layout() {
        return maxTexture2DGather$LAYOUT;
    }

    private static final long maxTexture2DGather$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture2DGather[2]
     * }
     */
    public static final long maxTexture2DGather$offset() {
        return maxTexture2DGather$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture2DGather[2]
     * }
     */
    public static MemorySegment maxTexture2DGather(MemorySegment struct) {
        return struct.asSlice(maxTexture2DGather$OFFSET, maxTexture2DGather$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture2DGather[2]
     * }
     */
    public static void maxTexture2DGather(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture2DGather$OFFSET, maxTexture2DGather$LAYOUT.byteSize());
    }

    private static long[] maxTexture2DGather$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture2DGather[2]
     * }
     */
    public static long[] maxTexture2DGather$dimensions() {
        return maxTexture2DGather$DIMS;
    }
    private static final VarHandle maxTexture2DGather$ELEM_HANDLE = maxTexture2DGather$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture2DGather[2]
     * }
     */
    public static int maxTexture2DGather(MemorySegment struct, long index0) {
        return (int)maxTexture2DGather$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture2DGather[2]
     * }
     */
    public static void maxTexture2DGather(MemorySegment struct, long index0, int fieldValue) {
        maxTexture2DGather$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxTexture3D$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture3D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture3D[3]
     * }
     */
    public static final SequenceLayout maxTexture3D$layout() {
        return maxTexture3D$LAYOUT;
    }

    private static final long maxTexture3D$OFFSET = 456;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture3D[3]
     * }
     */
    public static final long maxTexture3D$offset() {
        return maxTexture3D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture3D[3]
     * }
     */
    public static MemorySegment maxTexture3D(MemorySegment struct) {
        return struct.asSlice(maxTexture3D$OFFSET, maxTexture3D$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture3D[3]
     * }
     */
    public static void maxTexture3D(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture3D$OFFSET, maxTexture3D$LAYOUT.byteSize());
    }

    private static long[] maxTexture3D$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture3D[3]
     * }
     */
    public static long[] maxTexture3D$dimensions() {
        return maxTexture3D$DIMS;
    }
    private static final VarHandle maxTexture3D$ELEM_HANDLE = maxTexture3D$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture3D[3]
     * }
     */
    public static int maxTexture3D(MemorySegment struct, long index0) {
        return (int)maxTexture3D$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture3D[3]
     * }
     */
    public static void maxTexture3D(MemorySegment struct, long index0, int fieldValue) {
        maxTexture3D$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxTexture3DAlt$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture3DAlt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture3DAlt[3]
     * }
     */
    public static final SequenceLayout maxTexture3DAlt$layout() {
        return maxTexture3DAlt$LAYOUT;
    }

    private static final long maxTexture3DAlt$OFFSET = 468;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture3DAlt[3]
     * }
     */
    public static final long maxTexture3DAlt$offset() {
        return maxTexture3DAlt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture3DAlt[3]
     * }
     */
    public static MemorySegment maxTexture3DAlt(MemorySegment struct) {
        return struct.asSlice(maxTexture3DAlt$OFFSET, maxTexture3DAlt$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture3DAlt[3]
     * }
     */
    public static void maxTexture3DAlt(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture3DAlt$OFFSET, maxTexture3DAlt$LAYOUT.byteSize());
    }

    private static long[] maxTexture3DAlt$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture3DAlt[3]
     * }
     */
    public static long[] maxTexture3DAlt$dimensions() {
        return maxTexture3DAlt$DIMS;
    }
    private static final VarHandle maxTexture3DAlt$ELEM_HANDLE = maxTexture3DAlt$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture3DAlt[3]
     * }
     */
    public static int maxTexture3DAlt(MemorySegment struct, long index0) {
        return (int)maxTexture3DAlt$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture3DAlt[3]
     * }
     */
    public static void maxTexture3DAlt(MemorySegment struct, long index0, int fieldValue) {
        maxTexture3DAlt$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxTextureCubemap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTextureCubemap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTextureCubemap
     * }
     */
    public static final OfInt maxTextureCubemap$layout() {
        return maxTextureCubemap$LAYOUT;
    }

    private static final long maxTextureCubemap$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTextureCubemap
     * }
     */
    public static final long maxTextureCubemap$offset() {
        return maxTextureCubemap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTextureCubemap
     * }
     */
    public static int maxTextureCubemap(MemorySegment struct) {
        return struct.get(maxTextureCubemap$LAYOUT, maxTextureCubemap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTextureCubemap
     * }
     */
    public static void maxTextureCubemap(MemorySegment struct, int fieldValue) {
        struct.set(maxTextureCubemap$LAYOUT, maxTextureCubemap$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxTexture1DLayered$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture1DLayered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture1DLayered[2]
     * }
     */
    public static final SequenceLayout maxTexture1DLayered$layout() {
        return maxTexture1DLayered$LAYOUT;
    }

    private static final long maxTexture1DLayered$OFFSET = 484;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture1DLayered[2]
     * }
     */
    public static final long maxTexture1DLayered$offset() {
        return maxTexture1DLayered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture1DLayered[2]
     * }
     */
    public static MemorySegment maxTexture1DLayered(MemorySegment struct) {
        return struct.asSlice(maxTexture1DLayered$OFFSET, maxTexture1DLayered$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture1DLayered[2]
     * }
     */
    public static void maxTexture1DLayered(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture1DLayered$OFFSET, maxTexture1DLayered$LAYOUT.byteSize());
    }

    private static long[] maxTexture1DLayered$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture1DLayered[2]
     * }
     */
    public static long[] maxTexture1DLayered$dimensions() {
        return maxTexture1DLayered$DIMS;
    }
    private static final VarHandle maxTexture1DLayered$ELEM_HANDLE = maxTexture1DLayered$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture1DLayered[2]
     * }
     */
    public static int maxTexture1DLayered(MemorySegment struct, long index0) {
        return (int)maxTexture1DLayered$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture1DLayered[2]
     * }
     */
    public static void maxTexture1DLayered(MemorySegment struct, long index0, int fieldValue) {
        maxTexture1DLayered$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxTexture2DLayered$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTexture2DLayered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTexture2DLayered[3]
     * }
     */
    public static final SequenceLayout maxTexture2DLayered$layout() {
        return maxTexture2DLayered$LAYOUT;
    }

    private static final long maxTexture2DLayered$OFFSET = 492;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTexture2DLayered[3]
     * }
     */
    public static final long maxTexture2DLayered$offset() {
        return maxTexture2DLayered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTexture2DLayered[3]
     * }
     */
    public static MemorySegment maxTexture2DLayered(MemorySegment struct) {
        return struct.asSlice(maxTexture2DLayered$OFFSET, maxTexture2DLayered$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTexture2DLayered[3]
     * }
     */
    public static void maxTexture2DLayered(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTexture2DLayered$OFFSET, maxTexture2DLayered$LAYOUT.byteSize());
    }

    private static long[] maxTexture2DLayered$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTexture2DLayered[3]
     * }
     */
    public static long[] maxTexture2DLayered$dimensions() {
        return maxTexture2DLayered$DIMS;
    }
    private static final VarHandle maxTexture2DLayered$ELEM_HANDLE = maxTexture2DLayered$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTexture2DLayered[3]
     * }
     */
    public static int maxTexture2DLayered(MemorySegment struct, long index0) {
        return (int)maxTexture2DLayered$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTexture2DLayered[3]
     * }
     */
    public static void maxTexture2DLayered(MemorySegment struct, long index0, int fieldValue) {
        maxTexture2DLayered$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxTextureCubemapLayered$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTextureCubemapLayered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxTextureCubemapLayered[2]
     * }
     */
    public static final SequenceLayout maxTextureCubemapLayered$layout() {
        return maxTextureCubemapLayered$LAYOUT;
    }

    private static final long maxTextureCubemapLayered$OFFSET = 504;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxTextureCubemapLayered[2]
     * }
     */
    public static final long maxTextureCubemapLayered$offset() {
        return maxTextureCubemapLayered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxTextureCubemapLayered[2]
     * }
     */
    public static MemorySegment maxTextureCubemapLayered(MemorySegment struct) {
        return struct.asSlice(maxTextureCubemapLayered$OFFSET, maxTextureCubemapLayered$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxTextureCubemapLayered[2]
     * }
     */
    public static void maxTextureCubemapLayered(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTextureCubemapLayered$OFFSET, maxTextureCubemapLayered$LAYOUT.byteSize());
    }

    private static long[] maxTextureCubemapLayered$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxTextureCubemapLayered[2]
     * }
     */
    public static long[] maxTextureCubemapLayered$dimensions() {
        return maxTextureCubemapLayered$DIMS;
    }
    private static final VarHandle maxTextureCubemapLayered$ELEM_HANDLE = maxTextureCubemapLayered$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxTextureCubemapLayered[2]
     * }
     */
    public static int maxTextureCubemapLayered(MemorySegment struct, long index0) {
        return (int)maxTextureCubemapLayered$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxTextureCubemapLayered[2]
     * }
     */
    public static void maxTextureCubemapLayered(MemorySegment struct, long index0, int fieldValue) {
        maxTextureCubemapLayered$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxSurface1D$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxSurface1D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxSurface1D
     * }
     */
    public static final OfInt maxSurface1D$layout() {
        return maxSurface1D$LAYOUT;
    }

    private static final long maxSurface1D$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxSurface1D
     * }
     */
    public static final long maxSurface1D$offset() {
        return maxSurface1D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxSurface1D
     * }
     */
    public static int maxSurface1D(MemorySegment struct) {
        return struct.get(maxSurface1D$LAYOUT, maxSurface1D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxSurface1D
     * }
     */
    public static void maxSurface1D(MemorySegment struct, int fieldValue) {
        struct.set(maxSurface1D$LAYOUT, maxSurface1D$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxSurface2D$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxSurface2D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxSurface2D[2]
     * }
     */
    public static final SequenceLayout maxSurface2D$layout() {
        return maxSurface2D$LAYOUT;
    }

    private static final long maxSurface2D$OFFSET = 516;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxSurface2D[2]
     * }
     */
    public static final long maxSurface2D$offset() {
        return maxSurface2D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxSurface2D[2]
     * }
     */
    public static MemorySegment maxSurface2D(MemorySegment struct) {
        return struct.asSlice(maxSurface2D$OFFSET, maxSurface2D$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxSurface2D[2]
     * }
     */
    public static void maxSurface2D(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSurface2D$OFFSET, maxSurface2D$LAYOUT.byteSize());
    }

    private static long[] maxSurface2D$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxSurface2D[2]
     * }
     */
    public static long[] maxSurface2D$dimensions() {
        return maxSurface2D$DIMS;
    }
    private static final VarHandle maxSurface2D$ELEM_HANDLE = maxSurface2D$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxSurface2D[2]
     * }
     */
    public static int maxSurface2D(MemorySegment struct, long index0) {
        return (int)maxSurface2D$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxSurface2D[2]
     * }
     */
    public static void maxSurface2D(MemorySegment struct, long index0, int fieldValue) {
        maxSurface2D$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxSurface3D$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxSurface3D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxSurface3D[3]
     * }
     */
    public static final SequenceLayout maxSurface3D$layout() {
        return maxSurface3D$LAYOUT;
    }

    private static final long maxSurface3D$OFFSET = 524;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxSurface3D[3]
     * }
     */
    public static final long maxSurface3D$offset() {
        return maxSurface3D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxSurface3D[3]
     * }
     */
    public static MemorySegment maxSurface3D(MemorySegment struct) {
        return struct.asSlice(maxSurface3D$OFFSET, maxSurface3D$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxSurface3D[3]
     * }
     */
    public static void maxSurface3D(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSurface3D$OFFSET, maxSurface3D$LAYOUT.byteSize());
    }

    private static long[] maxSurface3D$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxSurface3D[3]
     * }
     */
    public static long[] maxSurface3D$dimensions() {
        return maxSurface3D$DIMS;
    }
    private static final VarHandle maxSurface3D$ELEM_HANDLE = maxSurface3D$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxSurface3D[3]
     * }
     */
    public static int maxSurface3D(MemorySegment struct, long index0) {
        return (int)maxSurface3D$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxSurface3D[3]
     * }
     */
    public static void maxSurface3D(MemorySegment struct, long index0, int fieldValue) {
        maxSurface3D$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxSurface1DLayered$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxSurface1DLayered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxSurface1DLayered[2]
     * }
     */
    public static final SequenceLayout maxSurface1DLayered$layout() {
        return maxSurface1DLayered$LAYOUT;
    }

    private static final long maxSurface1DLayered$OFFSET = 536;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxSurface1DLayered[2]
     * }
     */
    public static final long maxSurface1DLayered$offset() {
        return maxSurface1DLayered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxSurface1DLayered[2]
     * }
     */
    public static MemorySegment maxSurface1DLayered(MemorySegment struct) {
        return struct.asSlice(maxSurface1DLayered$OFFSET, maxSurface1DLayered$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxSurface1DLayered[2]
     * }
     */
    public static void maxSurface1DLayered(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSurface1DLayered$OFFSET, maxSurface1DLayered$LAYOUT.byteSize());
    }

    private static long[] maxSurface1DLayered$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxSurface1DLayered[2]
     * }
     */
    public static long[] maxSurface1DLayered$dimensions() {
        return maxSurface1DLayered$DIMS;
    }
    private static final VarHandle maxSurface1DLayered$ELEM_HANDLE = maxSurface1DLayered$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxSurface1DLayered[2]
     * }
     */
    public static int maxSurface1DLayered(MemorySegment struct, long index0) {
        return (int)maxSurface1DLayered$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxSurface1DLayered[2]
     * }
     */
    public static void maxSurface1DLayered(MemorySegment struct, long index0, int fieldValue) {
        maxSurface1DLayered$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout maxSurface2DLayered$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxSurface2DLayered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxSurface2DLayered[3]
     * }
     */
    public static final SequenceLayout maxSurface2DLayered$layout() {
        return maxSurface2DLayered$LAYOUT;
    }

    private static final long maxSurface2DLayered$OFFSET = 544;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxSurface2DLayered[3]
     * }
     */
    public static final long maxSurface2DLayered$offset() {
        return maxSurface2DLayered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxSurface2DLayered[3]
     * }
     */
    public static MemorySegment maxSurface2DLayered(MemorySegment struct) {
        return struct.asSlice(maxSurface2DLayered$OFFSET, maxSurface2DLayered$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxSurface2DLayered[3]
     * }
     */
    public static void maxSurface2DLayered(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSurface2DLayered$OFFSET, maxSurface2DLayered$LAYOUT.byteSize());
    }

    private static long[] maxSurface2DLayered$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxSurface2DLayered[3]
     * }
     */
    public static long[] maxSurface2DLayered$dimensions() {
        return maxSurface2DLayered$DIMS;
    }
    private static final VarHandle maxSurface2DLayered$ELEM_HANDLE = maxSurface2DLayered$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxSurface2DLayered[3]
     * }
     */
    public static int maxSurface2DLayered(MemorySegment struct, long index0) {
        return (int)maxSurface2DLayered$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxSurface2DLayered[3]
     * }
     */
    public static void maxSurface2DLayered(MemorySegment struct, long index0, int fieldValue) {
        maxSurface2DLayered$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxSurfaceCubemap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxSurfaceCubemap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemap
     * }
     */
    public static final OfInt maxSurfaceCubemap$layout() {
        return maxSurfaceCubemap$LAYOUT;
    }

    private static final long maxSurfaceCubemap$OFFSET = 556;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemap
     * }
     */
    public static final long maxSurfaceCubemap$offset() {
        return maxSurfaceCubemap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemap
     * }
     */
    public static int maxSurfaceCubemap(MemorySegment struct) {
        return struct.get(maxSurfaceCubemap$LAYOUT, maxSurfaceCubemap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemap
     * }
     */
    public static void maxSurfaceCubemap(MemorySegment struct, int fieldValue) {
        struct.set(maxSurfaceCubemap$LAYOUT, maxSurfaceCubemap$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxSurfaceCubemapLayered$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxSurfaceCubemapLayered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemapLayered[2]
     * }
     */
    public static final SequenceLayout maxSurfaceCubemapLayered$layout() {
        return maxSurfaceCubemapLayered$LAYOUT;
    }

    private static final long maxSurfaceCubemapLayered$OFFSET = 560;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemapLayered[2]
     * }
     */
    public static final long maxSurfaceCubemapLayered$offset() {
        return maxSurfaceCubemapLayered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemapLayered[2]
     * }
     */
    public static MemorySegment maxSurfaceCubemapLayered(MemorySegment struct) {
        return struct.asSlice(maxSurfaceCubemapLayered$OFFSET, maxSurfaceCubemapLayered$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemapLayered[2]
     * }
     */
    public static void maxSurfaceCubemapLayered(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSurfaceCubemapLayered$OFFSET, maxSurfaceCubemapLayered$LAYOUT.byteSize());
    }

    private static long[] maxSurfaceCubemapLayered$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int maxSurfaceCubemapLayered[2]
     * }
     */
    public static long[] maxSurfaceCubemapLayered$dimensions() {
        return maxSurfaceCubemapLayered$DIMS;
    }
    private static final VarHandle maxSurfaceCubemapLayered$ELEM_HANDLE = maxSurfaceCubemapLayered$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemapLayered[2]
     * }
     */
    public static int maxSurfaceCubemapLayered(MemorySegment struct, long index0) {
        return (int)maxSurfaceCubemapLayered$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int maxSurfaceCubemapLayered[2]
     * }
     */
    public static void maxSurfaceCubemapLayered(MemorySegment struct, long index0, int fieldValue) {
        maxSurfaceCubemapLayered$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong surfaceAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("surfaceAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t surfaceAlignment
     * }
     */
    public static final OfLong surfaceAlignment$layout() {
        return surfaceAlignment$LAYOUT;
    }

    private static final long surfaceAlignment$OFFSET = 568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t surfaceAlignment
     * }
     */
    public static final long surfaceAlignment$offset() {
        return surfaceAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t surfaceAlignment
     * }
     */
    public static long surfaceAlignment(MemorySegment struct) {
        return struct.get(surfaceAlignment$LAYOUT, surfaceAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t surfaceAlignment
     * }
     */
    public static void surfaceAlignment(MemorySegment struct, long fieldValue) {
        struct.set(surfaceAlignment$LAYOUT, surfaceAlignment$OFFSET, fieldValue);
    }

    private static final OfInt concurrentKernels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("concurrentKernels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int concurrentKernels
     * }
     */
    public static final OfInt concurrentKernels$layout() {
        return concurrentKernels$LAYOUT;
    }

    private static final long concurrentKernels$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int concurrentKernels
     * }
     */
    public static final long concurrentKernels$offset() {
        return concurrentKernels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int concurrentKernels
     * }
     */
    public static int concurrentKernels(MemorySegment struct) {
        return struct.get(concurrentKernels$LAYOUT, concurrentKernels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int concurrentKernels
     * }
     */
    public static void concurrentKernels(MemorySegment struct, int fieldValue) {
        struct.set(concurrentKernels$LAYOUT, concurrentKernels$OFFSET, fieldValue);
    }

    private static final OfInt ECCEnabled$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ECCEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ECCEnabled
     * }
     */
    public static final OfInt ECCEnabled$layout() {
        return ECCEnabled$LAYOUT;
    }

    private static final long ECCEnabled$OFFSET = 580;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ECCEnabled
     * }
     */
    public static final long ECCEnabled$offset() {
        return ECCEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ECCEnabled
     * }
     */
    public static int ECCEnabled(MemorySegment struct) {
        return struct.get(ECCEnabled$LAYOUT, ECCEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ECCEnabled
     * }
     */
    public static void ECCEnabled(MemorySegment struct, int fieldValue) {
        struct.set(ECCEnabled$LAYOUT, ECCEnabled$OFFSET, fieldValue);
    }

    private static final OfInt pciBusID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pciBusID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pciBusID
     * }
     */
    public static final OfInt pciBusID$layout() {
        return pciBusID$LAYOUT;
    }

    private static final long pciBusID$OFFSET = 584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pciBusID
     * }
     */
    public static final long pciBusID$offset() {
        return pciBusID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pciBusID
     * }
     */
    public static int pciBusID(MemorySegment struct) {
        return struct.get(pciBusID$LAYOUT, pciBusID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pciBusID
     * }
     */
    public static void pciBusID(MemorySegment struct, int fieldValue) {
        struct.set(pciBusID$LAYOUT, pciBusID$OFFSET, fieldValue);
    }

    private static final OfInt pciDeviceID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pciDeviceID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pciDeviceID
     * }
     */
    public static final OfInt pciDeviceID$layout() {
        return pciDeviceID$LAYOUT;
    }

    private static final long pciDeviceID$OFFSET = 588;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pciDeviceID
     * }
     */
    public static final long pciDeviceID$offset() {
        return pciDeviceID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pciDeviceID
     * }
     */
    public static int pciDeviceID(MemorySegment struct) {
        return struct.get(pciDeviceID$LAYOUT, pciDeviceID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pciDeviceID
     * }
     */
    public static void pciDeviceID(MemorySegment struct, int fieldValue) {
        struct.set(pciDeviceID$LAYOUT, pciDeviceID$OFFSET, fieldValue);
    }

    private static final OfInt pciDomainID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pciDomainID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pciDomainID
     * }
     */
    public static final OfInt pciDomainID$layout() {
        return pciDomainID$LAYOUT;
    }

    private static final long pciDomainID$OFFSET = 592;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pciDomainID
     * }
     */
    public static final long pciDomainID$offset() {
        return pciDomainID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pciDomainID
     * }
     */
    public static int pciDomainID(MemorySegment struct) {
        return struct.get(pciDomainID$LAYOUT, pciDomainID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pciDomainID
     * }
     */
    public static void pciDomainID(MemorySegment struct, int fieldValue) {
        struct.set(pciDomainID$LAYOUT, pciDomainID$OFFSET, fieldValue);
    }

    private static final OfInt tccDriver$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tccDriver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tccDriver
     * }
     */
    public static final OfInt tccDriver$layout() {
        return tccDriver$LAYOUT;
    }

    private static final long tccDriver$OFFSET = 596;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tccDriver
     * }
     */
    public static final long tccDriver$offset() {
        return tccDriver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tccDriver
     * }
     */
    public static int tccDriver(MemorySegment struct) {
        return struct.get(tccDriver$LAYOUT, tccDriver$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tccDriver
     * }
     */
    public static void tccDriver(MemorySegment struct, int fieldValue) {
        struct.set(tccDriver$LAYOUT, tccDriver$OFFSET, fieldValue);
    }

    private static final OfInt asyncEngineCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("asyncEngineCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int asyncEngineCount
     * }
     */
    public static final OfInt asyncEngineCount$layout() {
        return asyncEngineCount$LAYOUT;
    }

    private static final long asyncEngineCount$OFFSET = 600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int asyncEngineCount
     * }
     */
    public static final long asyncEngineCount$offset() {
        return asyncEngineCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int asyncEngineCount
     * }
     */
    public static int asyncEngineCount(MemorySegment struct) {
        return struct.get(asyncEngineCount$LAYOUT, asyncEngineCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int asyncEngineCount
     * }
     */
    public static void asyncEngineCount(MemorySegment struct, int fieldValue) {
        struct.set(asyncEngineCount$LAYOUT, asyncEngineCount$OFFSET, fieldValue);
    }

    private static final OfInt unifiedAddressing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unifiedAddressing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int unifiedAddressing
     * }
     */
    public static final OfInt unifiedAddressing$layout() {
        return unifiedAddressing$LAYOUT;
    }

    private static final long unifiedAddressing$OFFSET = 604;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int unifiedAddressing
     * }
     */
    public static final long unifiedAddressing$offset() {
        return unifiedAddressing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int unifiedAddressing
     * }
     */
    public static int unifiedAddressing(MemorySegment struct) {
        return struct.get(unifiedAddressing$LAYOUT, unifiedAddressing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int unifiedAddressing
     * }
     */
    public static void unifiedAddressing(MemorySegment struct, int fieldValue) {
        struct.set(unifiedAddressing$LAYOUT, unifiedAddressing$OFFSET, fieldValue);
    }

    private static final OfInt memoryClockRate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memoryClockRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int memoryClockRate
     * }
     */
    public static final OfInt memoryClockRate$layout() {
        return memoryClockRate$LAYOUT;
    }

    private static final long memoryClockRate$OFFSET = 608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int memoryClockRate
     * }
     */
    public static final long memoryClockRate$offset() {
        return memoryClockRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int memoryClockRate
     * }
     */
    public static int memoryClockRate(MemorySegment struct) {
        return struct.get(memoryClockRate$LAYOUT, memoryClockRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int memoryClockRate
     * }
     */
    public static void memoryClockRate(MemorySegment struct, int fieldValue) {
        struct.set(memoryClockRate$LAYOUT, memoryClockRate$OFFSET, fieldValue);
    }

    private static final OfInt memoryBusWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memoryBusWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int memoryBusWidth
     * }
     */
    public static final OfInt memoryBusWidth$layout() {
        return memoryBusWidth$LAYOUT;
    }

    private static final long memoryBusWidth$OFFSET = 612;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int memoryBusWidth
     * }
     */
    public static final long memoryBusWidth$offset() {
        return memoryBusWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int memoryBusWidth
     * }
     */
    public static int memoryBusWidth(MemorySegment struct) {
        return struct.get(memoryBusWidth$LAYOUT, memoryBusWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int memoryBusWidth
     * }
     */
    public static void memoryBusWidth(MemorySegment struct, int fieldValue) {
        struct.set(memoryBusWidth$LAYOUT, memoryBusWidth$OFFSET, fieldValue);
    }

    private static final OfInt l2CacheSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("l2CacheSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int l2CacheSize
     * }
     */
    public static final OfInt l2CacheSize$layout() {
        return l2CacheSize$LAYOUT;
    }

    private static final long l2CacheSize$OFFSET = 616;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int l2CacheSize
     * }
     */
    public static final long l2CacheSize$offset() {
        return l2CacheSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int l2CacheSize
     * }
     */
    public static int l2CacheSize(MemorySegment struct) {
        return struct.get(l2CacheSize$LAYOUT, l2CacheSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int l2CacheSize
     * }
     */
    public static void l2CacheSize(MemorySegment struct, int fieldValue) {
        struct.set(l2CacheSize$LAYOUT, l2CacheSize$OFFSET, fieldValue);
    }

    private static final OfInt persistingL2CacheMaxSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("persistingL2CacheMaxSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int persistingL2CacheMaxSize
     * }
     */
    public static final OfInt persistingL2CacheMaxSize$layout() {
        return persistingL2CacheMaxSize$LAYOUT;
    }

    private static final long persistingL2CacheMaxSize$OFFSET = 620;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int persistingL2CacheMaxSize
     * }
     */
    public static final long persistingL2CacheMaxSize$offset() {
        return persistingL2CacheMaxSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int persistingL2CacheMaxSize
     * }
     */
    public static int persistingL2CacheMaxSize(MemorySegment struct) {
        return struct.get(persistingL2CacheMaxSize$LAYOUT, persistingL2CacheMaxSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int persistingL2CacheMaxSize
     * }
     */
    public static void persistingL2CacheMaxSize(MemorySegment struct, int fieldValue) {
        struct.set(persistingL2CacheMaxSize$LAYOUT, persistingL2CacheMaxSize$OFFSET, fieldValue);
    }

    private static final OfInt maxThreadsPerMultiProcessor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxThreadsPerMultiProcessor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxThreadsPerMultiProcessor
     * }
     */
    public static final OfInt maxThreadsPerMultiProcessor$layout() {
        return maxThreadsPerMultiProcessor$LAYOUT;
    }

    private static final long maxThreadsPerMultiProcessor$OFFSET = 624;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxThreadsPerMultiProcessor
     * }
     */
    public static final long maxThreadsPerMultiProcessor$offset() {
        return maxThreadsPerMultiProcessor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxThreadsPerMultiProcessor
     * }
     */
    public static int maxThreadsPerMultiProcessor(MemorySegment struct) {
        return struct.get(maxThreadsPerMultiProcessor$LAYOUT, maxThreadsPerMultiProcessor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxThreadsPerMultiProcessor
     * }
     */
    public static void maxThreadsPerMultiProcessor(MemorySegment struct, int fieldValue) {
        struct.set(maxThreadsPerMultiProcessor$LAYOUT, maxThreadsPerMultiProcessor$OFFSET, fieldValue);
    }

    private static final OfInt streamPrioritiesSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("streamPrioritiesSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int streamPrioritiesSupported
     * }
     */
    public static final OfInt streamPrioritiesSupported$layout() {
        return streamPrioritiesSupported$LAYOUT;
    }

    private static final long streamPrioritiesSupported$OFFSET = 628;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int streamPrioritiesSupported
     * }
     */
    public static final long streamPrioritiesSupported$offset() {
        return streamPrioritiesSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int streamPrioritiesSupported
     * }
     */
    public static int streamPrioritiesSupported(MemorySegment struct) {
        return struct.get(streamPrioritiesSupported$LAYOUT, streamPrioritiesSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int streamPrioritiesSupported
     * }
     */
    public static void streamPrioritiesSupported(MemorySegment struct, int fieldValue) {
        struct.set(streamPrioritiesSupported$LAYOUT, streamPrioritiesSupported$OFFSET, fieldValue);
    }

    private static final OfInt globalL1CacheSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("globalL1CacheSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int globalL1CacheSupported
     * }
     */
    public static final OfInt globalL1CacheSupported$layout() {
        return globalL1CacheSupported$LAYOUT;
    }

    private static final long globalL1CacheSupported$OFFSET = 632;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int globalL1CacheSupported
     * }
     */
    public static final long globalL1CacheSupported$offset() {
        return globalL1CacheSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int globalL1CacheSupported
     * }
     */
    public static int globalL1CacheSupported(MemorySegment struct) {
        return struct.get(globalL1CacheSupported$LAYOUT, globalL1CacheSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int globalL1CacheSupported
     * }
     */
    public static void globalL1CacheSupported(MemorySegment struct, int fieldValue) {
        struct.set(globalL1CacheSupported$LAYOUT, globalL1CacheSupported$OFFSET, fieldValue);
    }

    private static final OfInt localL1CacheSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("localL1CacheSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int localL1CacheSupported
     * }
     */
    public static final OfInt localL1CacheSupported$layout() {
        return localL1CacheSupported$LAYOUT;
    }

    private static final long localL1CacheSupported$OFFSET = 636;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int localL1CacheSupported
     * }
     */
    public static final long localL1CacheSupported$offset() {
        return localL1CacheSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int localL1CacheSupported
     * }
     */
    public static int localL1CacheSupported(MemorySegment struct) {
        return struct.get(localL1CacheSupported$LAYOUT, localL1CacheSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int localL1CacheSupported
     * }
     */
    public static void localL1CacheSupported(MemorySegment struct, int fieldValue) {
        struct.set(localL1CacheSupported$LAYOUT, localL1CacheSupported$OFFSET, fieldValue);
    }

    private static final OfLong sharedMemPerMultiprocessor$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sharedMemPerMultiprocessor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t sharedMemPerMultiprocessor
     * }
     */
    public static final OfLong sharedMemPerMultiprocessor$layout() {
        return sharedMemPerMultiprocessor$LAYOUT;
    }

    private static final long sharedMemPerMultiprocessor$OFFSET = 640;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t sharedMemPerMultiprocessor
     * }
     */
    public static final long sharedMemPerMultiprocessor$offset() {
        return sharedMemPerMultiprocessor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t sharedMemPerMultiprocessor
     * }
     */
    public static long sharedMemPerMultiprocessor(MemorySegment struct) {
        return struct.get(sharedMemPerMultiprocessor$LAYOUT, sharedMemPerMultiprocessor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t sharedMemPerMultiprocessor
     * }
     */
    public static void sharedMemPerMultiprocessor(MemorySegment struct, long fieldValue) {
        struct.set(sharedMemPerMultiprocessor$LAYOUT, sharedMemPerMultiprocessor$OFFSET, fieldValue);
    }

    private static final OfInt regsPerMultiprocessor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("regsPerMultiprocessor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int regsPerMultiprocessor
     * }
     */
    public static final OfInt regsPerMultiprocessor$layout() {
        return regsPerMultiprocessor$LAYOUT;
    }

    private static final long regsPerMultiprocessor$OFFSET = 648;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int regsPerMultiprocessor
     * }
     */
    public static final long regsPerMultiprocessor$offset() {
        return regsPerMultiprocessor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int regsPerMultiprocessor
     * }
     */
    public static int regsPerMultiprocessor(MemorySegment struct) {
        return struct.get(regsPerMultiprocessor$LAYOUT, regsPerMultiprocessor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int regsPerMultiprocessor
     * }
     */
    public static void regsPerMultiprocessor(MemorySegment struct, int fieldValue) {
        struct.set(regsPerMultiprocessor$LAYOUT, regsPerMultiprocessor$OFFSET, fieldValue);
    }

    private static final OfInt managedMemory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("managedMemory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int managedMemory
     * }
     */
    public static final OfInt managedMemory$layout() {
        return managedMemory$LAYOUT;
    }

    private static final long managedMemory$OFFSET = 652;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int managedMemory
     * }
     */
    public static final long managedMemory$offset() {
        return managedMemory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int managedMemory
     * }
     */
    public static int managedMemory(MemorySegment struct) {
        return struct.get(managedMemory$LAYOUT, managedMemory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int managedMemory
     * }
     */
    public static void managedMemory(MemorySegment struct, int fieldValue) {
        struct.set(managedMemory$LAYOUT, managedMemory$OFFSET, fieldValue);
    }

    private static final OfInt isMultiGpuBoard$LAYOUT = (OfInt)$LAYOUT.select(groupElement("isMultiGpuBoard"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int isMultiGpuBoard
     * }
     */
    public static final OfInt isMultiGpuBoard$layout() {
        return isMultiGpuBoard$LAYOUT;
    }

    private static final long isMultiGpuBoard$OFFSET = 656;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int isMultiGpuBoard
     * }
     */
    public static final long isMultiGpuBoard$offset() {
        return isMultiGpuBoard$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int isMultiGpuBoard
     * }
     */
    public static int isMultiGpuBoard(MemorySegment struct) {
        return struct.get(isMultiGpuBoard$LAYOUT, isMultiGpuBoard$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int isMultiGpuBoard
     * }
     */
    public static void isMultiGpuBoard(MemorySegment struct, int fieldValue) {
        struct.set(isMultiGpuBoard$LAYOUT, isMultiGpuBoard$OFFSET, fieldValue);
    }

    private static final OfInt multiGpuBoardGroupID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiGpuBoardGroupID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int multiGpuBoardGroupID
     * }
     */
    public static final OfInt multiGpuBoardGroupID$layout() {
        return multiGpuBoardGroupID$LAYOUT;
    }

    private static final long multiGpuBoardGroupID$OFFSET = 660;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int multiGpuBoardGroupID
     * }
     */
    public static final long multiGpuBoardGroupID$offset() {
        return multiGpuBoardGroupID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int multiGpuBoardGroupID
     * }
     */
    public static int multiGpuBoardGroupID(MemorySegment struct) {
        return struct.get(multiGpuBoardGroupID$LAYOUT, multiGpuBoardGroupID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int multiGpuBoardGroupID
     * }
     */
    public static void multiGpuBoardGroupID(MemorySegment struct, int fieldValue) {
        struct.set(multiGpuBoardGroupID$LAYOUT, multiGpuBoardGroupID$OFFSET, fieldValue);
    }

    private static final OfInt hostNativeAtomicSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hostNativeAtomicSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int hostNativeAtomicSupported
     * }
     */
    public static final OfInt hostNativeAtomicSupported$layout() {
        return hostNativeAtomicSupported$LAYOUT;
    }

    private static final long hostNativeAtomicSupported$OFFSET = 664;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int hostNativeAtomicSupported
     * }
     */
    public static final long hostNativeAtomicSupported$offset() {
        return hostNativeAtomicSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int hostNativeAtomicSupported
     * }
     */
    public static int hostNativeAtomicSupported(MemorySegment struct) {
        return struct.get(hostNativeAtomicSupported$LAYOUT, hostNativeAtomicSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int hostNativeAtomicSupported
     * }
     */
    public static void hostNativeAtomicSupported(MemorySegment struct, int fieldValue) {
        struct.set(hostNativeAtomicSupported$LAYOUT, hostNativeAtomicSupported$OFFSET, fieldValue);
    }

    private static final OfInt singleToDoublePrecisionPerfRatio$LAYOUT = (OfInt)$LAYOUT.select(groupElement("singleToDoublePrecisionPerfRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int singleToDoublePrecisionPerfRatio
     * }
     */
    public static final OfInt singleToDoublePrecisionPerfRatio$layout() {
        return singleToDoublePrecisionPerfRatio$LAYOUT;
    }

    private static final long singleToDoublePrecisionPerfRatio$OFFSET = 668;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int singleToDoublePrecisionPerfRatio
     * }
     */
    public static final long singleToDoublePrecisionPerfRatio$offset() {
        return singleToDoublePrecisionPerfRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int singleToDoublePrecisionPerfRatio
     * }
     */
    public static int singleToDoublePrecisionPerfRatio(MemorySegment struct) {
        return struct.get(singleToDoublePrecisionPerfRatio$LAYOUT, singleToDoublePrecisionPerfRatio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int singleToDoublePrecisionPerfRatio
     * }
     */
    public static void singleToDoublePrecisionPerfRatio(MemorySegment struct, int fieldValue) {
        struct.set(singleToDoublePrecisionPerfRatio$LAYOUT, singleToDoublePrecisionPerfRatio$OFFSET, fieldValue);
    }

    private static final OfInt pageableMemoryAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pageableMemoryAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pageableMemoryAccess
     * }
     */
    public static final OfInt pageableMemoryAccess$layout() {
        return pageableMemoryAccess$LAYOUT;
    }

    private static final long pageableMemoryAccess$OFFSET = 672;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pageableMemoryAccess
     * }
     */
    public static final long pageableMemoryAccess$offset() {
        return pageableMemoryAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pageableMemoryAccess
     * }
     */
    public static int pageableMemoryAccess(MemorySegment struct) {
        return struct.get(pageableMemoryAccess$LAYOUT, pageableMemoryAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pageableMemoryAccess
     * }
     */
    public static void pageableMemoryAccess(MemorySegment struct, int fieldValue) {
        struct.set(pageableMemoryAccess$LAYOUT, pageableMemoryAccess$OFFSET, fieldValue);
    }

    private static final OfInt concurrentManagedAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("concurrentManagedAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int concurrentManagedAccess
     * }
     */
    public static final OfInt concurrentManagedAccess$layout() {
        return concurrentManagedAccess$LAYOUT;
    }

    private static final long concurrentManagedAccess$OFFSET = 676;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int concurrentManagedAccess
     * }
     */
    public static final long concurrentManagedAccess$offset() {
        return concurrentManagedAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int concurrentManagedAccess
     * }
     */
    public static int concurrentManagedAccess(MemorySegment struct) {
        return struct.get(concurrentManagedAccess$LAYOUT, concurrentManagedAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int concurrentManagedAccess
     * }
     */
    public static void concurrentManagedAccess(MemorySegment struct, int fieldValue) {
        struct.set(concurrentManagedAccess$LAYOUT, concurrentManagedAccess$OFFSET, fieldValue);
    }

    private static final OfInt computePreemptionSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("computePreemptionSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int computePreemptionSupported
     * }
     */
    public static final OfInt computePreemptionSupported$layout() {
        return computePreemptionSupported$LAYOUT;
    }

    private static final long computePreemptionSupported$OFFSET = 680;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int computePreemptionSupported
     * }
     */
    public static final long computePreemptionSupported$offset() {
        return computePreemptionSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int computePreemptionSupported
     * }
     */
    public static int computePreemptionSupported(MemorySegment struct) {
        return struct.get(computePreemptionSupported$LAYOUT, computePreemptionSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int computePreemptionSupported
     * }
     */
    public static void computePreemptionSupported(MemorySegment struct, int fieldValue) {
        struct.set(computePreemptionSupported$LAYOUT, computePreemptionSupported$OFFSET, fieldValue);
    }

    private static final OfInt canUseHostPointerForRegisteredMem$LAYOUT = (OfInt)$LAYOUT.select(groupElement("canUseHostPointerForRegisteredMem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int canUseHostPointerForRegisteredMem
     * }
     */
    public static final OfInt canUseHostPointerForRegisteredMem$layout() {
        return canUseHostPointerForRegisteredMem$LAYOUT;
    }

    private static final long canUseHostPointerForRegisteredMem$OFFSET = 684;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int canUseHostPointerForRegisteredMem
     * }
     */
    public static final long canUseHostPointerForRegisteredMem$offset() {
        return canUseHostPointerForRegisteredMem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int canUseHostPointerForRegisteredMem
     * }
     */
    public static int canUseHostPointerForRegisteredMem(MemorySegment struct) {
        return struct.get(canUseHostPointerForRegisteredMem$LAYOUT, canUseHostPointerForRegisteredMem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int canUseHostPointerForRegisteredMem
     * }
     */
    public static void canUseHostPointerForRegisteredMem(MemorySegment struct, int fieldValue) {
        struct.set(canUseHostPointerForRegisteredMem$LAYOUT, canUseHostPointerForRegisteredMem$OFFSET, fieldValue);
    }

    private static final OfInt cooperativeLaunch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cooperativeLaunch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cooperativeLaunch
     * }
     */
    public static final OfInt cooperativeLaunch$layout() {
        return cooperativeLaunch$LAYOUT;
    }

    private static final long cooperativeLaunch$OFFSET = 688;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cooperativeLaunch
     * }
     */
    public static final long cooperativeLaunch$offset() {
        return cooperativeLaunch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cooperativeLaunch
     * }
     */
    public static int cooperativeLaunch(MemorySegment struct) {
        return struct.get(cooperativeLaunch$LAYOUT, cooperativeLaunch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cooperativeLaunch
     * }
     */
    public static void cooperativeLaunch(MemorySegment struct, int fieldValue) {
        struct.set(cooperativeLaunch$LAYOUT, cooperativeLaunch$OFFSET, fieldValue);
    }

    private static final OfInt cooperativeMultiDeviceLaunch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cooperativeMultiDeviceLaunch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cooperativeMultiDeviceLaunch
     * }
     */
    public static final OfInt cooperativeMultiDeviceLaunch$layout() {
        return cooperativeMultiDeviceLaunch$LAYOUT;
    }

    private static final long cooperativeMultiDeviceLaunch$OFFSET = 692;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cooperativeMultiDeviceLaunch
     * }
     */
    public static final long cooperativeMultiDeviceLaunch$offset() {
        return cooperativeMultiDeviceLaunch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cooperativeMultiDeviceLaunch
     * }
     */
    public static int cooperativeMultiDeviceLaunch(MemorySegment struct) {
        return struct.get(cooperativeMultiDeviceLaunch$LAYOUT, cooperativeMultiDeviceLaunch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cooperativeMultiDeviceLaunch
     * }
     */
    public static void cooperativeMultiDeviceLaunch(MemorySegment struct, int fieldValue) {
        struct.set(cooperativeMultiDeviceLaunch$LAYOUT, cooperativeMultiDeviceLaunch$OFFSET, fieldValue);
    }

    private static final OfLong sharedMemPerBlockOptin$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sharedMemPerBlockOptin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlockOptin
     * }
     */
    public static final OfLong sharedMemPerBlockOptin$layout() {
        return sharedMemPerBlockOptin$LAYOUT;
    }

    private static final long sharedMemPerBlockOptin$OFFSET = 696;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlockOptin
     * }
     */
    public static final long sharedMemPerBlockOptin$offset() {
        return sharedMemPerBlockOptin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlockOptin
     * }
     */
    public static long sharedMemPerBlockOptin(MemorySegment struct) {
        return struct.get(sharedMemPerBlockOptin$LAYOUT, sharedMemPerBlockOptin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t sharedMemPerBlockOptin
     * }
     */
    public static void sharedMemPerBlockOptin(MemorySegment struct, long fieldValue) {
        struct.set(sharedMemPerBlockOptin$LAYOUT, sharedMemPerBlockOptin$OFFSET, fieldValue);
    }

    private static final OfInt pageableMemoryAccessUsesHostPageTables$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pageableMemoryAccessUsesHostPageTables"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pageableMemoryAccessUsesHostPageTables
     * }
     */
    public static final OfInt pageableMemoryAccessUsesHostPageTables$layout() {
        return pageableMemoryAccessUsesHostPageTables$LAYOUT;
    }

    private static final long pageableMemoryAccessUsesHostPageTables$OFFSET = 704;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pageableMemoryAccessUsesHostPageTables
     * }
     */
    public static final long pageableMemoryAccessUsesHostPageTables$offset() {
        return pageableMemoryAccessUsesHostPageTables$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pageableMemoryAccessUsesHostPageTables
     * }
     */
    public static int pageableMemoryAccessUsesHostPageTables(MemorySegment struct) {
        return struct.get(pageableMemoryAccessUsesHostPageTables$LAYOUT, pageableMemoryAccessUsesHostPageTables$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pageableMemoryAccessUsesHostPageTables
     * }
     */
    public static void pageableMemoryAccessUsesHostPageTables(MemorySegment struct, int fieldValue) {
        struct.set(pageableMemoryAccessUsesHostPageTables$LAYOUT, pageableMemoryAccessUsesHostPageTables$OFFSET, fieldValue);
    }

    private static final OfInt directManagedMemAccessFromHost$LAYOUT = (OfInt)$LAYOUT.select(groupElement("directManagedMemAccessFromHost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int directManagedMemAccessFromHost
     * }
     */
    public static final OfInt directManagedMemAccessFromHost$layout() {
        return directManagedMemAccessFromHost$LAYOUT;
    }

    private static final long directManagedMemAccessFromHost$OFFSET = 708;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int directManagedMemAccessFromHost
     * }
     */
    public static final long directManagedMemAccessFromHost$offset() {
        return directManagedMemAccessFromHost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int directManagedMemAccessFromHost
     * }
     */
    public static int directManagedMemAccessFromHost(MemorySegment struct) {
        return struct.get(directManagedMemAccessFromHost$LAYOUT, directManagedMemAccessFromHost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int directManagedMemAccessFromHost
     * }
     */
    public static void directManagedMemAccessFromHost(MemorySegment struct, int fieldValue) {
        struct.set(directManagedMemAccessFromHost$LAYOUT, directManagedMemAccessFromHost$OFFSET, fieldValue);
    }

    private static final OfInt maxBlocksPerMultiProcessor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxBlocksPerMultiProcessor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxBlocksPerMultiProcessor
     * }
     */
    public static final OfInt maxBlocksPerMultiProcessor$layout() {
        return maxBlocksPerMultiProcessor$LAYOUT;
    }

    private static final long maxBlocksPerMultiProcessor$OFFSET = 712;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxBlocksPerMultiProcessor
     * }
     */
    public static final long maxBlocksPerMultiProcessor$offset() {
        return maxBlocksPerMultiProcessor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxBlocksPerMultiProcessor
     * }
     */
    public static int maxBlocksPerMultiProcessor(MemorySegment struct) {
        return struct.get(maxBlocksPerMultiProcessor$LAYOUT, maxBlocksPerMultiProcessor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxBlocksPerMultiProcessor
     * }
     */
    public static void maxBlocksPerMultiProcessor(MemorySegment struct, int fieldValue) {
        struct.set(maxBlocksPerMultiProcessor$LAYOUT, maxBlocksPerMultiProcessor$OFFSET, fieldValue);
    }

    private static final OfInt accessPolicyMaxWindowSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("accessPolicyMaxWindowSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int accessPolicyMaxWindowSize
     * }
     */
    public static final OfInt accessPolicyMaxWindowSize$layout() {
        return accessPolicyMaxWindowSize$LAYOUT;
    }

    private static final long accessPolicyMaxWindowSize$OFFSET = 716;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int accessPolicyMaxWindowSize
     * }
     */
    public static final long accessPolicyMaxWindowSize$offset() {
        return accessPolicyMaxWindowSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int accessPolicyMaxWindowSize
     * }
     */
    public static int accessPolicyMaxWindowSize(MemorySegment struct) {
        return struct.get(accessPolicyMaxWindowSize$LAYOUT, accessPolicyMaxWindowSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int accessPolicyMaxWindowSize
     * }
     */
    public static void accessPolicyMaxWindowSize(MemorySegment struct, int fieldValue) {
        struct.set(accessPolicyMaxWindowSize$LAYOUT, accessPolicyMaxWindowSize$OFFSET, fieldValue);
    }

    private static final OfLong reservedSharedMemPerBlock$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reservedSharedMemPerBlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t reservedSharedMemPerBlock
     * }
     */
    public static final OfLong reservedSharedMemPerBlock$layout() {
        return reservedSharedMemPerBlock$LAYOUT;
    }

    private static final long reservedSharedMemPerBlock$OFFSET = 720;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t reservedSharedMemPerBlock
     * }
     */
    public static final long reservedSharedMemPerBlock$offset() {
        return reservedSharedMemPerBlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t reservedSharedMemPerBlock
     * }
     */
    public static long reservedSharedMemPerBlock(MemorySegment struct) {
        return struct.get(reservedSharedMemPerBlock$LAYOUT, reservedSharedMemPerBlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t reservedSharedMemPerBlock
     * }
     */
    public static void reservedSharedMemPerBlock(MemorySegment struct, long fieldValue) {
        struct.set(reservedSharedMemPerBlock$LAYOUT, reservedSharedMemPerBlock$OFFSET, fieldValue);
    }

    private static final OfInt hostRegisterSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hostRegisterSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int hostRegisterSupported
     * }
     */
    public static final OfInt hostRegisterSupported$layout() {
        return hostRegisterSupported$LAYOUT;
    }

    private static final long hostRegisterSupported$OFFSET = 728;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int hostRegisterSupported
     * }
     */
    public static final long hostRegisterSupported$offset() {
        return hostRegisterSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int hostRegisterSupported
     * }
     */
    public static int hostRegisterSupported(MemorySegment struct) {
        return struct.get(hostRegisterSupported$LAYOUT, hostRegisterSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int hostRegisterSupported
     * }
     */
    public static void hostRegisterSupported(MemorySegment struct, int fieldValue) {
        struct.set(hostRegisterSupported$LAYOUT, hostRegisterSupported$OFFSET, fieldValue);
    }

    private static final OfInt sparseCudaArraySupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseCudaArraySupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sparseCudaArraySupported
     * }
     */
    public static final OfInt sparseCudaArraySupported$layout() {
        return sparseCudaArraySupported$LAYOUT;
    }

    private static final long sparseCudaArraySupported$OFFSET = 732;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sparseCudaArraySupported
     * }
     */
    public static final long sparseCudaArraySupported$offset() {
        return sparseCudaArraySupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sparseCudaArraySupported
     * }
     */
    public static int sparseCudaArraySupported(MemorySegment struct) {
        return struct.get(sparseCudaArraySupported$LAYOUT, sparseCudaArraySupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sparseCudaArraySupported
     * }
     */
    public static void sparseCudaArraySupported(MemorySegment struct, int fieldValue) {
        struct.set(sparseCudaArraySupported$LAYOUT, sparseCudaArraySupported$OFFSET, fieldValue);
    }

    private static final OfInt hostRegisterReadOnlySupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hostRegisterReadOnlySupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int hostRegisterReadOnlySupported
     * }
     */
    public static final OfInt hostRegisterReadOnlySupported$layout() {
        return hostRegisterReadOnlySupported$LAYOUT;
    }

    private static final long hostRegisterReadOnlySupported$OFFSET = 736;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int hostRegisterReadOnlySupported
     * }
     */
    public static final long hostRegisterReadOnlySupported$offset() {
        return hostRegisterReadOnlySupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int hostRegisterReadOnlySupported
     * }
     */
    public static int hostRegisterReadOnlySupported(MemorySegment struct) {
        return struct.get(hostRegisterReadOnlySupported$LAYOUT, hostRegisterReadOnlySupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int hostRegisterReadOnlySupported
     * }
     */
    public static void hostRegisterReadOnlySupported(MemorySegment struct, int fieldValue) {
        struct.set(hostRegisterReadOnlySupported$LAYOUT, hostRegisterReadOnlySupported$OFFSET, fieldValue);
    }

    private static final OfInt timelineSemaphoreInteropSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timelineSemaphoreInteropSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int timelineSemaphoreInteropSupported
     * }
     */
    public static final OfInt timelineSemaphoreInteropSupported$layout() {
        return timelineSemaphoreInteropSupported$LAYOUT;
    }

    private static final long timelineSemaphoreInteropSupported$OFFSET = 740;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int timelineSemaphoreInteropSupported
     * }
     */
    public static final long timelineSemaphoreInteropSupported$offset() {
        return timelineSemaphoreInteropSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int timelineSemaphoreInteropSupported
     * }
     */
    public static int timelineSemaphoreInteropSupported(MemorySegment struct) {
        return struct.get(timelineSemaphoreInteropSupported$LAYOUT, timelineSemaphoreInteropSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int timelineSemaphoreInteropSupported
     * }
     */
    public static void timelineSemaphoreInteropSupported(MemorySegment struct, int fieldValue) {
        struct.set(timelineSemaphoreInteropSupported$LAYOUT, timelineSemaphoreInteropSupported$OFFSET, fieldValue);
    }

    private static final OfInt memoryPoolsSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memoryPoolsSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int memoryPoolsSupported
     * }
     */
    public static final OfInt memoryPoolsSupported$layout() {
        return memoryPoolsSupported$LAYOUT;
    }

    private static final long memoryPoolsSupported$OFFSET = 744;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int memoryPoolsSupported
     * }
     */
    public static final long memoryPoolsSupported$offset() {
        return memoryPoolsSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int memoryPoolsSupported
     * }
     */
    public static int memoryPoolsSupported(MemorySegment struct) {
        return struct.get(memoryPoolsSupported$LAYOUT, memoryPoolsSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int memoryPoolsSupported
     * }
     */
    public static void memoryPoolsSupported(MemorySegment struct, int fieldValue) {
        struct.set(memoryPoolsSupported$LAYOUT, memoryPoolsSupported$OFFSET, fieldValue);
    }

    private static final OfInt gpuDirectRDMASupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gpuDirectRDMASupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int gpuDirectRDMASupported
     * }
     */
    public static final OfInt gpuDirectRDMASupported$layout() {
        return gpuDirectRDMASupported$LAYOUT;
    }

    private static final long gpuDirectRDMASupported$OFFSET = 748;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int gpuDirectRDMASupported
     * }
     */
    public static final long gpuDirectRDMASupported$offset() {
        return gpuDirectRDMASupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int gpuDirectRDMASupported
     * }
     */
    public static int gpuDirectRDMASupported(MemorySegment struct) {
        return struct.get(gpuDirectRDMASupported$LAYOUT, gpuDirectRDMASupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int gpuDirectRDMASupported
     * }
     */
    public static void gpuDirectRDMASupported(MemorySegment struct, int fieldValue) {
        struct.set(gpuDirectRDMASupported$LAYOUT, gpuDirectRDMASupported$OFFSET, fieldValue);
    }

    private static final OfInt gpuDirectRDMAFlushWritesOptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gpuDirectRDMAFlushWritesOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int gpuDirectRDMAFlushWritesOptions
     * }
     */
    public static final OfInt gpuDirectRDMAFlushWritesOptions$layout() {
        return gpuDirectRDMAFlushWritesOptions$LAYOUT;
    }

    private static final long gpuDirectRDMAFlushWritesOptions$OFFSET = 752;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int gpuDirectRDMAFlushWritesOptions
     * }
     */
    public static final long gpuDirectRDMAFlushWritesOptions$offset() {
        return gpuDirectRDMAFlushWritesOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int gpuDirectRDMAFlushWritesOptions
     * }
     */
    public static int gpuDirectRDMAFlushWritesOptions(MemorySegment struct) {
        return struct.get(gpuDirectRDMAFlushWritesOptions$LAYOUT, gpuDirectRDMAFlushWritesOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int gpuDirectRDMAFlushWritesOptions
     * }
     */
    public static void gpuDirectRDMAFlushWritesOptions(MemorySegment struct, int fieldValue) {
        struct.set(gpuDirectRDMAFlushWritesOptions$LAYOUT, gpuDirectRDMAFlushWritesOptions$OFFSET, fieldValue);
    }

    private static final OfInt gpuDirectRDMAWritesOrdering$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gpuDirectRDMAWritesOrdering"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int gpuDirectRDMAWritesOrdering
     * }
     */
    public static final OfInt gpuDirectRDMAWritesOrdering$layout() {
        return gpuDirectRDMAWritesOrdering$LAYOUT;
    }

    private static final long gpuDirectRDMAWritesOrdering$OFFSET = 756;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int gpuDirectRDMAWritesOrdering
     * }
     */
    public static final long gpuDirectRDMAWritesOrdering$offset() {
        return gpuDirectRDMAWritesOrdering$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int gpuDirectRDMAWritesOrdering
     * }
     */
    public static int gpuDirectRDMAWritesOrdering(MemorySegment struct) {
        return struct.get(gpuDirectRDMAWritesOrdering$LAYOUT, gpuDirectRDMAWritesOrdering$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int gpuDirectRDMAWritesOrdering
     * }
     */
    public static void gpuDirectRDMAWritesOrdering(MemorySegment struct, int fieldValue) {
        struct.set(gpuDirectRDMAWritesOrdering$LAYOUT, gpuDirectRDMAWritesOrdering$OFFSET, fieldValue);
    }

    private static final OfInt memoryPoolSupportedHandleTypes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memoryPoolSupportedHandleTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int memoryPoolSupportedHandleTypes
     * }
     */
    public static final OfInt memoryPoolSupportedHandleTypes$layout() {
        return memoryPoolSupportedHandleTypes$LAYOUT;
    }

    private static final long memoryPoolSupportedHandleTypes$OFFSET = 760;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int memoryPoolSupportedHandleTypes
     * }
     */
    public static final long memoryPoolSupportedHandleTypes$offset() {
        return memoryPoolSupportedHandleTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int memoryPoolSupportedHandleTypes
     * }
     */
    public static int memoryPoolSupportedHandleTypes(MemorySegment struct) {
        return struct.get(memoryPoolSupportedHandleTypes$LAYOUT, memoryPoolSupportedHandleTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int memoryPoolSupportedHandleTypes
     * }
     */
    public static void memoryPoolSupportedHandleTypes(MemorySegment struct, int fieldValue) {
        struct.set(memoryPoolSupportedHandleTypes$LAYOUT, memoryPoolSupportedHandleTypes$OFFSET, fieldValue);
    }

    private static final OfInt deferredMappingCudaArraySupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deferredMappingCudaArraySupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int deferredMappingCudaArraySupported
     * }
     */
    public static final OfInt deferredMappingCudaArraySupported$layout() {
        return deferredMappingCudaArraySupported$LAYOUT;
    }

    private static final long deferredMappingCudaArraySupported$OFFSET = 764;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int deferredMappingCudaArraySupported
     * }
     */
    public static final long deferredMappingCudaArraySupported$offset() {
        return deferredMappingCudaArraySupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int deferredMappingCudaArraySupported
     * }
     */
    public static int deferredMappingCudaArraySupported(MemorySegment struct) {
        return struct.get(deferredMappingCudaArraySupported$LAYOUT, deferredMappingCudaArraySupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int deferredMappingCudaArraySupported
     * }
     */
    public static void deferredMappingCudaArraySupported(MemorySegment struct, int fieldValue) {
        struct.set(deferredMappingCudaArraySupported$LAYOUT, deferredMappingCudaArraySupported$OFFSET, fieldValue);
    }

    private static final OfInt ipcEventSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ipcEventSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ipcEventSupported
     * }
     */
    public static final OfInt ipcEventSupported$layout() {
        return ipcEventSupported$LAYOUT;
    }

    private static final long ipcEventSupported$OFFSET = 768;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ipcEventSupported
     * }
     */
    public static final long ipcEventSupported$offset() {
        return ipcEventSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ipcEventSupported
     * }
     */
    public static int ipcEventSupported(MemorySegment struct) {
        return struct.get(ipcEventSupported$LAYOUT, ipcEventSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ipcEventSupported
     * }
     */
    public static void ipcEventSupported(MemorySegment struct, int fieldValue) {
        struct.set(ipcEventSupported$LAYOUT, ipcEventSupported$OFFSET, fieldValue);
    }

    private static final OfInt clusterLaunch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clusterLaunch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int clusterLaunch
     * }
     */
    public static final OfInt clusterLaunch$layout() {
        return clusterLaunch$LAYOUT;
    }

    private static final long clusterLaunch$OFFSET = 772;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int clusterLaunch
     * }
     */
    public static final long clusterLaunch$offset() {
        return clusterLaunch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int clusterLaunch
     * }
     */
    public static int clusterLaunch(MemorySegment struct) {
        return struct.get(clusterLaunch$LAYOUT, clusterLaunch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int clusterLaunch
     * }
     */
    public static void clusterLaunch(MemorySegment struct, int fieldValue) {
        struct.set(clusterLaunch$LAYOUT, clusterLaunch$OFFSET, fieldValue);
    }

    private static final OfInt unifiedFunctionPointers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unifiedFunctionPointers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int unifiedFunctionPointers
     * }
     */
    public static final OfInt unifiedFunctionPointers$layout() {
        return unifiedFunctionPointers$LAYOUT;
    }

    private static final long unifiedFunctionPointers$OFFSET = 776;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int unifiedFunctionPointers
     * }
     */
    public static final long unifiedFunctionPointers$offset() {
        return unifiedFunctionPointers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int unifiedFunctionPointers
     * }
     */
    public static int unifiedFunctionPointers(MemorySegment struct) {
        return struct.get(unifiedFunctionPointers$LAYOUT, unifiedFunctionPointers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int unifiedFunctionPointers
     * }
     */
    public static void unifiedFunctionPointers(MemorySegment struct, int fieldValue) {
        struct.set(unifiedFunctionPointers$LAYOUT, unifiedFunctionPointers$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int reserved2[2]
     * }
     */
    public static final SequenceLayout reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 780;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int reserved2[2]
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int reserved2[2]
     * }
     */
    public static MemorySegment reserved2(MemorySegment struct) {
        return struct.asSlice(reserved2$OFFSET, reserved2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int reserved2[2]
     * }
     */
    public static void reserved2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved2$OFFSET, reserved2$LAYOUT.byteSize());
    }

    private static long[] reserved2$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int reserved2[2]
     * }
     */
    public static long[] reserved2$dimensions() {
        return reserved2$DIMS;
    }
    private static final VarHandle reserved2$ELEM_HANDLE = reserved2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int reserved2[2]
     * }
     */
    public static int reserved2(MemorySegment struct, long index0) {
        return (int)reserved2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int reserved2[2]
     * }
     */
    public static void reserved2(MemorySegment struct, long index0, int fieldValue) {
        reserved2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int reserved1[1]
     * }
     */
    public static final SequenceLayout reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 788;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int reserved1[1]
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int reserved1[1]
     * }
     */
    public static MemorySegment reserved1(MemorySegment struct) {
        return struct.asSlice(reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int reserved1[1]
     * }
     */
    public static void reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    private static long[] reserved1$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int reserved1[1]
     * }
     */
    public static long[] reserved1$dimensions() {
        return reserved1$DIMS;
    }
    private static final VarHandle reserved1$ELEM_HANDLE = reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int reserved1[1]
     * }
     */
    public static int reserved1(MemorySegment struct, long index0) {
        return (int)reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int reserved1[1]
     * }
     */
    public static void reserved1(MemorySegment struct, long index0, int fieldValue) {
        reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int reserved[60]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 792;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int reserved[60]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int reserved[60]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int reserved[60]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 60 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int reserved[60]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int reserved[60]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int reserved[60]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
