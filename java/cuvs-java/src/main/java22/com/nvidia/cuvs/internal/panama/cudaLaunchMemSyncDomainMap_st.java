/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaLaunchMemSyncDomainMap_st {
 *     unsigned char default_;
 *     unsigned char remote;
 * }
 * }
 */
public class cudaLaunchMemSyncDomainMap_st {

    cudaLaunchMemSyncDomainMap_st() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_CHAR.withName("default_"),
        PanamaFFMAPI.C_CHAR.withName("remote")
    ).withName("cudaLaunchMemSyncDomainMap_st");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte default_$LAYOUT = (OfByte)$LAYOUT.select(groupElement("default_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char default_
     * }
     */
    public static final OfByte default_$layout() {
        return default_$LAYOUT;
    }

    private static final long default_$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char default_
     * }
     */
    public static final long default_$offset() {
        return default_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char default_
     * }
     */
    public static byte default_(MemorySegment struct) {
        return struct.get(default_$LAYOUT, default_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char default_
     * }
     */
    public static void default_(MemorySegment struct, byte fieldValue) {
        struct.set(default_$LAYOUT, default_$OFFSET, fieldValue);
    }

    private static final OfByte remote$LAYOUT = (OfByte)$LAYOUT.select(groupElement("remote"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char remote
     * }
     */
    public static final OfByte remote$layout() {
        return remote$LAYOUT;
    }

    private static final long remote$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char remote
     * }
     */
    public static final long remote$offset() {
        return remote$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char remote
     * }
     */
    public static byte remote(MemorySegment struct) {
        return struct.get(remote$LAYOUT, remote$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char remote
     * }
     */
    public static void remote(MemorySegment struct, byte fieldValue) {
        struct.set(remote$LAYOUT, remote$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
