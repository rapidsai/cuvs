/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaGraphExecUpdateResultInfo_st {
 *     enum cudaGraphExecUpdateResult result;
 *     cudaGraphNode_t errorNode;
 *     cudaGraphNode_t errorFromNode;
 * }
 * }
 */
public class cudaGraphExecUpdateResultInfo_st {

    cudaGraphExecUpdateResultInfo_st() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_INT.withName("result"),
        MemoryLayout.paddingLayout(4),
        PanamaFFMAPI.C_POINTER.withName("errorNode"),
        PanamaFFMAPI.C_POINTER.withName("errorFromNode")
    ).withName("cudaGraphExecUpdateResultInfo_st");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt result$LAYOUT = (OfInt)$LAYOUT.select(groupElement("result"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult result
     * }
     */
    public static final OfInt result$layout() {
        return result$LAYOUT;
    }

    private static final long result$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult result
     * }
     */
    public static final long result$offset() {
        return result$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult result
     * }
     */
    public static int result(MemorySegment struct) {
        return struct.get(result$LAYOUT, result$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult result
     * }
     */
    public static void result(MemorySegment struct, int fieldValue) {
        struct.set(result$LAYOUT, result$OFFSET, fieldValue);
    }

    private static final AddressLayout errorNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("errorNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorNode
     * }
     */
    public static final AddressLayout errorNode$layout() {
        return errorNode$LAYOUT;
    }

    private static final long errorNode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorNode
     * }
     */
    public static final long errorNode$offset() {
        return errorNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorNode
     * }
     */
    public static MemorySegment errorNode(MemorySegment struct) {
        return struct.get(errorNode$LAYOUT, errorNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorNode
     * }
     */
    public static void errorNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(errorNode$LAYOUT, errorNode$OFFSET, fieldValue);
    }

    private static final AddressLayout errorFromNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("errorFromNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorFromNode
     * }
     */
    public static final AddressLayout errorFromNode$layout() {
        return errorFromNode$LAYOUT;
    }

    private static final long errorFromNode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorFromNode
     * }
     */
    public static final long errorFromNode$offset() {
        return errorFromNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorFromNode
     * }
     */
    public static MemorySegment errorFromNode(MemorySegment struct) {
        return struct.get(errorFromNode$LAYOUT, errorFromNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cudaGraphNode_t errorFromNode
     * }
     */
    public static void errorFromNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(errorFromNode$LAYOUT, errorFromNode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
