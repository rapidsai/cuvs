/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class PanamaFFMAPI_1 {

    PanamaFFMAPI_1() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _LIBC_LIMITS_H_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _LIBC_LIMITS_H_ 1
     * }
     */
    public static int _LIBC_LIMITS_H_() {
        return _LIBC_LIMITS_H_;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)35L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 35
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int MB_LEN_MAX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MB_LEN_MAX 16
     * }
     */
    public static int MB_LEN_MAX() {
        return MB_LEN_MAX;
    }
    private static final int _BITS_POSIX1_LIM_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_POSIX1_LIM_H 1
     * }
     */
    public static int _BITS_POSIX1_LIM_H() {
        return _BITS_POSIX1_LIM_H;
    }
    private static final int _POSIX_AIO_LISTIO_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_AIO_LISTIO_MAX 2
     * }
     */
    public static int _POSIX_AIO_LISTIO_MAX() {
        return _POSIX_AIO_LISTIO_MAX;
    }
    private static final int _POSIX_AIO_MAX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_AIO_MAX 1
     * }
     */
    public static int _POSIX_AIO_MAX() {
        return _POSIX_AIO_MAX;
    }
    private static final int _POSIX_ARG_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_ARG_MAX 4096
     * }
     */
    public static int _POSIX_ARG_MAX() {
        return _POSIX_ARG_MAX;
    }
    private static final int _POSIX_CHILD_MAX = (int)25L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_CHILD_MAX 25
     * }
     */
    public static int _POSIX_CHILD_MAX() {
        return _POSIX_CHILD_MAX;
    }
    private static final int _POSIX_DELAYTIMER_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_DELAYTIMER_MAX 32
     * }
     */
    public static int _POSIX_DELAYTIMER_MAX() {
        return _POSIX_DELAYTIMER_MAX;
    }
    private static final int _POSIX_HOST_NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_HOST_NAME_MAX 255
     * }
     */
    public static int _POSIX_HOST_NAME_MAX() {
        return _POSIX_HOST_NAME_MAX;
    }
    private static final int _POSIX_LINK_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_LINK_MAX 8
     * }
     */
    public static int _POSIX_LINK_MAX() {
        return _POSIX_LINK_MAX;
    }
    private static final int _POSIX_LOGIN_NAME_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_LOGIN_NAME_MAX 9
     * }
     */
    public static int _POSIX_LOGIN_NAME_MAX() {
        return _POSIX_LOGIN_NAME_MAX;
    }
    private static final int _POSIX_MAX_CANON = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MAX_CANON 255
     * }
     */
    public static int _POSIX_MAX_CANON() {
        return _POSIX_MAX_CANON;
    }
    private static final int _POSIX_MAX_INPUT = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MAX_INPUT 255
     * }
     */
    public static int _POSIX_MAX_INPUT() {
        return _POSIX_MAX_INPUT;
    }
    private static final int _POSIX_MQ_OPEN_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MQ_OPEN_MAX 8
     * }
     */
    public static int _POSIX_MQ_OPEN_MAX() {
        return _POSIX_MQ_OPEN_MAX;
    }
    private static final int _POSIX_MQ_PRIO_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MQ_PRIO_MAX 32
     * }
     */
    public static int _POSIX_MQ_PRIO_MAX() {
        return _POSIX_MQ_PRIO_MAX;
    }
    private static final int _POSIX_NAME_MAX = (int)14L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_NAME_MAX 14
     * }
     */
    public static int _POSIX_NAME_MAX() {
        return _POSIX_NAME_MAX;
    }
    private static final int _POSIX_NGROUPS_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_NGROUPS_MAX 8
     * }
     */
    public static int _POSIX_NGROUPS_MAX() {
        return _POSIX_NGROUPS_MAX;
    }
    private static final int _POSIX_OPEN_MAX = (int)20L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_OPEN_MAX 20
     * }
     */
    public static int _POSIX_OPEN_MAX() {
        return _POSIX_OPEN_MAX;
    }
    private static final int _POSIX_PATH_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_PATH_MAX 256
     * }
     */
    public static int _POSIX_PATH_MAX() {
        return _POSIX_PATH_MAX;
    }
    private static final int _POSIX_PIPE_BUF = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_PIPE_BUF 512
     * }
     */
    public static int _POSIX_PIPE_BUF() {
        return _POSIX_PIPE_BUF;
    }
    private static final int _POSIX_RE_DUP_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX_RE_DUP_MAX() {
        return _POSIX_RE_DUP_MAX;
    }
    private static final int _POSIX_RTSIG_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_RTSIG_MAX 8
     * }
     */
    public static int _POSIX_RTSIG_MAX() {
        return _POSIX_RTSIG_MAX;
    }
    private static final int _POSIX_SEM_NSEMS_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SEM_NSEMS_MAX 256
     * }
     */
    public static int _POSIX_SEM_NSEMS_MAX() {
        return _POSIX_SEM_NSEMS_MAX;
    }
    private static final int _POSIX_SEM_VALUE_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SEM_VALUE_MAX 32767
     * }
     */
    public static int _POSIX_SEM_VALUE_MAX() {
        return _POSIX_SEM_VALUE_MAX;
    }
    private static final int _POSIX_SIGQUEUE_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SIGQUEUE_MAX 32
     * }
     */
    public static int _POSIX_SIGQUEUE_MAX() {
        return _POSIX_SIGQUEUE_MAX;
    }
    private static final int _POSIX_SSIZE_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SSIZE_MAX 32767
     * }
     */
    public static int _POSIX_SSIZE_MAX() {
        return _POSIX_SSIZE_MAX;
    }
    private static final int _POSIX_STREAM_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_STREAM_MAX 8
     * }
     */
    public static int _POSIX_STREAM_MAX() {
        return _POSIX_STREAM_MAX;
    }
    private static final int _POSIX_SYMLINK_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SYMLINK_MAX 255
     * }
     */
    public static int _POSIX_SYMLINK_MAX() {
        return _POSIX_SYMLINK_MAX;
    }
    private static final int _POSIX_SYMLOOP_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SYMLOOP_MAX 8
     * }
     */
    public static int _POSIX_SYMLOOP_MAX() {
        return _POSIX_SYMLOOP_MAX;
    }
    private static final int _POSIX_TIMER_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TIMER_MAX 32
     * }
     */
    public static int _POSIX_TIMER_MAX() {
        return _POSIX_TIMER_MAX;
    }
    private static final int _POSIX_TTY_NAME_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TTY_NAME_MAX 9
     * }
     */
    public static int _POSIX_TTY_NAME_MAX() {
        return _POSIX_TTY_NAME_MAX;
    }
    private static final int _POSIX_TZNAME_MAX = (int)6L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TZNAME_MAX 6
     * }
     */
    public static int _POSIX_TZNAME_MAX() {
        return _POSIX_TZNAME_MAX;
    }
    private static final int _POSIX_CLOCKRES_MIN = (int)20000000L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_CLOCKRES_MIN 20000000
     * }
     */
    public static int _POSIX_CLOCKRES_MIN() {
        return _POSIX_CLOCKRES_MIN;
    }
    private static final int NR_OPEN = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define NR_OPEN 1024
     * }
     */
    public static int NR_OPEN() {
        return NR_OPEN;
    }
    private static final int NGROUPS_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define NGROUPS_MAX 65536
     * }
     */
    public static int NGROUPS_MAX() {
        return NGROUPS_MAX;
    }
    private static final int ARG_MAX = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define ARG_MAX 131072
     * }
     */
    public static int ARG_MAX() {
        return ARG_MAX;
    }
    private static final int LINK_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define LINK_MAX 127
     * }
     */
    public static int LINK_MAX() {
        return LINK_MAX;
    }
    private static final int MAX_CANON = (int)255L;
    /**
     * {@snippet lang=c :
     * #define MAX_CANON 255
     * }
     */
    public static int MAX_CANON() {
        return MAX_CANON;
    }
    private static final int MAX_INPUT = (int)255L;
    /**
     * {@snippet lang=c :
     * #define MAX_INPUT 255
     * }
     */
    public static int MAX_INPUT() {
        return MAX_INPUT;
    }
    private static final int NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define NAME_MAX 255
     * }
     */
    public static int NAME_MAX() {
        return NAME_MAX;
    }
    private static final int PATH_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PATH_MAX 4096
     * }
     */
    public static int PATH_MAX() {
        return PATH_MAX;
    }
    private static final int PIPE_BUF = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PIPE_BUF 4096
     * }
     */
    public static int PIPE_BUF() {
        return PIPE_BUF;
    }
    private static final int XATTR_NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define XATTR_NAME_MAX 255
     * }
     */
    public static int XATTR_NAME_MAX() {
        return XATTR_NAME_MAX;
    }
    private static final int XATTR_SIZE_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define XATTR_SIZE_MAX 65536
     * }
     */
    public static int XATTR_SIZE_MAX() {
        return XATTR_SIZE_MAX;
    }
    private static final int XATTR_LIST_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define XATTR_LIST_MAX 65536
     * }
     */
    public static int XATTR_LIST_MAX() {
        return XATTR_LIST_MAX;
    }
    private static final int RTSIG_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RTSIG_MAX 32
     * }
     */
    public static int RTSIG_MAX() {
        return RTSIG_MAX;
    }
    private static final int _POSIX_THREAD_KEYS_MAX = (int)128L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_KEYS_MAX 128
     * }
     */
    public static int _POSIX_THREAD_KEYS_MAX() {
        return _POSIX_THREAD_KEYS_MAX;
    }
    private static final int PTHREAD_KEYS_MAX = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_KEYS_MAX 1024
     * }
     */
    public static int PTHREAD_KEYS_MAX() {
        return PTHREAD_KEYS_MAX;
    }
    private static final int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int _POSIX_THREAD_THREADS_MAX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_THREADS_MAX 64
     * }
     */
    public static int _POSIX_THREAD_THREADS_MAX() {
        return _POSIX_THREAD_THREADS_MAX;
    }
    private static final int AIO_PRIO_DELTA_MAX = (int)20L;
    /**
     * {@snippet lang=c :
     * #define AIO_PRIO_DELTA_MAX 20
     * }
     */
    public static int AIO_PRIO_DELTA_MAX() {
        return AIO_PRIO_DELTA_MAX;
    }
    private static final int PTHREAD_STACK_MIN = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_STACK_MIN 16384
     * }
     */
    public static int PTHREAD_STACK_MIN() {
        return PTHREAD_STACK_MIN;
    }
    private static final int DELAYTIMER_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define DELAYTIMER_MAX 2147483647
     * }
     */
    public static int DELAYTIMER_MAX() {
        return DELAYTIMER_MAX;
    }
    private static final int TTY_NAME_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TTY_NAME_MAX 32
     * }
     */
    public static int TTY_NAME_MAX() {
        return TTY_NAME_MAX;
    }
    private static final int LOGIN_NAME_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define LOGIN_NAME_MAX 256
     * }
     */
    public static int LOGIN_NAME_MAX() {
        return LOGIN_NAME_MAX;
    }
    private static final int HOST_NAME_MAX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define HOST_NAME_MAX 64
     * }
     */
    public static int HOST_NAME_MAX() {
        return HOST_NAME_MAX;
    }
    private static final int MQ_PRIO_MAX = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define MQ_PRIO_MAX 32768
     * }
     */
    public static int MQ_PRIO_MAX() {
        return MQ_PRIO_MAX;
    }
    private static final int _BITS_POSIX2_LIM_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_POSIX2_LIM_H 1
     * }
     */
    public static int _BITS_POSIX2_LIM_H() {
        return _BITS_POSIX2_LIM_H;
    }
    private static final int _POSIX2_BC_BASE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_BASE_MAX 99
     * }
     */
    public static int _POSIX2_BC_BASE_MAX() {
        return _POSIX2_BC_BASE_MAX;
    }
    private static final int _POSIX2_BC_DIM_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_DIM_MAX 2048
     * }
     */
    public static int _POSIX2_BC_DIM_MAX() {
        return _POSIX2_BC_DIM_MAX;
    }
    private static final int _POSIX2_BC_SCALE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_SCALE_MAX 99
     * }
     */
    public static int _POSIX2_BC_SCALE_MAX() {
        return _POSIX2_BC_SCALE_MAX;
    }
    private static final int _POSIX2_BC_STRING_MAX = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_BC_STRING_MAX 1000
     * }
     */
    public static int _POSIX2_BC_STRING_MAX() {
        return _POSIX2_BC_STRING_MAX;
    }
    private static final int _POSIX2_COLL_WEIGHTS_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_COLL_WEIGHTS_MAX 2
     * }
     */
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return _POSIX2_COLL_WEIGHTS_MAX;
    }
    private static final int _POSIX2_EXPR_NEST_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_EXPR_NEST_MAX 32
     * }
     */
    public static int _POSIX2_EXPR_NEST_MAX() {
        return _POSIX2_EXPR_NEST_MAX;
    }
    private static final int _POSIX2_LINE_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_LINE_MAX 2048
     * }
     */
    public static int _POSIX2_LINE_MAX() {
        return _POSIX2_LINE_MAX;
    }
    private static final int _POSIX2_RE_DUP_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX2_RE_DUP_MAX() {
        return _POSIX2_RE_DUP_MAX;
    }
    private static final int _POSIX2_CHARCLASS_NAME_MAX = (int)14L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_CHARCLASS_NAME_MAX 14
     * }
     */
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return _POSIX2_CHARCLASS_NAME_MAX;
    }
    private static final int COLL_WEIGHTS_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define COLL_WEIGHTS_MAX 255
     * }
     */
    public static int COLL_WEIGHTS_MAX() {
        return COLL_WEIGHTS_MAX;
    }
    private static final int CHARCLASS_NAME_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define CHARCLASS_NAME_MAX 2048
     * }
     */
    public static int CHARCLASS_NAME_MAX() {
        return CHARCLASS_NAME_MAX;
    }
    private static final int cudaHostAllocDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaHostAllocDefault 0
     * }
     */
    public static int cudaHostAllocDefault() {
        return cudaHostAllocDefault;
    }
    private static final int cudaHostAllocPortable = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaHostAllocPortable 1
     * }
     */
    public static int cudaHostAllocPortable() {
        return cudaHostAllocPortable;
    }
    private static final int cudaHostAllocMapped = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaHostAllocMapped 2
     * }
     */
    public static int cudaHostAllocMapped() {
        return cudaHostAllocMapped;
    }
    private static final int cudaHostAllocWriteCombined = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaHostAllocWriteCombined 4
     * }
     */
    public static int cudaHostAllocWriteCombined() {
        return cudaHostAllocWriteCombined;
    }
    private static final int cudaHostRegisterDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaHostRegisterDefault 0
     * }
     */
    public static int cudaHostRegisterDefault() {
        return cudaHostRegisterDefault;
    }
    private static final int cudaHostRegisterPortable = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaHostRegisterPortable 1
     * }
     */
    public static int cudaHostRegisterPortable() {
        return cudaHostRegisterPortable;
    }
    private static final int cudaHostRegisterMapped = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaHostRegisterMapped 2
     * }
     */
    public static int cudaHostRegisterMapped() {
        return cudaHostRegisterMapped;
    }
    private static final int cudaHostRegisterIoMemory = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaHostRegisterIoMemory 4
     * }
     */
    public static int cudaHostRegisterIoMemory() {
        return cudaHostRegisterIoMemory;
    }
    private static final int cudaHostRegisterReadOnly = (int)8L;
    /**
     * {@snippet lang=c :
     * #define cudaHostRegisterReadOnly 8
     * }
     */
    public static int cudaHostRegisterReadOnly() {
        return cudaHostRegisterReadOnly;
    }
    private static final int cudaPeerAccessDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaPeerAccessDefault 0
     * }
     */
    public static int cudaPeerAccessDefault() {
        return cudaPeerAccessDefault;
    }
    private static final int cudaStreamDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaStreamDefault 0
     * }
     */
    public static int cudaStreamDefault() {
        return cudaStreamDefault;
    }
    private static final int cudaStreamNonBlocking = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaStreamNonBlocking 1
     * }
     */
    public static int cudaStreamNonBlocking() {
        return cudaStreamNonBlocking;
    }
    private static final int cudaEventDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaEventDefault 0
     * }
     */
    public static int cudaEventDefault() {
        return cudaEventDefault;
    }
    private static final int cudaEventBlockingSync = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaEventBlockingSync 1
     * }
     */
    public static int cudaEventBlockingSync() {
        return cudaEventBlockingSync;
    }
    private static final int cudaEventDisableTiming = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaEventDisableTiming 2
     * }
     */
    public static int cudaEventDisableTiming() {
        return cudaEventDisableTiming;
    }
    private static final int cudaEventInterprocess = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaEventInterprocess 4
     * }
     */
    public static int cudaEventInterprocess() {
        return cudaEventInterprocess;
    }
    private static final int cudaEventRecordDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaEventRecordDefault 0
     * }
     */
    public static int cudaEventRecordDefault() {
        return cudaEventRecordDefault;
    }
    private static final int cudaEventRecordExternal = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaEventRecordExternal 1
     * }
     */
    public static int cudaEventRecordExternal() {
        return cudaEventRecordExternal;
    }
    private static final int cudaEventWaitDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaEventWaitDefault 0
     * }
     */
    public static int cudaEventWaitDefault() {
        return cudaEventWaitDefault;
    }
    private static final int cudaEventWaitExternal = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaEventWaitExternal 1
     * }
     */
    public static int cudaEventWaitExternal() {
        return cudaEventWaitExternal;
    }
    private static final int cudaDeviceScheduleAuto = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceScheduleAuto 0
     * }
     */
    public static int cudaDeviceScheduleAuto() {
        return cudaDeviceScheduleAuto;
    }
    private static final int cudaDeviceScheduleSpin = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceScheduleSpin 1
     * }
     */
    public static int cudaDeviceScheduleSpin() {
        return cudaDeviceScheduleSpin;
    }
    private static final int cudaDeviceScheduleYield = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceScheduleYield 2
     * }
     */
    public static int cudaDeviceScheduleYield() {
        return cudaDeviceScheduleYield;
    }
    private static final int cudaDeviceScheduleBlockingSync = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceScheduleBlockingSync 4
     * }
     */
    public static int cudaDeviceScheduleBlockingSync() {
        return cudaDeviceScheduleBlockingSync;
    }
    private static final int cudaDeviceBlockingSync = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceBlockingSync 4
     * }
     */
    public static int cudaDeviceBlockingSync() {
        return cudaDeviceBlockingSync;
    }
    private static final int cudaDeviceScheduleMask = (int)7L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceScheduleMask 7
     * }
     */
    public static int cudaDeviceScheduleMask() {
        return cudaDeviceScheduleMask;
    }
    private static final int cudaDeviceMapHost = (int)8L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceMapHost 8
     * }
     */
    public static int cudaDeviceMapHost() {
        return cudaDeviceMapHost;
    }
    private static final int cudaDeviceLmemResizeToMax = (int)16L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceLmemResizeToMax 16
     * }
     */
    public static int cudaDeviceLmemResizeToMax() {
        return cudaDeviceLmemResizeToMax;
    }
    private static final int cudaDeviceSyncMemops = (int)128L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceSyncMemops 128
     * }
     */
    public static int cudaDeviceSyncMemops() {
        return cudaDeviceSyncMemops;
    }
    private static final int cudaDeviceMask = (int)255L;
    /**
     * {@snippet lang=c :
     * #define cudaDeviceMask 255
     * }
     */
    public static int cudaDeviceMask() {
        return cudaDeviceMask;
    }
    private static final int cudaArrayDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaArrayDefault 0
     * }
     */
    public static int cudaArrayDefault() {
        return cudaArrayDefault;
    }
    private static final int cudaArrayLayered = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaArrayLayered 1
     * }
     */
    public static int cudaArrayLayered() {
        return cudaArrayLayered;
    }
    private static final int cudaArraySurfaceLoadStore = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaArraySurfaceLoadStore 2
     * }
     */
    public static int cudaArraySurfaceLoadStore() {
        return cudaArraySurfaceLoadStore;
    }
    private static final int cudaArrayCubemap = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaArrayCubemap 4
     * }
     */
    public static int cudaArrayCubemap() {
        return cudaArrayCubemap;
    }
    private static final int cudaArrayTextureGather = (int)8L;
    /**
     * {@snippet lang=c :
     * #define cudaArrayTextureGather 8
     * }
     */
    public static int cudaArrayTextureGather() {
        return cudaArrayTextureGather;
    }
    private static final int cudaArrayColorAttachment = (int)32L;
    /**
     * {@snippet lang=c :
     * #define cudaArrayColorAttachment 32
     * }
     */
    public static int cudaArrayColorAttachment() {
        return cudaArrayColorAttachment;
    }
    private static final int cudaArraySparse = (int)64L;
    /**
     * {@snippet lang=c :
     * #define cudaArraySparse 64
     * }
     */
    public static int cudaArraySparse() {
        return cudaArraySparse;
    }
    private static final int cudaArrayDeferredMapping = (int)128L;
    /**
     * {@snippet lang=c :
     * #define cudaArrayDeferredMapping 128
     * }
     */
    public static int cudaArrayDeferredMapping() {
        return cudaArrayDeferredMapping;
    }
    private static final int cudaIpcMemLazyEnablePeerAccess = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaIpcMemLazyEnablePeerAccess 1
     * }
     */
    public static int cudaIpcMemLazyEnablePeerAccess() {
        return cudaIpcMemLazyEnablePeerAccess;
    }
    private static final int cudaMemAttachGlobal = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaMemAttachGlobal 1
     * }
     */
    public static int cudaMemAttachGlobal() {
        return cudaMemAttachGlobal;
    }
    private static final int cudaMemAttachHost = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaMemAttachHost 2
     * }
     */
    public static int cudaMemAttachHost() {
        return cudaMemAttachHost;
    }
    private static final int cudaMemAttachSingle = (int)4L;
    /**
     * {@snippet lang=c :
     * #define cudaMemAttachSingle 4
     * }
     */
    public static int cudaMemAttachSingle() {
        return cudaMemAttachSingle;
    }
    private static final int cudaOccupancyDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaOccupancyDefault 0
     * }
     */
    public static int cudaOccupancyDefault() {
        return cudaOccupancyDefault;
    }
    private static final int cudaOccupancyDisableCachingOverride = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaOccupancyDisableCachingOverride 1
     * }
     */
    public static int cudaOccupancyDisableCachingOverride() {
        return cudaOccupancyDisableCachingOverride;
    }
    private static final int cudaInitDeviceFlagsAreValid = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaInitDeviceFlagsAreValid 1
     * }
     */
    public static int cudaInitDeviceFlagsAreValid() {
        return cudaInitDeviceFlagsAreValid;
    }
    private static final int cudaCooperativeLaunchMultiDeviceNoPreSync = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaCooperativeLaunchMultiDeviceNoPreSync 1
     * }
     */
    public static int cudaCooperativeLaunchMultiDeviceNoPreSync() {
        return cudaCooperativeLaunchMultiDeviceNoPreSync;
    }
    private static final int cudaCooperativeLaunchMultiDeviceNoPostSync = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaCooperativeLaunchMultiDeviceNoPostSync 2
     * }
     */
    public static int cudaCooperativeLaunchMultiDeviceNoPostSync() {
        return cudaCooperativeLaunchMultiDeviceNoPostSync;
    }
    private static final int cudaArraySparsePropertiesSingleMipTail = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaArraySparsePropertiesSingleMipTail 1
     * }
     */
    public static int cudaArraySparsePropertiesSingleMipTail() {
        return cudaArraySparsePropertiesSingleMipTail;
    }
    private static final int CUDA_IPC_HANDLE_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CUDA_IPC_HANDLE_SIZE 64
     * }
     */
    public static int CUDA_IPC_HANDLE_SIZE() {
        return CUDA_IPC_HANDLE_SIZE;
    }
    private static final int cudaExternalMemoryDedicated = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaExternalMemoryDedicated 1
     * }
     */
    public static int cudaExternalMemoryDedicated() {
        return cudaExternalMemoryDedicated;
    }
    private static final int cudaExternalSemaphoreSignalSkipNvSciBufMemSync = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaExternalSemaphoreSignalSkipNvSciBufMemSync 1
     * }
     */
    public static int cudaExternalSemaphoreSignalSkipNvSciBufMemSync() {
        return cudaExternalSemaphoreSignalSkipNvSciBufMemSync;
    }
    private static final int cudaExternalSemaphoreWaitSkipNvSciBufMemSync = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaExternalSemaphoreWaitSkipNvSciBufMemSync 2
     * }
     */
    public static int cudaExternalSemaphoreWaitSkipNvSciBufMemSync() {
        return cudaExternalSemaphoreWaitSkipNvSciBufMemSync;
    }
    private static final int cudaNvSciSyncAttrSignal = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaNvSciSyncAttrSignal 1
     * }
     */
    public static int cudaNvSciSyncAttrSignal() {
        return cudaNvSciSyncAttrSignal;
    }
    private static final int cudaNvSciSyncAttrWait = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaNvSciSyncAttrWait 2
     * }
     */
    public static int cudaNvSciSyncAttrWait() {
        return cudaNvSciSyncAttrWait;
    }
    private static final int cudaGraphKernelNodePortDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * #define cudaGraphKernelNodePortDefault 0
     * }
     */
    public static int cudaGraphKernelNodePortDefault() {
        return cudaGraphKernelNodePortDefault;
    }
    private static final int cudaGraphKernelNodePortProgrammatic = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaGraphKernelNodePortProgrammatic 1
     * }
     */
    public static int cudaGraphKernelNodePortProgrammatic() {
        return cudaGraphKernelNodePortProgrammatic;
    }
    private static final int cudaGraphKernelNodePortLaunchCompletion = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaGraphKernelNodePortLaunchCompletion 2
     * }
     */
    public static int cudaGraphKernelNodePortLaunchCompletion() {
        return cudaGraphKernelNodePortLaunchCompletion;
    }
    private static final int cudaSurfaceType1D = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaSurfaceType1D 1
     * }
     */
    public static int cudaSurfaceType1D() {
        return cudaSurfaceType1D;
    }
    private static final int cudaSurfaceType2D = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaSurfaceType2D 2
     * }
     */
    public static int cudaSurfaceType2D() {
        return cudaSurfaceType2D;
    }
    private static final int cudaSurfaceType3D = (int)3L;
    /**
     * {@snippet lang=c :
     * #define cudaSurfaceType3D 3
     * }
     */
    public static int cudaSurfaceType3D() {
        return cudaSurfaceType3D;
    }
    private static final int cudaSurfaceTypeCubemap = (int)12L;
    /**
     * {@snippet lang=c :
     * #define cudaSurfaceTypeCubemap 12
     * }
     */
    public static int cudaSurfaceTypeCubemap() {
        return cudaSurfaceTypeCubemap;
    }
    private static final int cudaSurfaceType1DLayered = (int)241L;
    /**
     * {@snippet lang=c :
     * #define cudaSurfaceType1DLayered 241
     * }
     */
    public static int cudaSurfaceType1DLayered() {
        return cudaSurfaceType1DLayered;
    }
    private static final int cudaSurfaceType2DLayered = (int)242L;
    /**
     * {@snippet lang=c :
     * #define cudaSurfaceType2DLayered 242
     * }
     */
    public static int cudaSurfaceType2DLayered() {
        return cudaSurfaceType2DLayered;
    }
    private static final int cudaSurfaceTypeCubemapLayered = (int)252L;
    /**
     * {@snippet lang=c :
     * #define cudaSurfaceTypeCubemapLayered 252
     * }
     */
    public static int cudaSurfaceTypeCubemapLayered() {
        return cudaSurfaceTypeCubemapLayered;
    }
    private static final int cudaTextureType1D = (int)1L;
    /**
     * {@snippet lang=c :
     * #define cudaTextureType1D 1
     * }
     */
    public static int cudaTextureType1D() {
        return cudaTextureType1D;
    }
    private static final int cudaTextureType2D = (int)2L;
    /**
     * {@snippet lang=c :
     * #define cudaTextureType2D 2
     * }
     */
    public static int cudaTextureType2D() {
        return cudaTextureType2D;
    }
    private static final int cudaTextureType3D = (int)3L;
    /**
     * {@snippet lang=c :
     * #define cudaTextureType3D 3
     * }
     */
    public static int cudaTextureType3D() {
        return cudaTextureType3D;
    }
    private static final int cudaTextureTypeCubemap = (int)12L;
    /**
     * {@snippet lang=c :
     * #define cudaTextureTypeCubemap 12
     * }
     */
    public static int cudaTextureTypeCubemap() {
        return cudaTextureTypeCubemap;
    }
    private static final int cudaTextureType1DLayered = (int)241L;
    /**
     * {@snippet lang=c :
     * #define cudaTextureType1DLayered 241
     * }
     */
    public static int cudaTextureType1DLayered() {
        return cudaTextureType1DLayered;
    }
    private static final int cudaTextureType2DLayered = (int)242L;
    /**
     * {@snippet lang=c :
     * #define cudaTextureType2DLayered 242
     * }
     */
    public static int cudaTextureType2DLayered() {
        return cudaTextureType2DLayered;
    }
    private static final int cudaTextureTypeCubemapLayered = (int)252L;
    /**
     * {@snippet lang=c :
     * #define cudaTextureTypeCubemapLayered 252
     * }
     */
    public static int cudaTextureTypeCubemapLayered() {
        return cudaTextureTypeCubemapLayered;
    }
    private static final int CUDART_VERSION = (int)12060L;
    /**
     * {@snippet lang=c :
     * #define CUDART_VERSION 12060
     * }
     */
    public static int CUDART_VERSION() {
        return CUDART_VERSION;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int DLPACK_VERSION = (int)80L;
    /**
     * {@snippet lang=c :
     * #define DLPACK_VERSION 80
     * }
     */
    public static int DLPACK_VERSION() {
        return DLPACK_VERSION;
    }
    private static final int DLPACK_ABI_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define DLPACK_ABI_VERSION 1
     * }
     */
    public static int DLPACK_ABI_VERSION() {
        return DLPACK_ABI_VERSION;
    }
    private static final int cudaRoundNearest = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaRoundMode.cudaRoundNearest = 0
     * }
     */
    public static int cudaRoundNearest() {
        return cudaRoundNearest;
    }
    private static final int cudaRoundZero = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaRoundMode.cudaRoundZero = 1
     * }
     */
    public static int cudaRoundZero() {
        return cudaRoundZero;
    }
    private static final int cudaRoundPosInf = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaRoundMode.cudaRoundPosInf = 2
     * }
     */
    public static int cudaRoundPosInf() {
        return cudaRoundPosInf;
    }
    private static final int cudaRoundMinInf = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaRoundMode.cudaRoundMinInf = 3
     * }
     */
    public static int cudaRoundMinInf() {
        return cudaRoundMinInf;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = PanamaFFMAPI.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = PanamaFFMAPI.C_INT;
    private static final int cudaSuccess = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaSuccess = 0
     * }
     */
    public static int cudaSuccess() {
        return cudaSuccess;
    }
    private static final int cudaErrorInvalidValue = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidValue = 1
     * }
     */
    public static int cudaErrorInvalidValue() {
        return cudaErrorInvalidValue;
    }
    private static final int cudaErrorMemoryAllocation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMemoryAllocation = 2
     * }
     */
    public static int cudaErrorMemoryAllocation() {
        return cudaErrorMemoryAllocation;
    }
    private static final int cudaErrorInitializationError = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInitializationError = 3
     * }
     */
    public static int cudaErrorInitializationError() {
        return cudaErrorInitializationError;
    }
    private static final int cudaErrorCudartUnloading = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorCudartUnloading = 4
     * }
     */
    public static int cudaErrorCudartUnloading() {
        return cudaErrorCudartUnloading;
    }
    private static final int cudaErrorProfilerDisabled = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorProfilerDisabled = 5
     * }
     */
    public static int cudaErrorProfilerDisabled() {
        return cudaErrorProfilerDisabled;
    }
    private static final int cudaErrorProfilerNotInitialized = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorProfilerNotInitialized = 6
     * }
     */
    public static int cudaErrorProfilerNotInitialized() {
        return cudaErrorProfilerNotInitialized;
    }
    private static final int cudaErrorProfilerAlreadyStarted = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorProfilerAlreadyStarted = 7
     * }
     */
    public static int cudaErrorProfilerAlreadyStarted() {
        return cudaErrorProfilerAlreadyStarted;
    }
    private static final int cudaErrorProfilerAlreadyStopped = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorProfilerAlreadyStopped = 8
     * }
     */
    public static int cudaErrorProfilerAlreadyStopped() {
        return cudaErrorProfilerAlreadyStopped;
    }
    private static final int cudaErrorInvalidConfiguration = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidConfiguration = 9
     * }
     */
    public static int cudaErrorInvalidConfiguration() {
        return cudaErrorInvalidConfiguration;
    }
    private static final int cudaErrorInvalidPitchValue = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidPitchValue = 12
     * }
     */
    public static int cudaErrorInvalidPitchValue() {
        return cudaErrorInvalidPitchValue;
    }
    private static final int cudaErrorInvalidSymbol = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidSymbol = 13
     * }
     */
    public static int cudaErrorInvalidSymbol() {
        return cudaErrorInvalidSymbol;
    }
    private static final int cudaErrorInvalidHostPointer = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidHostPointer = 16
     * }
     */
    public static int cudaErrorInvalidHostPointer() {
        return cudaErrorInvalidHostPointer;
    }
    private static final int cudaErrorInvalidDevicePointer = (int)17L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidDevicePointer = 17
     * }
     */
    public static int cudaErrorInvalidDevicePointer() {
        return cudaErrorInvalidDevicePointer;
    }
    private static final int cudaErrorInvalidTexture = (int)18L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidTexture = 18
     * }
     */
    public static int cudaErrorInvalidTexture() {
        return cudaErrorInvalidTexture;
    }
    private static final int cudaErrorInvalidTextureBinding = (int)19L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidTextureBinding = 19
     * }
     */
    public static int cudaErrorInvalidTextureBinding() {
        return cudaErrorInvalidTextureBinding;
    }
    private static final int cudaErrorInvalidChannelDescriptor = (int)20L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidChannelDescriptor = 20
     * }
     */
    public static int cudaErrorInvalidChannelDescriptor() {
        return cudaErrorInvalidChannelDescriptor;
    }
    private static final int cudaErrorInvalidMemcpyDirection = (int)21L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidMemcpyDirection = 21
     * }
     */
    public static int cudaErrorInvalidMemcpyDirection() {
        return cudaErrorInvalidMemcpyDirection;
    }
    private static final int cudaErrorAddressOfConstant = (int)22L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorAddressOfConstant = 22
     * }
     */
    public static int cudaErrorAddressOfConstant() {
        return cudaErrorAddressOfConstant;
    }
    private static final int cudaErrorTextureFetchFailed = (int)23L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorTextureFetchFailed = 23
     * }
     */
    public static int cudaErrorTextureFetchFailed() {
        return cudaErrorTextureFetchFailed;
    }
    private static final int cudaErrorTextureNotBound = (int)24L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorTextureNotBound = 24
     * }
     */
    public static int cudaErrorTextureNotBound() {
        return cudaErrorTextureNotBound;
    }
    private static final int cudaErrorSynchronizationError = (int)25L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSynchronizationError = 25
     * }
     */
    public static int cudaErrorSynchronizationError() {
        return cudaErrorSynchronizationError;
    }
    private static final int cudaErrorInvalidFilterSetting = (int)26L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidFilterSetting = 26
     * }
     */
    public static int cudaErrorInvalidFilterSetting() {
        return cudaErrorInvalidFilterSetting;
    }
    private static final int cudaErrorInvalidNormSetting = (int)27L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidNormSetting = 27
     * }
     */
    public static int cudaErrorInvalidNormSetting() {
        return cudaErrorInvalidNormSetting;
    }
    private static final int cudaErrorMixedDeviceExecution = (int)28L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMixedDeviceExecution = 28
     * }
     */
    public static int cudaErrorMixedDeviceExecution() {
        return cudaErrorMixedDeviceExecution;
    }
    private static final int cudaErrorNotYetImplemented = (int)31L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNotYetImplemented = 31
     * }
     */
    public static int cudaErrorNotYetImplemented() {
        return cudaErrorNotYetImplemented;
    }
    private static final int cudaErrorMemoryValueTooLarge = (int)32L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMemoryValueTooLarge = 32
     * }
     */
    public static int cudaErrorMemoryValueTooLarge() {
        return cudaErrorMemoryValueTooLarge;
    }
    private static final int cudaErrorStubLibrary = (int)34L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStubLibrary = 34
     * }
     */
    public static int cudaErrorStubLibrary() {
        return cudaErrorStubLibrary;
    }
    private static final int cudaErrorInsufficientDriver = (int)35L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInsufficientDriver = 35
     * }
     */
    public static int cudaErrorInsufficientDriver() {
        return cudaErrorInsufficientDriver;
    }
    private static final int cudaErrorCallRequiresNewerDriver = (int)36L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorCallRequiresNewerDriver = 36
     * }
     */
    public static int cudaErrorCallRequiresNewerDriver() {
        return cudaErrorCallRequiresNewerDriver;
    }
    private static final int cudaErrorInvalidSurface = (int)37L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidSurface = 37
     * }
     */
    public static int cudaErrorInvalidSurface() {
        return cudaErrorInvalidSurface;
    }
    private static final int cudaErrorDuplicateVariableName = (int)43L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorDuplicateVariableName = 43
     * }
     */
    public static int cudaErrorDuplicateVariableName() {
        return cudaErrorDuplicateVariableName;
    }
    private static final int cudaErrorDuplicateTextureName = (int)44L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorDuplicateTextureName = 44
     * }
     */
    public static int cudaErrorDuplicateTextureName() {
        return cudaErrorDuplicateTextureName;
    }
    private static final int cudaErrorDuplicateSurfaceName = (int)45L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorDuplicateSurfaceName = 45
     * }
     */
    public static int cudaErrorDuplicateSurfaceName() {
        return cudaErrorDuplicateSurfaceName;
    }
    private static final int cudaErrorDevicesUnavailable = (int)46L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorDevicesUnavailable = 46
     * }
     */
    public static int cudaErrorDevicesUnavailable() {
        return cudaErrorDevicesUnavailable;
    }
    private static final int cudaErrorIncompatibleDriverContext = (int)49L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorIncompatibleDriverContext = 49
     * }
     */
    public static int cudaErrorIncompatibleDriverContext() {
        return cudaErrorIncompatibleDriverContext;
    }
    private static final int cudaErrorMissingConfiguration = (int)52L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMissingConfiguration = 52
     * }
     */
    public static int cudaErrorMissingConfiguration() {
        return cudaErrorMissingConfiguration;
    }
    private static final int cudaErrorPriorLaunchFailure = (int)53L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorPriorLaunchFailure = 53
     * }
     */
    public static int cudaErrorPriorLaunchFailure() {
        return cudaErrorPriorLaunchFailure;
    }
    private static final int cudaErrorLaunchMaxDepthExceeded = (int)65L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchMaxDepthExceeded = 65
     * }
     */
    public static int cudaErrorLaunchMaxDepthExceeded() {
        return cudaErrorLaunchMaxDepthExceeded;
    }
    private static final int cudaErrorLaunchFileScopedTex = (int)66L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchFileScopedTex = 66
     * }
     */
    public static int cudaErrorLaunchFileScopedTex() {
        return cudaErrorLaunchFileScopedTex;
    }
    private static final int cudaErrorLaunchFileScopedSurf = (int)67L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchFileScopedSurf = 67
     * }
     */
    public static int cudaErrorLaunchFileScopedSurf() {
        return cudaErrorLaunchFileScopedSurf;
    }
    private static final int cudaErrorSyncDepthExceeded = (int)68L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSyncDepthExceeded = 68
     * }
     */
    public static int cudaErrorSyncDepthExceeded() {
        return cudaErrorSyncDepthExceeded;
    }
    private static final int cudaErrorLaunchPendingCountExceeded = (int)69L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchPendingCountExceeded = 69
     * }
     */
    public static int cudaErrorLaunchPendingCountExceeded() {
        return cudaErrorLaunchPendingCountExceeded;
    }
    private static final int cudaErrorInvalidDeviceFunction = (int)98L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidDeviceFunction = 98
     * }
     */
    public static int cudaErrorInvalidDeviceFunction() {
        return cudaErrorInvalidDeviceFunction;
    }
    private static final int cudaErrorNoDevice = (int)100L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNoDevice = 100
     * }
     */
    public static int cudaErrorNoDevice() {
        return cudaErrorNoDevice;
    }
    private static final int cudaErrorInvalidDevice = (int)101L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidDevice = 101
     * }
     */
    public static int cudaErrorInvalidDevice() {
        return cudaErrorInvalidDevice;
    }
    private static final int cudaErrorDeviceNotLicensed = (int)102L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorDeviceNotLicensed = 102
     * }
     */
    public static int cudaErrorDeviceNotLicensed() {
        return cudaErrorDeviceNotLicensed;
    }
    private static final int cudaErrorSoftwareValidityNotEstablished = (int)103L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSoftwareValidityNotEstablished = 103
     * }
     */
    public static int cudaErrorSoftwareValidityNotEstablished() {
        return cudaErrorSoftwareValidityNotEstablished;
    }
    private static final int cudaErrorStartupFailure = (int)127L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStartupFailure = 127
     * }
     */
    public static int cudaErrorStartupFailure() {
        return cudaErrorStartupFailure;
    }
    private static final int cudaErrorInvalidKernelImage = (int)200L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidKernelImage = 200
     * }
     */
    public static int cudaErrorInvalidKernelImage() {
        return cudaErrorInvalidKernelImage;
    }
    private static final int cudaErrorDeviceUninitialized = (int)201L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorDeviceUninitialized = 201
     * }
     */
    public static int cudaErrorDeviceUninitialized() {
        return cudaErrorDeviceUninitialized;
    }
    private static final int cudaErrorMapBufferObjectFailed = (int)205L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMapBufferObjectFailed = 205
     * }
     */
    public static int cudaErrorMapBufferObjectFailed() {
        return cudaErrorMapBufferObjectFailed;
    }
    private static final int cudaErrorUnmapBufferObjectFailed = (int)206L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorUnmapBufferObjectFailed = 206
     * }
     */
    public static int cudaErrorUnmapBufferObjectFailed() {
        return cudaErrorUnmapBufferObjectFailed;
    }
    private static final int cudaErrorArrayIsMapped = (int)207L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorArrayIsMapped = 207
     * }
     */
    public static int cudaErrorArrayIsMapped() {
        return cudaErrorArrayIsMapped;
    }
    private static final int cudaErrorAlreadyMapped = (int)208L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorAlreadyMapped = 208
     * }
     */
    public static int cudaErrorAlreadyMapped() {
        return cudaErrorAlreadyMapped;
    }
    private static final int cudaErrorNoKernelImageForDevice = (int)209L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNoKernelImageForDevice = 209
     * }
     */
    public static int cudaErrorNoKernelImageForDevice() {
        return cudaErrorNoKernelImageForDevice;
    }
    private static final int cudaErrorAlreadyAcquired = (int)210L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorAlreadyAcquired = 210
     * }
     */
    public static int cudaErrorAlreadyAcquired() {
        return cudaErrorAlreadyAcquired;
    }
    private static final int cudaErrorNotMapped = (int)211L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNotMapped = 211
     * }
     */
    public static int cudaErrorNotMapped() {
        return cudaErrorNotMapped;
    }
    private static final int cudaErrorNotMappedAsArray = (int)212L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNotMappedAsArray = 212
     * }
     */
    public static int cudaErrorNotMappedAsArray() {
        return cudaErrorNotMappedAsArray;
    }
    private static final int cudaErrorNotMappedAsPointer = (int)213L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNotMappedAsPointer = 213
     * }
     */
    public static int cudaErrorNotMappedAsPointer() {
        return cudaErrorNotMappedAsPointer;
    }
    private static final int cudaErrorECCUncorrectable = (int)214L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorECCUncorrectable = 214
     * }
     */
    public static int cudaErrorECCUncorrectable() {
        return cudaErrorECCUncorrectable;
    }
    private static final int cudaErrorUnsupportedLimit = (int)215L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorUnsupportedLimit = 215
     * }
     */
    public static int cudaErrorUnsupportedLimit() {
        return cudaErrorUnsupportedLimit;
    }
    private static final int cudaErrorDeviceAlreadyInUse = (int)216L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorDeviceAlreadyInUse = 216
     * }
     */
    public static int cudaErrorDeviceAlreadyInUse() {
        return cudaErrorDeviceAlreadyInUse;
    }
    private static final int cudaErrorPeerAccessUnsupported = (int)217L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorPeerAccessUnsupported = 217
     * }
     */
    public static int cudaErrorPeerAccessUnsupported() {
        return cudaErrorPeerAccessUnsupported;
    }
    private static final int cudaErrorInvalidPtx = (int)218L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidPtx = 218
     * }
     */
    public static int cudaErrorInvalidPtx() {
        return cudaErrorInvalidPtx;
    }
    private static final int cudaErrorInvalidGraphicsContext = (int)219L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidGraphicsContext = 219
     * }
     */
    public static int cudaErrorInvalidGraphicsContext() {
        return cudaErrorInvalidGraphicsContext;
    }
    private static final int cudaErrorNvlinkUncorrectable = (int)220L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNvlinkUncorrectable = 220
     * }
     */
    public static int cudaErrorNvlinkUncorrectable() {
        return cudaErrorNvlinkUncorrectable;
    }
    private static final int cudaErrorJitCompilerNotFound = (int)221L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorJitCompilerNotFound = 221
     * }
     */
    public static int cudaErrorJitCompilerNotFound() {
        return cudaErrorJitCompilerNotFound;
    }
    private static final int cudaErrorUnsupportedPtxVersion = (int)222L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorUnsupportedPtxVersion = 222
     * }
     */
    public static int cudaErrorUnsupportedPtxVersion() {
        return cudaErrorUnsupportedPtxVersion;
    }
    private static final int cudaErrorJitCompilationDisabled = (int)223L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorJitCompilationDisabled = 223
     * }
     */
    public static int cudaErrorJitCompilationDisabled() {
        return cudaErrorJitCompilationDisabled;
    }
    private static final int cudaErrorUnsupportedExecAffinity = (int)224L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorUnsupportedExecAffinity = 224
     * }
     */
    public static int cudaErrorUnsupportedExecAffinity() {
        return cudaErrorUnsupportedExecAffinity;
    }
    private static final int cudaErrorUnsupportedDevSideSync = (int)225L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorUnsupportedDevSideSync = 225
     * }
     */
    public static int cudaErrorUnsupportedDevSideSync() {
        return cudaErrorUnsupportedDevSideSync;
    }
    private static final int cudaErrorInvalidSource = (int)300L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidSource = 300
     * }
     */
    public static int cudaErrorInvalidSource() {
        return cudaErrorInvalidSource;
    }
    private static final int cudaErrorFileNotFound = (int)301L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorFileNotFound = 301
     * }
     */
    public static int cudaErrorFileNotFound() {
        return cudaErrorFileNotFound;
    }
    private static final int cudaErrorSharedObjectSymbolNotFound = (int)302L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSharedObjectSymbolNotFound = 302
     * }
     */
    public static int cudaErrorSharedObjectSymbolNotFound() {
        return cudaErrorSharedObjectSymbolNotFound;
    }
    private static final int cudaErrorSharedObjectInitFailed = (int)303L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSharedObjectInitFailed = 303
     * }
     */
    public static int cudaErrorSharedObjectInitFailed() {
        return cudaErrorSharedObjectInitFailed;
    }
    private static final int cudaErrorOperatingSystem = (int)304L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorOperatingSystem = 304
     * }
     */
    public static int cudaErrorOperatingSystem() {
        return cudaErrorOperatingSystem;
    }
    private static final int cudaErrorInvalidResourceHandle = (int)400L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidResourceHandle = 400
     * }
     */
    public static int cudaErrorInvalidResourceHandle() {
        return cudaErrorInvalidResourceHandle;
    }
    private static final int cudaErrorIllegalState = (int)401L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorIllegalState = 401
     * }
     */
    public static int cudaErrorIllegalState() {
        return cudaErrorIllegalState;
    }
    private static final int cudaErrorLossyQuery = (int)402L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLossyQuery = 402
     * }
     */
    public static int cudaErrorLossyQuery() {
        return cudaErrorLossyQuery;
    }
    private static final int cudaErrorSymbolNotFound = (int)500L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSymbolNotFound = 500
     * }
     */
    public static int cudaErrorSymbolNotFound() {
        return cudaErrorSymbolNotFound;
    }
    private static final int cudaErrorNotReady = (int)600L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNotReady = 600
     * }
     */
    public static int cudaErrorNotReady() {
        return cudaErrorNotReady;
    }
    private static final int cudaErrorIllegalAddress = (int)700L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorIllegalAddress = 700
     * }
     */
    public static int cudaErrorIllegalAddress() {
        return cudaErrorIllegalAddress;
    }
    private static final int cudaErrorLaunchOutOfResources = (int)701L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchOutOfResources = 701
     * }
     */
    public static int cudaErrorLaunchOutOfResources() {
        return cudaErrorLaunchOutOfResources;
    }
    private static final int cudaErrorLaunchTimeout = (int)702L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchTimeout = 702
     * }
     */
    public static int cudaErrorLaunchTimeout() {
        return cudaErrorLaunchTimeout;
    }
    private static final int cudaErrorLaunchIncompatibleTexturing = (int)703L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchIncompatibleTexturing = 703
     * }
     */
    public static int cudaErrorLaunchIncompatibleTexturing() {
        return cudaErrorLaunchIncompatibleTexturing;
    }
    private static final int cudaErrorPeerAccessAlreadyEnabled = (int)704L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorPeerAccessAlreadyEnabled = 704
     * }
     */
    public static int cudaErrorPeerAccessAlreadyEnabled() {
        return cudaErrorPeerAccessAlreadyEnabled;
    }
    private static final int cudaErrorPeerAccessNotEnabled = (int)705L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorPeerAccessNotEnabled = 705
     * }
     */
    public static int cudaErrorPeerAccessNotEnabled() {
        return cudaErrorPeerAccessNotEnabled;
    }
    private static final int cudaErrorSetOnActiveProcess = (int)708L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSetOnActiveProcess = 708
     * }
     */
    public static int cudaErrorSetOnActiveProcess() {
        return cudaErrorSetOnActiveProcess;
    }
    private static final int cudaErrorContextIsDestroyed = (int)709L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorContextIsDestroyed = 709
     * }
     */
    public static int cudaErrorContextIsDestroyed() {
        return cudaErrorContextIsDestroyed;
    }
    private static final int cudaErrorAssert = (int)710L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorAssert = 710
     * }
     */
    public static int cudaErrorAssert() {
        return cudaErrorAssert;
    }
    private static final int cudaErrorTooManyPeers = (int)711L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorTooManyPeers = 711
     * }
     */
    public static int cudaErrorTooManyPeers() {
        return cudaErrorTooManyPeers;
    }
    private static final int cudaErrorHostMemoryAlreadyRegistered = (int)712L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorHostMemoryAlreadyRegistered = 712
     * }
     */
    public static int cudaErrorHostMemoryAlreadyRegistered() {
        return cudaErrorHostMemoryAlreadyRegistered;
    }
    private static final int cudaErrorHostMemoryNotRegistered = (int)713L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorHostMemoryNotRegistered = 713
     * }
     */
    public static int cudaErrorHostMemoryNotRegistered() {
        return cudaErrorHostMemoryNotRegistered;
    }
    private static final int cudaErrorHardwareStackError = (int)714L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorHardwareStackError = 714
     * }
     */
    public static int cudaErrorHardwareStackError() {
        return cudaErrorHardwareStackError;
    }
    private static final int cudaErrorIllegalInstruction = (int)715L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorIllegalInstruction = 715
     * }
     */
    public static int cudaErrorIllegalInstruction() {
        return cudaErrorIllegalInstruction;
    }
    private static final int cudaErrorMisalignedAddress = (int)716L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMisalignedAddress = 716
     * }
     */
    public static int cudaErrorMisalignedAddress() {
        return cudaErrorMisalignedAddress;
    }
    private static final int cudaErrorInvalidAddressSpace = (int)717L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidAddressSpace = 717
     * }
     */
    public static int cudaErrorInvalidAddressSpace() {
        return cudaErrorInvalidAddressSpace;
    }
    private static final int cudaErrorInvalidPc = (int)718L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidPc = 718
     * }
     */
    public static int cudaErrorInvalidPc() {
        return cudaErrorInvalidPc;
    }
    private static final int cudaErrorLaunchFailure = (int)719L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorLaunchFailure = 719
     * }
     */
    public static int cudaErrorLaunchFailure() {
        return cudaErrorLaunchFailure;
    }
    private static final int cudaErrorCooperativeLaunchTooLarge = (int)720L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorCooperativeLaunchTooLarge = 720
     * }
     */
    public static int cudaErrorCooperativeLaunchTooLarge() {
        return cudaErrorCooperativeLaunchTooLarge;
    }
    private static final int cudaErrorNotPermitted = (int)800L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNotPermitted = 800
     * }
     */
    public static int cudaErrorNotPermitted() {
        return cudaErrorNotPermitted;
    }
    private static final int cudaErrorNotSupported = (int)801L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorNotSupported = 801
     * }
     */
    public static int cudaErrorNotSupported() {
        return cudaErrorNotSupported;
    }
    private static final int cudaErrorSystemNotReady = (int)802L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSystemNotReady = 802
     * }
     */
    public static int cudaErrorSystemNotReady() {
        return cudaErrorSystemNotReady;
    }
    private static final int cudaErrorSystemDriverMismatch = (int)803L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorSystemDriverMismatch = 803
     * }
     */
    public static int cudaErrorSystemDriverMismatch() {
        return cudaErrorSystemDriverMismatch;
    }
    private static final int cudaErrorCompatNotSupportedOnDevice = (int)804L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorCompatNotSupportedOnDevice = 804
     * }
     */
    public static int cudaErrorCompatNotSupportedOnDevice() {
        return cudaErrorCompatNotSupportedOnDevice;
    }
    private static final int cudaErrorMpsConnectionFailed = (int)805L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMpsConnectionFailed = 805
     * }
     */
    public static int cudaErrorMpsConnectionFailed() {
        return cudaErrorMpsConnectionFailed;
    }
    private static final int cudaErrorMpsRpcFailure = (int)806L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMpsRpcFailure = 806
     * }
     */
    public static int cudaErrorMpsRpcFailure() {
        return cudaErrorMpsRpcFailure;
    }
    private static final int cudaErrorMpsServerNotReady = (int)807L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMpsServerNotReady = 807
     * }
     */
    public static int cudaErrorMpsServerNotReady() {
        return cudaErrorMpsServerNotReady;
    }
    private static final int cudaErrorMpsMaxClientsReached = (int)808L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMpsMaxClientsReached = 808
     * }
     */
    public static int cudaErrorMpsMaxClientsReached() {
        return cudaErrorMpsMaxClientsReached;
    }
    private static final int cudaErrorMpsMaxConnectionsReached = (int)809L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMpsMaxConnectionsReached = 809
     * }
     */
    public static int cudaErrorMpsMaxConnectionsReached() {
        return cudaErrorMpsMaxConnectionsReached;
    }
    private static final int cudaErrorMpsClientTerminated = (int)810L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorMpsClientTerminated = 810
     * }
     */
    public static int cudaErrorMpsClientTerminated() {
        return cudaErrorMpsClientTerminated;
    }
    private static final int cudaErrorCdpNotSupported = (int)811L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorCdpNotSupported = 811
     * }
     */
    public static int cudaErrorCdpNotSupported() {
        return cudaErrorCdpNotSupported;
    }
    private static final int cudaErrorCdpVersionMismatch = (int)812L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorCdpVersionMismatch = 812
     * }
     */
    public static int cudaErrorCdpVersionMismatch() {
        return cudaErrorCdpVersionMismatch;
    }
    private static final int cudaErrorStreamCaptureUnsupported = (int)900L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureUnsupported = 900
     * }
     */
    public static int cudaErrorStreamCaptureUnsupported() {
        return cudaErrorStreamCaptureUnsupported;
    }
    private static final int cudaErrorStreamCaptureInvalidated = (int)901L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureInvalidated = 901
     * }
     */
    public static int cudaErrorStreamCaptureInvalidated() {
        return cudaErrorStreamCaptureInvalidated;
    }
    private static final int cudaErrorStreamCaptureMerge = (int)902L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureMerge = 902
     * }
     */
    public static int cudaErrorStreamCaptureMerge() {
        return cudaErrorStreamCaptureMerge;
    }
    private static final int cudaErrorStreamCaptureUnmatched = (int)903L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureUnmatched = 903
     * }
     */
    public static int cudaErrorStreamCaptureUnmatched() {
        return cudaErrorStreamCaptureUnmatched;
    }
    private static final int cudaErrorStreamCaptureUnjoined = (int)904L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureUnjoined = 904
     * }
     */
    public static int cudaErrorStreamCaptureUnjoined() {
        return cudaErrorStreamCaptureUnjoined;
    }
    private static final int cudaErrorStreamCaptureIsolation = (int)905L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureIsolation = 905
     * }
     */
    public static int cudaErrorStreamCaptureIsolation() {
        return cudaErrorStreamCaptureIsolation;
    }
    private static final int cudaErrorStreamCaptureImplicit = (int)906L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureImplicit = 906
     * }
     */
    public static int cudaErrorStreamCaptureImplicit() {
        return cudaErrorStreamCaptureImplicit;
    }
    private static final int cudaErrorCapturedEvent = (int)907L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorCapturedEvent = 907
     * }
     */
    public static int cudaErrorCapturedEvent() {
        return cudaErrorCapturedEvent;
    }
    private static final int cudaErrorStreamCaptureWrongThread = (int)908L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorStreamCaptureWrongThread = 908
     * }
     */
    public static int cudaErrorStreamCaptureWrongThread() {
        return cudaErrorStreamCaptureWrongThread;
    }
    private static final int cudaErrorTimeout = (int)909L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorTimeout = 909
     * }
     */
    public static int cudaErrorTimeout() {
        return cudaErrorTimeout;
    }
    private static final int cudaErrorGraphExecUpdateFailure = (int)910L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorGraphExecUpdateFailure = 910
     * }
     */
    public static int cudaErrorGraphExecUpdateFailure() {
        return cudaErrorGraphExecUpdateFailure;
    }
    private static final int cudaErrorExternalDevice = (int)911L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorExternalDevice = 911
     * }
     */
    public static int cudaErrorExternalDevice() {
        return cudaErrorExternalDevice;
    }
    private static final int cudaErrorInvalidClusterSize = (int)912L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidClusterSize = 912
     * }
     */
    public static int cudaErrorInvalidClusterSize() {
        return cudaErrorInvalidClusterSize;
    }
    private static final int cudaErrorFunctionNotLoaded = (int)913L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorFunctionNotLoaded = 913
     * }
     */
    public static int cudaErrorFunctionNotLoaded() {
        return cudaErrorFunctionNotLoaded;
    }
    private static final int cudaErrorInvalidResourceType = (int)914L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidResourceType = 914
     * }
     */
    public static int cudaErrorInvalidResourceType() {
        return cudaErrorInvalidResourceType;
    }
    private static final int cudaErrorInvalidResourceConfiguration = (int)915L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorInvalidResourceConfiguration = 915
     * }
     */
    public static int cudaErrorInvalidResourceConfiguration() {
        return cudaErrorInvalidResourceConfiguration;
    }
    private static final int cudaErrorUnknown = (int)999L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorUnknown = 999
     * }
     */
    public static int cudaErrorUnknown() {
        return cudaErrorUnknown;
    }
    private static final int cudaErrorApiFailureBase = (int)10000L;
    /**
     * {@snippet lang=c :
     * enum cudaError.cudaErrorApiFailureBase = 10000
     * }
     */
    public static int cudaErrorApiFailureBase() {
        return cudaErrorApiFailureBase;
    }
    private static final int cudaChannelFormatKindSigned = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSigned = 0
     * }
     */
    public static int cudaChannelFormatKindSigned() {
        return cudaChannelFormatKindSigned;
    }
    private static final int cudaChannelFormatKindUnsigned = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsigned = 1
     * }
     */
    public static int cudaChannelFormatKindUnsigned() {
        return cudaChannelFormatKindUnsigned;
    }
    private static final int cudaChannelFormatKindFloat = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindFloat = 2
     * }
     */
    public static int cudaChannelFormatKindFloat() {
        return cudaChannelFormatKindFloat;
    }
    private static final int cudaChannelFormatKindNone = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindNone = 3
     * }
     */
    public static int cudaChannelFormatKindNone() {
        return cudaChannelFormatKindNone;
    }
    private static final int cudaChannelFormatKindNV12 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindNV12 = 4
     * }
     */
    public static int cudaChannelFormatKindNV12() {
        return cudaChannelFormatKindNV12;
    }
    private static final int cudaChannelFormatKindUnsignedNormalized8X1 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedNormalized8X1 = 5
     * }
     */
    public static int cudaChannelFormatKindUnsignedNormalized8X1() {
        return cudaChannelFormatKindUnsignedNormalized8X1;
    }
    private static final int cudaChannelFormatKindUnsignedNormalized8X2 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedNormalized8X2 = 6
     * }
     */
    public static int cudaChannelFormatKindUnsignedNormalized8X2() {
        return cudaChannelFormatKindUnsignedNormalized8X2;
    }
    private static final int cudaChannelFormatKindUnsignedNormalized8X4 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedNormalized8X4 = 7
     * }
     */
    public static int cudaChannelFormatKindUnsignedNormalized8X4() {
        return cudaChannelFormatKindUnsignedNormalized8X4;
    }
    private static final int cudaChannelFormatKindUnsignedNormalized16X1 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedNormalized16X1 = 8
     * }
     */
    public static int cudaChannelFormatKindUnsignedNormalized16X1() {
        return cudaChannelFormatKindUnsignedNormalized16X1;
    }
    private static final int cudaChannelFormatKindUnsignedNormalized16X2 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedNormalized16X2 = 9
     * }
     */
    public static int cudaChannelFormatKindUnsignedNormalized16X2() {
        return cudaChannelFormatKindUnsignedNormalized16X2;
    }
    private static final int cudaChannelFormatKindUnsignedNormalized16X4 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedNormalized16X4 = 10
     * }
     */
    public static int cudaChannelFormatKindUnsignedNormalized16X4() {
        return cudaChannelFormatKindUnsignedNormalized16X4;
    }
    private static final int cudaChannelFormatKindSignedNormalized8X1 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedNormalized8X1 = 11
     * }
     */
    public static int cudaChannelFormatKindSignedNormalized8X1() {
        return cudaChannelFormatKindSignedNormalized8X1;
    }
    private static final int cudaChannelFormatKindSignedNormalized8X2 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedNormalized8X2 = 12
     * }
     */
    public static int cudaChannelFormatKindSignedNormalized8X2() {
        return cudaChannelFormatKindSignedNormalized8X2;
    }
    private static final int cudaChannelFormatKindSignedNormalized8X4 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedNormalized8X4 = 13
     * }
     */
    public static int cudaChannelFormatKindSignedNormalized8X4() {
        return cudaChannelFormatKindSignedNormalized8X4;
    }
    private static final int cudaChannelFormatKindSignedNormalized16X1 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedNormalized16X1 = 14
     * }
     */
    public static int cudaChannelFormatKindSignedNormalized16X1() {
        return cudaChannelFormatKindSignedNormalized16X1;
    }
    private static final int cudaChannelFormatKindSignedNormalized16X2 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedNormalized16X2 = 15
     * }
     */
    public static int cudaChannelFormatKindSignedNormalized16X2() {
        return cudaChannelFormatKindSignedNormalized16X2;
    }
    private static final int cudaChannelFormatKindSignedNormalized16X4 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedNormalized16X4 = 16
     * }
     */
    public static int cudaChannelFormatKindSignedNormalized16X4() {
        return cudaChannelFormatKindSignedNormalized16X4;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed1 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed1 = 17
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed1() {
        return cudaChannelFormatKindUnsignedBlockCompressed1;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed1SRGB = (int)18L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed1SRGB() {
        return cudaChannelFormatKindUnsignedBlockCompressed1SRGB;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed2 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed2 = 19
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed2() {
        return cudaChannelFormatKindUnsignedBlockCompressed2;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed2SRGB = (int)20L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed2SRGB() {
        return cudaChannelFormatKindUnsignedBlockCompressed2SRGB;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed3 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed3 = 21
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed3() {
        return cudaChannelFormatKindUnsignedBlockCompressed3;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed3SRGB = (int)22L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed3SRGB() {
        return cudaChannelFormatKindUnsignedBlockCompressed3SRGB;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed4 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed4 = 23
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed4() {
        return cudaChannelFormatKindUnsignedBlockCompressed4;
    }
    private static final int cudaChannelFormatKindSignedBlockCompressed4 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedBlockCompressed4 = 24
     * }
     */
    public static int cudaChannelFormatKindSignedBlockCompressed4() {
        return cudaChannelFormatKindSignedBlockCompressed4;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed5 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed5 = 25
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed5() {
        return cudaChannelFormatKindUnsignedBlockCompressed5;
    }
    private static final int cudaChannelFormatKindSignedBlockCompressed5 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedBlockCompressed5 = 26
     * }
     */
    public static int cudaChannelFormatKindSignedBlockCompressed5() {
        return cudaChannelFormatKindSignedBlockCompressed5;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed6H = (int)27L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed6H = 27
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed6H() {
        return cudaChannelFormatKindUnsignedBlockCompressed6H;
    }
    private static final int cudaChannelFormatKindSignedBlockCompressed6H = (int)28L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindSignedBlockCompressed6H = 28
     * }
     */
    public static int cudaChannelFormatKindSignedBlockCompressed6H() {
        return cudaChannelFormatKindSignedBlockCompressed6H;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed7 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed7 = 29
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed7() {
        return cudaChannelFormatKindUnsignedBlockCompressed7;
    }
    private static final int cudaChannelFormatKindUnsignedBlockCompressed7SRGB = (int)30L;
    /**
     * {@snippet lang=c :
     * enum cudaChannelFormatKind.cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30
     * }
     */
    public static int cudaChannelFormatKindUnsignedBlockCompressed7SRGB() {
        return cudaChannelFormatKindUnsignedBlockCompressed7SRGB;
    }
    /**
     * {@snippet lang=c :
     * typedef struct cudaArray *cudaArray_t
     * }
     */
    public static final AddressLayout cudaArray_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct cudaArray *cudaArray_const_t
     * }
     */
    public static final AddressLayout cudaArray_const_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct cudaMipmappedArray *cudaMipmappedArray_t
     * }
     */
    public static final AddressLayout cudaMipmappedArray_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t
     * }
     */
    public static final AddressLayout cudaMipmappedArray_const_t = PanamaFFMAPI.C_POINTER;
    private static final int cudaMemoryTypeUnregistered = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryType.cudaMemoryTypeUnregistered = 0
     * }
     */
    public static int cudaMemoryTypeUnregistered() {
        return cudaMemoryTypeUnregistered;
    }
    private static final int cudaMemoryTypeHost = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryType.cudaMemoryTypeHost = 1
     * }
     */
    public static int cudaMemoryTypeHost() {
        return cudaMemoryTypeHost;
    }
    private static final int cudaMemoryTypeDevice = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryType.cudaMemoryTypeDevice = 2
     * }
     */
    public static int cudaMemoryTypeDevice() {
        return cudaMemoryTypeDevice;
    }
    private static final int cudaMemoryTypeManaged = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryType.cudaMemoryTypeManaged = 3
     * }
     */
    public static int cudaMemoryTypeManaged() {
        return cudaMemoryTypeManaged;
    }
    private static final int cudaMemcpyHostToHost = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaMemcpyKind.cudaMemcpyHostToHost = 0
     * }
     */
    public static int cudaMemcpyHostToHost() {
        return cudaMemcpyHostToHost;
    }
    private static final int cudaMemcpyHostToDevice = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemcpyKind.cudaMemcpyHostToDevice = 1
     * }
     */
    public static int cudaMemcpyHostToDevice() {
        return cudaMemcpyHostToDevice;
    }
    private static final int cudaMemcpyDeviceToHost = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaMemcpyKind.cudaMemcpyDeviceToHost = 2
     * }
     */
    public static int cudaMemcpyDeviceToHost() {
        return cudaMemcpyDeviceToHost;
    }
    private static final int cudaMemcpyDeviceToDevice = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaMemcpyKind.cudaMemcpyDeviceToDevice = 3
     * }
     */
    public static int cudaMemcpyDeviceToDevice() {
        return cudaMemcpyDeviceToDevice;
    }
    private static final int cudaMemcpyDefault = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaMemcpyKind.cudaMemcpyDefault = 4
     * }
     */
    public static int cudaMemcpyDefault() {
        return cudaMemcpyDefault;
    }
    private static final int cudaAccessPropertyNormal = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaAccessProperty.cudaAccessPropertyNormal = 0
     * }
     */
    public static int cudaAccessPropertyNormal() {
        return cudaAccessPropertyNormal;
    }
    private static final int cudaAccessPropertyStreaming = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaAccessProperty.cudaAccessPropertyStreaming = 1
     * }
     */
    public static int cudaAccessPropertyStreaming() {
        return cudaAccessPropertyStreaming;
    }
    private static final int cudaAccessPropertyPersisting = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaAccessProperty.cudaAccessPropertyPersisting = 2
     * }
     */
    public static int cudaAccessPropertyPersisting() {
        return cudaAccessPropertyPersisting;
    }
    private static final int cudaStreamCaptureStatusNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamCaptureStatus.cudaStreamCaptureStatusNone = 0
     * }
     */
    public static int cudaStreamCaptureStatusNone() {
        return cudaStreamCaptureStatusNone;
    }
    private static final int cudaStreamCaptureStatusActive = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamCaptureStatus.cudaStreamCaptureStatusActive = 1
     * }
     */
    public static int cudaStreamCaptureStatusActive() {
        return cudaStreamCaptureStatusActive;
    }
    private static final int cudaStreamCaptureStatusInvalidated = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamCaptureStatus.cudaStreamCaptureStatusInvalidated = 2
     * }
     */
    public static int cudaStreamCaptureStatusInvalidated() {
        return cudaStreamCaptureStatusInvalidated;
    }
    private static final int cudaStreamCaptureModeGlobal = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamCaptureMode.cudaStreamCaptureModeGlobal = 0
     * }
     */
    public static int cudaStreamCaptureModeGlobal() {
        return cudaStreamCaptureModeGlobal;
    }
    private static final int cudaStreamCaptureModeThreadLocal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamCaptureMode.cudaStreamCaptureModeThreadLocal = 1
     * }
     */
    public static int cudaStreamCaptureModeThreadLocal() {
        return cudaStreamCaptureModeThreadLocal;
    }
    private static final int cudaStreamCaptureModeRelaxed = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamCaptureMode.cudaStreamCaptureModeRelaxed = 2
     * }
     */
    public static int cudaStreamCaptureModeRelaxed() {
        return cudaStreamCaptureModeRelaxed;
    }
    private static final int cudaSyncPolicyAuto = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaSynchronizationPolicy.cudaSyncPolicyAuto = 1
     * }
     */
    public static int cudaSyncPolicyAuto() {
        return cudaSyncPolicyAuto;
    }
    private static final int cudaSyncPolicySpin = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaSynchronizationPolicy.cudaSyncPolicySpin = 2
     * }
     */
    public static int cudaSyncPolicySpin() {
        return cudaSyncPolicySpin;
    }
    private static final int cudaSyncPolicyYield = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaSynchronizationPolicy.cudaSyncPolicyYield = 3
     * }
     */
    public static int cudaSyncPolicyYield() {
        return cudaSyncPolicyYield;
    }
    private static final int cudaSyncPolicyBlockingSync = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaSynchronizationPolicy.cudaSyncPolicyBlockingSync = 4
     * }
     */
    public static int cudaSyncPolicyBlockingSync() {
        return cudaSyncPolicyBlockingSync;
    }
    private static final int cudaClusterSchedulingPolicyDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaClusterSchedulingPolicy.cudaClusterSchedulingPolicyDefault = 0
     * }
     */
    public static int cudaClusterSchedulingPolicyDefault() {
        return cudaClusterSchedulingPolicyDefault;
    }
    private static final int cudaClusterSchedulingPolicySpread = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaClusterSchedulingPolicy.cudaClusterSchedulingPolicySpread = 1
     * }
     */
    public static int cudaClusterSchedulingPolicySpread() {
        return cudaClusterSchedulingPolicySpread;
    }
    private static final int cudaClusterSchedulingPolicyLoadBalancing = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaClusterSchedulingPolicy.cudaClusterSchedulingPolicyLoadBalancing = 2
     * }
     */
    public static int cudaClusterSchedulingPolicyLoadBalancing() {
        return cudaClusterSchedulingPolicyLoadBalancing;
    }
    private static final int cudaStreamAddCaptureDependencies = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamUpdateCaptureDependenciesFlags.cudaStreamAddCaptureDependencies = 0
     * }
     */
    public static int cudaStreamAddCaptureDependencies() {
        return cudaStreamAddCaptureDependencies;
    }
    private static final int cudaStreamSetCaptureDependencies = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaStreamUpdateCaptureDependenciesFlags.cudaStreamSetCaptureDependencies = 1
     * }
     */
    public static int cudaStreamSetCaptureDependencies() {
        return cudaStreamSetCaptureDependencies;
    }
    private static final int cudaUserObjectNoDestructorSync = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaUserObjectFlags.cudaUserObjectNoDestructorSync = 1
     * }
     */
    public static int cudaUserObjectNoDestructorSync() {
        return cudaUserObjectNoDestructorSync;
    }
    private static final int cudaGraphUserObjectMove = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaUserObjectRetainFlags.cudaGraphUserObjectMove = 1
     * }
     */
    public static int cudaGraphUserObjectMove() {
        return cudaGraphUserObjectMove;
    }
    private static final int cudaGraphicsRegisterFlagsNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsRegisterFlags.cudaGraphicsRegisterFlagsNone = 0
     * }
     */
    public static int cudaGraphicsRegisterFlagsNone() {
        return cudaGraphicsRegisterFlagsNone;
    }
    private static final int cudaGraphicsRegisterFlagsReadOnly = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsRegisterFlags.cudaGraphicsRegisterFlagsReadOnly = 1
     * }
     */
    public static int cudaGraphicsRegisterFlagsReadOnly() {
        return cudaGraphicsRegisterFlagsReadOnly;
    }
    private static final int cudaGraphicsRegisterFlagsWriteDiscard = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsRegisterFlags.cudaGraphicsRegisterFlagsWriteDiscard = 2
     * }
     */
    public static int cudaGraphicsRegisterFlagsWriteDiscard() {
        return cudaGraphicsRegisterFlagsWriteDiscard;
    }
    private static final int cudaGraphicsRegisterFlagsSurfaceLoadStore = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsRegisterFlags.cudaGraphicsRegisterFlagsSurfaceLoadStore = 4
     * }
     */
    public static int cudaGraphicsRegisterFlagsSurfaceLoadStore() {
        return cudaGraphicsRegisterFlagsSurfaceLoadStore;
    }
    private static final int cudaGraphicsRegisterFlagsTextureGather = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsRegisterFlags.cudaGraphicsRegisterFlagsTextureGather = 8
     * }
     */
    public static int cudaGraphicsRegisterFlagsTextureGather() {
        return cudaGraphicsRegisterFlagsTextureGather;
    }
    private static final int cudaGraphicsMapFlagsNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsMapFlags.cudaGraphicsMapFlagsNone = 0
     * }
     */
    public static int cudaGraphicsMapFlagsNone() {
        return cudaGraphicsMapFlagsNone;
    }
    private static final int cudaGraphicsMapFlagsReadOnly = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsMapFlags.cudaGraphicsMapFlagsReadOnly = 1
     * }
     */
    public static int cudaGraphicsMapFlagsReadOnly() {
        return cudaGraphicsMapFlagsReadOnly;
    }
    private static final int cudaGraphicsMapFlagsWriteDiscard = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsMapFlags.cudaGraphicsMapFlagsWriteDiscard = 2
     * }
     */
    public static int cudaGraphicsMapFlagsWriteDiscard() {
        return cudaGraphicsMapFlagsWriteDiscard;
    }
    private static final int cudaGraphicsCubeFacePositiveX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsCubeFace.cudaGraphicsCubeFacePositiveX = 0
     * }
     */
    public static int cudaGraphicsCubeFacePositiveX() {
        return cudaGraphicsCubeFacePositiveX;
    }
    private static final int cudaGraphicsCubeFaceNegativeX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsCubeFace.cudaGraphicsCubeFaceNegativeX = 1
     * }
     */
    public static int cudaGraphicsCubeFaceNegativeX() {
        return cudaGraphicsCubeFaceNegativeX;
    }
    private static final int cudaGraphicsCubeFacePositiveY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsCubeFace.cudaGraphicsCubeFacePositiveY = 2
     * }
     */
    public static int cudaGraphicsCubeFacePositiveY() {
        return cudaGraphicsCubeFacePositiveY;
    }
    private static final int cudaGraphicsCubeFaceNegativeY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsCubeFace.cudaGraphicsCubeFaceNegativeY = 3
     * }
     */
    public static int cudaGraphicsCubeFaceNegativeY() {
        return cudaGraphicsCubeFaceNegativeY;
    }
    private static final int cudaGraphicsCubeFacePositiveZ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsCubeFace.cudaGraphicsCubeFacePositiveZ = 4
     * }
     */
    public static int cudaGraphicsCubeFacePositiveZ() {
        return cudaGraphicsCubeFacePositiveZ;
    }
    private static final int cudaGraphicsCubeFaceNegativeZ = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphicsCubeFace.cudaGraphicsCubeFaceNegativeZ = 5
     * }
     */
    public static int cudaGraphicsCubeFaceNegativeZ() {
        return cudaGraphicsCubeFaceNegativeZ;
    }
    private static final int cudaResourceTypeArray = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceType.cudaResourceTypeArray = 0
     * }
     */
    public static int cudaResourceTypeArray() {
        return cudaResourceTypeArray;
    }
    private static final int cudaResourceTypeMipmappedArray = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceType.cudaResourceTypeMipmappedArray = 1
     * }
     */
    public static int cudaResourceTypeMipmappedArray() {
        return cudaResourceTypeMipmappedArray;
    }
    private static final int cudaResourceTypeLinear = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceType.cudaResourceTypeLinear = 2
     * }
     */
    public static int cudaResourceTypeLinear() {
        return cudaResourceTypeLinear;
    }
    private static final int cudaResourceTypePitch2D = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceType.cudaResourceTypePitch2D = 3
     * }
     */
    public static int cudaResourceTypePitch2D() {
        return cudaResourceTypePitch2D;
    }
    private static final int cudaResViewFormatNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatNone = 0
     * }
     */
    public static int cudaResViewFormatNone() {
        return cudaResViewFormatNone;
    }
    private static final int cudaResViewFormatUnsignedChar1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedChar1 = 1
     * }
     */
    public static int cudaResViewFormatUnsignedChar1() {
        return cudaResViewFormatUnsignedChar1;
    }
    private static final int cudaResViewFormatUnsignedChar2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedChar2 = 2
     * }
     */
    public static int cudaResViewFormatUnsignedChar2() {
        return cudaResViewFormatUnsignedChar2;
    }
    private static final int cudaResViewFormatUnsignedChar4 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedChar4 = 3
     * }
     */
    public static int cudaResViewFormatUnsignedChar4() {
        return cudaResViewFormatUnsignedChar4;
    }
    private static final int cudaResViewFormatSignedChar1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedChar1 = 4
     * }
     */
    public static int cudaResViewFormatSignedChar1() {
        return cudaResViewFormatSignedChar1;
    }
    private static final int cudaResViewFormatSignedChar2 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedChar2 = 5
     * }
     */
    public static int cudaResViewFormatSignedChar2() {
        return cudaResViewFormatSignedChar2;
    }
    private static final int cudaResViewFormatSignedChar4 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedChar4 = 6
     * }
     */
    public static int cudaResViewFormatSignedChar4() {
        return cudaResViewFormatSignedChar4;
    }
    private static final int cudaResViewFormatUnsignedShort1 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedShort1 = 7
     * }
     */
    public static int cudaResViewFormatUnsignedShort1() {
        return cudaResViewFormatUnsignedShort1;
    }
    private static final int cudaResViewFormatUnsignedShort2 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedShort2 = 8
     * }
     */
    public static int cudaResViewFormatUnsignedShort2() {
        return cudaResViewFormatUnsignedShort2;
    }
    private static final int cudaResViewFormatUnsignedShort4 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedShort4 = 9
     * }
     */
    public static int cudaResViewFormatUnsignedShort4() {
        return cudaResViewFormatUnsignedShort4;
    }
    private static final int cudaResViewFormatSignedShort1 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedShort1 = 10
     * }
     */
    public static int cudaResViewFormatSignedShort1() {
        return cudaResViewFormatSignedShort1;
    }
    private static final int cudaResViewFormatSignedShort2 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedShort2 = 11
     * }
     */
    public static int cudaResViewFormatSignedShort2() {
        return cudaResViewFormatSignedShort2;
    }
    private static final int cudaResViewFormatSignedShort4 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedShort4 = 12
     * }
     */
    public static int cudaResViewFormatSignedShort4() {
        return cudaResViewFormatSignedShort4;
    }
    private static final int cudaResViewFormatUnsignedInt1 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedInt1 = 13
     * }
     */
    public static int cudaResViewFormatUnsignedInt1() {
        return cudaResViewFormatUnsignedInt1;
    }
    private static final int cudaResViewFormatUnsignedInt2 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedInt2 = 14
     * }
     */
    public static int cudaResViewFormatUnsignedInt2() {
        return cudaResViewFormatUnsignedInt2;
    }
    private static final int cudaResViewFormatUnsignedInt4 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedInt4 = 15
     * }
     */
    public static int cudaResViewFormatUnsignedInt4() {
        return cudaResViewFormatUnsignedInt4;
    }
    private static final int cudaResViewFormatSignedInt1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedInt1 = 16
     * }
     */
    public static int cudaResViewFormatSignedInt1() {
        return cudaResViewFormatSignedInt1;
    }
    private static final int cudaResViewFormatSignedInt2 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedInt2 = 17
     * }
     */
    public static int cudaResViewFormatSignedInt2() {
        return cudaResViewFormatSignedInt2;
    }
    private static final int cudaResViewFormatSignedInt4 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedInt4 = 18
     * }
     */
    public static int cudaResViewFormatSignedInt4() {
        return cudaResViewFormatSignedInt4;
    }
    private static final int cudaResViewFormatHalf1 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatHalf1 = 19
     * }
     */
    public static int cudaResViewFormatHalf1() {
        return cudaResViewFormatHalf1;
    }
    private static final int cudaResViewFormatHalf2 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatHalf2 = 20
     * }
     */
    public static int cudaResViewFormatHalf2() {
        return cudaResViewFormatHalf2;
    }
    private static final int cudaResViewFormatHalf4 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatHalf4 = 21
     * }
     */
    public static int cudaResViewFormatHalf4() {
        return cudaResViewFormatHalf4;
    }
    private static final int cudaResViewFormatFloat1 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatFloat1 = 22
     * }
     */
    public static int cudaResViewFormatFloat1() {
        return cudaResViewFormatFloat1;
    }
    private static final int cudaResViewFormatFloat2 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatFloat2 = 23
     * }
     */
    public static int cudaResViewFormatFloat2() {
        return cudaResViewFormatFloat2;
    }
    private static final int cudaResViewFormatFloat4 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatFloat4 = 24
     * }
     */
    public static int cudaResViewFormatFloat4() {
        return cudaResViewFormatFloat4;
    }
    private static final int cudaResViewFormatUnsignedBlockCompressed1 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed1 = 25
     * }
     */
    public static int cudaResViewFormatUnsignedBlockCompressed1() {
        return cudaResViewFormatUnsignedBlockCompressed1;
    }
    private static final int cudaResViewFormatUnsignedBlockCompressed2 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed2 = 26
     * }
     */
    public static int cudaResViewFormatUnsignedBlockCompressed2() {
        return cudaResViewFormatUnsignedBlockCompressed2;
    }
    private static final int cudaResViewFormatUnsignedBlockCompressed3 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed3 = 27
     * }
     */
    public static int cudaResViewFormatUnsignedBlockCompressed3() {
        return cudaResViewFormatUnsignedBlockCompressed3;
    }
    private static final int cudaResViewFormatUnsignedBlockCompressed4 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed4 = 28
     * }
     */
    public static int cudaResViewFormatUnsignedBlockCompressed4() {
        return cudaResViewFormatUnsignedBlockCompressed4;
    }
    private static final int cudaResViewFormatSignedBlockCompressed4 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedBlockCompressed4 = 29
     * }
     */
    public static int cudaResViewFormatSignedBlockCompressed4() {
        return cudaResViewFormatSignedBlockCompressed4;
    }
    private static final int cudaResViewFormatUnsignedBlockCompressed5 = (int)30L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed5 = 30
     * }
     */
    public static int cudaResViewFormatUnsignedBlockCompressed5() {
        return cudaResViewFormatUnsignedBlockCompressed5;
    }
    private static final int cudaResViewFormatSignedBlockCompressed5 = (int)31L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedBlockCompressed5 = 31
     * }
     */
    public static int cudaResViewFormatSignedBlockCompressed5() {
        return cudaResViewFormatSignedBlockCompressed5;
    }
    private static final int cudaResViewFormatUnsignedBlockCompressed6H = (int)32L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed6H = 32
     * }
     */
    public static int cudaResViewFormatUnsignedBlockCompressed6H() {
        return cudaResViewFormatUnsignedBlockCompressed6H;
    }
    private static final int cudaResViewFormatSignedBlockCompressed6H = (int)33L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatSignedBlockCompressed6H = 33
     * }
     */
    public static int cudaResViewFormatSignedBlockCompressed6H() {
        return cudaResViewFormatSignedBlockCompressed6H;
    }
    private static final int cudaResViewFormatUnsignedBlockCompressed7 = (int)34L;
    /**
     * {@snippet lang=c :
     * enum cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed7 = 34
     * }
     */
    public static int cudaResViewFormatUnsignedBlockCompressed7() {
        return cudaResViewFormatUnsignedBlockCompressed7;
    }
    private static final int cudaFuncAttributeMaxDynamicSharedMemorySize = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeMaxDynamicSharedMemorySize = 8
     * }
     */
    public static int cudaFuncAttributeMaxDynamicSharedMemorySize() {
        return cudaFuncAttributeMaxDynamicSharedMemorySize;
    }
    private static final int cudaFuncAttributePreferredSharedMemoryCarveout = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributePreferredSharedMemoryCarveout = 9
     * }
     */
    public static int cudaFuncAttributePreferredSharedMemoryCarveout() {
        return cudaFuncAttributePreferredSharedMemoryCarveout;
    }
    private static final int cudaFuncAttributeClusterDimMustBeSet = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeClusterDimMustBeSet = 10
     * }
     */
    public static int cudaFuncAttributeClusterDimMustBeSet() {
        return cudaFuncAttributeClusterDimMustBeSet;
    }
    private static final int cudaFuncAttributeRequiredClusterWidth = (int)11L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeRequiredClusterWidth = 11
     * }
     */
    public static int cudaFuncAttributeRequiredClusterWidth() {
        return cudaFuncAttributeRequiredClusterWidth;
    }
    private static final int cudaFuncAttributeRequiredClusterHeight = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeRequiredClusterHeight = 12
     * }
     */
    public static int cudaFuncAttributeRequiredClusterHeight() {
        return cudaFuncAttributeRequiredClusterHeight;
    }
    private static final int cudaFuncAttributeRequiredClusterDepth = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeRequiredClusterDepth = 13
     * }
     */
    public static int cudaFuncAttributeRequiredClusterDepth() {
        return cudaFuncAttributeRequiredClusterDepth;
    }
    private static final int cudaFuncAttributeNonPortableClusterSizeAllowed = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeNonPortableClusterSizeAllowed = 14
     * }
     */
    public static int cudaFuncAttributeNonPortableClusterSizeAllowed() {
        return cudaFuncAttributeNonPortableClusterSizeAllowed;
    }
    private static final int cudaFuncAttributeClusterSchedulingPolicyPreference = (int)15L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeClusterSchedulingPolicyPreference = 15
     * }
     */
    public static int cudaFuncAttributeClusterSchedulingPolicyPreference() {
        return cudaFuncAttributeClusterSchedulingPolicyPreference;
    }
    private static final int cudaFuncAttributeMax = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncAttribute.cudaFuncAttributeMax = 16
     * }
     */
    public static int cudaFuncAttributeMax() {
        return cudaFuncAttributeMax;
    }
    private static final int cudaFuncCachePreferNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncCache.cudaFuncCachePreferNone = 0
     * }
     */
    public static int cudaFuncCachePreferNone() {
        return cudaFuncCachePreferNone;
    }
    private static final int cudaFuncCachePreferShared = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncCache.cudaFuncCachePreferShared = 1
     * }
     */
    public static int cudaFuncCachePreferShared() {
        return cudaFuncCachePreferShared;
    }
    private static final int cudaFuncCachePreferL1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncCache.cudaFuncCachePreferL1 = 2
     * }
     */
    public static int cudaFuncCachePreferL1() {
        return cudaFuncCachePreferL1;
    }
    private static final int cudaFuncCachePreferEqual = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaFuncCache.cudaFuncCachePreferEqual = 3
     * }
     */
    public static int cudaFuncCachePreferEqual() {
        return cudaFuncCachePreferEqual;
    }
    private static final int cudaSharedMemBankSizeDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaSharedMemConfig.cudaSharedMemBankSizeDefault = 0
     * }
     */
    public static int cudaSharedMemBankSizeDefault() {
        return cudaSharedMemBankSizeDefault;
    }
    private static final int cudaSharedMemBankSizeFourByte = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaSharedMemConfig.cudaSharedMemBankSizeFourByte = 1
     * }
     */
    public static int cudaSharedMemBankSizeFourByte() {
        return cudaSharedMemBankSizeFourByte;
    }
    private static final int cudaSharedMemBankSizeEightByte = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaSharedMemConfig.cudaSharedMemBankSizeEightByte = 2
     * }
     */
    public static int cudaSharedMemBankSizeEightByte() {
        return cudaSharedMemBankSizeEightByte;
    }
    private static final int cudaSharedmemCarveoutDefault = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum cudaSharedCarveout.cudaSharedmemCarveoutDefault = -1
     * }
     */
    public static int cudaSharedmemCarveoutDefault() {
        return cudaSharedmemCarveoutDefault;
    }
    private static final int cudaSharedmemCarveoutMaxShared = (int)100L;
    /**
     * {@snippet lang=c :
     * enum cudaSharedCarveout.cudaSharedmemCarveoutMaxShared = 100
     * }
     */
    public static int cudaSharedmemCarveoutMaxShared() {
        return cudaSharedmemCarveoutMaxShared;
    }
    private static final int cudaSharedmemCarveoutMaxL1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaSharedCarveout.cudaSharedmemCarveoutMaxL1 = 0
     * }
     */
    public static int cudaSharedmemCarveoutMaxL1() {
        return cudaSharedmemCarveoutMaxL1;
    }
    private static final int cudaComputeModeDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaComputeMode.cudaComputeModeDefault = 0
     * }
     */
    public static int cudaComputeModeDefault() {
        return cudaComputeModeDefault;
    }
    private static final int cudaComputeModeExclusive = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaComputeMode.cudaComputeModeExclusive = 1
     * }
     */
    public static int cudaComputeModeExclusive() {
        return cudaComputeModeExclusive;
    }
    private static final int cudaComputeModeProhibited = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaComputeMode.cudaComputeModeProhibited = 2
     * }
     */
    public static int cudaComputeModeProhibited() {
        return cudaComputeModeProhibited;
    }
    private static final int cudaComputeModeExclusiveProcess = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaComputeMode.cudaComputeModeExclusiveProcess = 3
     * }
     */
    public static int cudaComputeModeExclusiveProcess() {
        return cudaComputeModeExclusiveProcess;
    }
    private static final int cudaLimitStackSize = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaLimit.cudaLimitStackSize = 0
     * }
     */
    public static int cudaLimitStackSize() {
        return cudaLimitStackSize;
    }
    private static final int cudaLimitPrintfFifoSize = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaLimit.cudaLimitPrintfFifoSize = 1
     * }
     */
    public static int cudaLimitPrintfFifoSize() {
        return cudaLimitPrintfFifoSize;
    }
    private static final int cudaLimitMallocHeapSize = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaLimit.cudaLimitMallocHeapSize = 2
     * }
     */
    public static int cudaLimitMallocHeapSize() {
        return cudaLimitMallocHeapSize;
    }
    private static final int cudaLimitDevRuntimeSyncDepth = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaLimit.cudaLimitDevRuntimeSyncDepth = 3
     * }
     */
    public static int cudaLimitDevRuntimeSyncDepth() {
        return cudaLimitDevRuntimeSyncDepth;
    }
    private static final int cudaLimitDevRuntimePendingLaunchCount = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaLimit.cudaLimitDevRuntimePendingLaunchCount = 4
     * }
     */
    public static int cudaLimitDevRuntimePendingLaunchCount() {
        return cudaLimitDevRuntimePendingLaunchCount;
    }
    private static final int cudaLimitMaxL2FetchGranularity = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaLimit.cudaLimitMaxL2FetchGranularity = 5
     * }
     */
    public static int cudaLimitMaxL2FetchGranularity() {
        return cudaLimitMaxL2FetchGranularity;
    }
    private static final int cudaLimitPersistingL2CacheSize = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaLimit.cudaLimitPersistingL2CacheSize = 6
     * }
     */
    public static int cudaLimitPersistingL2CacheSize() {
        return cudaLimitPersistingL2CacheSize;
    }
    private static final int cudaMemAdviseSetReadMostly = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryAdvise.cudaMemAdviseSetReadMostly = 1
     * }
     */
    public static int cudaMemAdviseSetReadMostly() {
        return cudaMemAdviseSetReadMostly;
    }
    private static final int cudaMemAdviseUnsetReadMostly = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryAdvise.cudaMemAdviseUnsetReadMostly = 2
     * }
     */
    public static int cudaMemAdviseUnsetReadMostly() {
        return cudaMemAdviseUnsetReadMostly;
    }
    private static final int cudaMemAdviseSetPreferredLocation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryAdvise.cudaMemAdviseSetPreferredLocation = 3
     * }
     */
    public static int cudaMemAdviseSetPreferredLocation() {
        return cudaMemAdviseSetPreferredLocation;
    }
    private static final int cudaMemAdviseUnsetPreferredLocation = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryAdvise.cudaMemAdviseUnsetPreferredLocation = 4
     * }
     */
    public static int cudaMemAdviseUnsetPreferredLocation() {
        return cudaMemAdviseUnsetPreferredLocation;
    }
    private static final int cudaMemAdviseSetAccessedBy = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryAdvise.cudaMemAdviseSetAccessedBy = 5
     * }
     */
    public static int cudaMemAdviseSetAccessedBy() {
        return cudaMemAdviseSetAccessedBy;
    }
    private static final int cudaMemAdviseUnsetAccessedBy = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaMemoryAdvise.cudaMemAdviseUnsetAccessedBy = 6
     * }
     */
    public static int cudaMemAdviseUnsetAccessedBy() {
        return cudaMemAdviseUnsetAccessedBy;
    }
    private static final int cudaMemRangeAttributeReadMostly = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributeReadMostly = 1
     * }
     */
    public static int cudaMemRangeAttributeReadMostly() {
        return cudaMemRangeAttributeReadMostly;
    }
    private static final int cudaMemRangeAttributePreferredLocation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributePreferredLocation = 2
     * }
     */
    public static int cudaMemRangeAttributePreferredLocation() {
        return cudaMemRangeAttributePreferredLocation;
    }
    private static final int cudaMemRangeAttributeAccessedBy = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributeAccessedBy = 3
     * }
     */
    public static int cudaMemRangeAttributeAccessedBy() {
        return cudaMemRangeAttributeAccessedBy;
    }
    private static final int cudaMemRangeAttributeLastPrefetchLocation = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributeLastPrefetchLocation = 4
     * }
     */
    public static int cudaMemRangeAttributeLastPrefetchLocation() {
        return cudaMemRangeAttributeLastPrefetchLocation;
    }
    private static final int cudaMemRangeAttributePreferredLocationType = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributePreferredLocationType = 5
     * }
     */
    public static int cudaMemRangeAttributePreferredLocationType() {
        return cudaMemRangeAttributePreferredLocationType;
    }
    private static final int cudaMemRangeAttributePreferredLocationId = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributePreferredLocationId = 6
     * }
     */
    public static int cudaMemRangeAttributePreferredLocationId() {
        return cudaMemRangeAttributePreferredLocationId;
    }
    private static final int cudaMemRangeAttributeLastPrefetchLocationType = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributeLastPrefetchLocationType = 7
     * }
     */
    public static int cudaMemRangeAttributeLastPrefetchLocationType() {
        return cudaMemRangeAttributeLastPrefetchLocationType;
    }
    private static final int cudaMemRangeAttributeLastPrefetchLocationId = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaMemRangeAttribute.cudaMemRangeAttributeLastPrefetchLocationId = 8
     * }
     */
    public static int cudaMemRangeAttributeLastPrefetchLocationId() {
        return cudaMemRangeAttributeLastPrefetchLocationId;
    }
    private static final int cudaFlushGPUDirectRDMAWritesOptionHost = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaFlushGPUDirectRDMAWritesOptions.cudaFlushGPUDirectRDMAWritesOptionHost = 1
     * }
     */
    public static int cudaFlushGPUDirectRDMAWritesOptionHost() {
        return cudaFlushGPUDirectRDMAWritesOptionHost;
    }
    private static final int cudaFlushGPUDirectRDMAWritesOptionMemOps = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaFlushGPUDirectRDMAWritesOptions.cudaFlushGPUDirectRDMAWritesOptionMemOps = 2
     * }
     */
    public static int cudaFlushGPUDirectRDMAWritesOptionMemOps() {
        return cudaFlushGPUDirectRDMAWritesOptionMemOps;
    }
    private static final int cudaGPUDirectRDMAWritesOrderingNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGPUDirectRDMAWritesOrdering.cudaGPUDirectRDMAWritesOrderingNone = 0
     * }
     */
    public static int cudaGPUDirectRDMAWritesOrderingNone() {
        return cudaGPUDirectRDMAWritesOrderingNone;
    }
    private static final int cudaGPUDirectRDMAWritesOrderingOwner = (int)100L;
    /**
     * {@snippet lang=c :
     * enum cudaGPUDirectRDMAWritesOrdering.cudaGPUDirectRDMAWritesOrderingOwner = 100
     * }
     */
    public static int cudaGPUDirectRDMAWritesOrderingOwner() {
        return cudaGPUDirectRDMAWritesOrderingOwner;
    }
    private static final int cudaGPUDirectRDMAWritesOrderingAllDevices = (int)200L;
    /**
     * {@snippet lang=c :
     * enum cudaGPUDirectRDMAWritesOrdering.cudaGPUDirectRDMAWritesOrderingAllDevices = 200
     * }
     */
    public static int cudaGPUDirectRDMAWritesOrderingAllDevices() {
        return cudaGPUDirectRDMAWritesOrderingAllDevices;
    }
    private static final int cudaFlushGPUDirectRDMAWritesToOwner = (int)100L;
    /**
     * {@snippet lang=c :
     * enum cudaFlushGPUDirectRDMAWritesScope.cudaFlushGPUDirectRDMAWritesToOwner = 100
     * }
     */
    public static int cudaFlushGPUDirectRDMAWritesToOwner() {
        return cudaFlushGPUDirectRDMAWritesToOwner;
    }
    private static final int cudaFlushGPUDirectRDMAWritesToAllDevices = (int)200L;
    /**
     * {@snippet lang=c :
     * enum cudaFlushGPUDirectRDMAWritesScope.cudaFlushGPUDirectRDMAWritesToAllDevices = 200
     * }
     */
    public static int cudaFlushGPUDirectRDMAWritesToAllDevices() {
        return cudaFlushGPUDirectRDMAWritesToAllDevices;
    }
    private static final int cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaFlushGPUDirectRDMAWritesTarget.cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0
     * }
     */
    public static int cudaFlushGPUDirectRDMAWritesTargetCurrentDevice() {
        return cudaFlushGPUDirectRDMAWritesTargetCurrentDevice;
    }
    private static final int cudaDevAttrMaxThreadsPerBlock = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxThreadsPerBlock = 1
     * }
     */
    public static int cudaDevAttrMaxThreadsPerBlock() {
        return cudaDevAttrMaxThreadsPerBlock;
    }
    private static final int cudaDevAttrMaxBlockDimX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxBlockDimX = 2
     * }
     */
    public static int cudaDevAttrMaxBlockDimX() {
        return cudaDevAttrMaxBlockDimX;
    }
    private static final int cudaDevAttrMaxBlockDimY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxBlockDimY = 3
     * }
     */
    public static int cudaDevAttrMaxBlockDimY() {
        return cudaDevAttrMaxBlockDimY;
    }
    private static final int cudaDevAttrMaxBlockDimZ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxBlockDimZ = 4
     * }
     */
    public static int cudaDevAttrMaxBlockDimZ() {
        return cudaDevAttrMaxBlockDimZ;
    }
    private static final int cudaDevAttrMaxGridDimX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxGridDimX = 5
     * }
     */
    public static int cudaDevAttrMaxGridDimX() {
        return cudaDevAttrMaxGridDimX;
    }
    private static final int cudaDevAttrMaxGridDimY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxGridDimY = 6
     * }
     */
    public static int cudaDevAttrMaxGridDimY() {
        return cudaDevAttrMaxGridDimY;
    }
    private static final int cudaDevAttrMaxGridDimZ = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxGridDimZ = 7
     * }
     */
    public static int cudaDevAttrMaxGridDimZ() {
        return cudaDevAttrMaxGridDimZ;
    }
    private static final int cudaDevAttrMaxSharedMemoryPerBlock = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSharedMemoryPerBlock = 8
     * }
     */
    public static int cudaDevAttrMaxSharedMemoryPerBlock() {
        return cudaDevAttrMaxSharedMemoryPerBlock;
    }
    private static final int cudaDevAttrTotalConstantMemory = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrTotalConstantMemory = 9
     * }
     */
    public static int cudaDevAttrTotalConstantMemory() {
        return cudaDevAttrTotalConstantMemory;
    }
    private static final int cudaDevAttrWarpSize = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrWarpSize = 10
     * }
     */
    public static int cudaDevAttrWarpSize() {
        return cudaDevAttrWarpSize;
    }
    private static final int cudaDevAttrMaxPitch = (int)11L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxPitch = 11
     * }
     */
    public static int cudaDevAttrMaxPitch() {
        return cudaDevAttrMaxPitch;
    }
    private static final int cudaDevAttrMaxRegistersPerBlock = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxRegistersPerBlock = 12
     * }
     */
    public static int cudaDevAttrMaxRegistersPerBlock() {
        return cudaDevAttrMaxRegistersPerBlock;
    }
    private static final int cudaDevAttrClockRate = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrClockRate = 13
     * }
     */
    public static int cudaDevAttrClockRate() {
        return cudaDevAttrClockRate;
    }
    private static final int cudaDevAttrTextureAlignment = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrTextureAlignment = 14
     * }
     */
    public static int cudaDevAttrTextureAlignment() {
        return cudaDevAttrTextureAlignment;
    }
    private static final int cudaDevAttrGpuOverlap = (int)15L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrGpuOverlap = 15
     * }
     */
    public static int cudaDevAttrGpuOverlap() {
        return cudaDevAttrGpuOverlap;
    }
    private static final int cudaDevAttrMultiProcessorCount = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMultiProcessorCount = 16
     * }
     */
    public static int cudaDevAttrMultiProcessorCount() {
        return cudaDevAttrMultiProcessorCount;
    }
    private static final int cudaDevAttrKernelExecTimeout = (int)17L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrKernelExecTimeout = 17
     * }
     */
    public static int cudaDevAttrKernelExecTimeout() {
        return cudaDevAttrKernelExecTimeout;
    }
    private static final int cudaDevAttrIntegrated = (int)18L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrIntegrated = 18
     * }
     */
    public static int cudaDevAttrIntegrated() {
        return cudaDevAttrIntegrated;
    }
    private static final int cudaDevAttrCanMapHostMemory = (int)19L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrCanMapHostMemory = 19
     * }
     */
    public static int cudaDevAttrCanMapHostMemory() {
        return cudaDevAttrCanMapHostMemory;
    }
    private static final int cudaDevAttrComputeMode = (int)20L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrComputeMode = 20
     * }
     */
    public static int cudaDevAttrComputeMode() {
        return cudaDevAttrComputeMode;
    }
    private static final int cudaDevAttrMaxTexture1DWidth = (int)21L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture1DWidth = 21
     * }
     */
    public static int cudaDevAttrMaxTexture1DWidth() {
        return cudaDevAttrMaxTexture1DWidth;
    }
    private static final int cudaDevAttrMaxTexture2DWidth = (int)22L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DWidth = 22
     * }
     */
    public static int cudaDevAttrMaxTexture2DWidth() {
        return cudaDevAttrMaxTexture2DWidth;
    }
    private static final int cudaDevAttrMaxTexture2DHeight = (int)23L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DHeight = 23
     * }
     */
    public static int cudaDevAttrMaxTexture2DHeight() {
        return cudaDevAttrMaxTexture2DHeight;
    }
    private static final int cudaDevAttrMaxTexture3DWidth = (int)24L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture3DWidth = 24
     * }
     */
    public static int cudaDevAttrMaxTexture3DWidth() {
        return cudaDevAttrMaxTexture3DWidth;
    }
    private static final int cudaDevAttrMaxTexture3DHeight = (int)25L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture3DHeight = 25
     * }
     */
    public static int cudaDevAttrMaxTexture3DHeight() {
        return cudaDevAttrMaxTexture3DHeight;
    }
    private static final int cudaDevAttrMaxTexture3DDepth = (int)26L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture3DDepth = 26
     * }
     */
    public static int cudaDevAttrMaxTexture3DDepth() {
        return cudaDevAttrMaxTexture3DDepth;
    }
    private static final int cudaDevAttrMaxTexture2DLayeredWidth = (int)27L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DLayeredWidth = 27
     * }
     */
    public static int cudaDevAttrMaxTexture2DLayeredWidth() {
        return cudaDevAttrMaxTexture2DLayeredWidth;
    }
    private static final int cudaDevAttrMaxTexture2DLayeredHeight = (int)28L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DLayeredHeight = 28
     * }
     */
    public static int cudaDevAttrMaxTexture2DLayeredHeight() {
        return cudaDevAttrMaxTexture2DLayeredHeight;
    }
    private static final int cudaDevAttrMaxTexture2DLayeredLayers = (int)29L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DLayeredLayers = 29
     * }
     */
    public static int cudaDevAttrMaxTexture2DLayeredLayers() {
        return cudaDevAttrMaxTexture2DLayeredLayers;
    }
    private static final int cudaDevAttrSurfaceAlignment = (int)30L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrSurfaceAlignment = 30
     * }
     */
    public static int cudaDevAttrSurfaceAlignment() {
        return cudaDevAttrSurfaceAlignment;
    }
    private static final int cudaDevAttrConcurrentKernels = (int)31L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrConcurrentKernels = 31
     * }
     */
    public static int cudaDevAttrConcurrentKernels() {
        return cudaDevAttrConcurrentKernels;
    }
    private static final int cudaDevAttrEccEnabled = (int)32L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrEccEnabled = 32
     * }
     */
    public static int cudaDevAttrEccEnabled() {
        return cudaDevAttrEccEnabled;
    }
    private static final int cudaDevAttrPciBusId = (int)33L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrPciBusId = 33
     * }
     */
    public static int cudaDevAttrPciBusId() {
        return cudaDevAttrPciBusId;
    }
    private static final int cudaDevAttrPciDeviceId = (int)34L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrPciDeviceId = 34
     * }
     */
    public static int cudaDevAttrPciDeviceId() {
        return cudaDevAttrPciDeviceId;
    }
    private static final int cudaDevAttrTccDriver = (int)35L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrTccDriver = 35
     * }
     */
    public static int cudaDevAttrTccDriver() {
        return cudaDevAttrTccDriver;
    }
    private static final int cudaDevAttrMemoryClockRate = (int)36L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMemoryClockRate = 36
     * }
     */
    public static int cudaDevAttrMemoryClockRate() {
        return cudaDevAttrMemoryClockRate;
    }
    private static final int cudaDevAttrGlobalMemoryBusWidth = (int)37L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrGlobalMemoryBusWidth = 37
     * }
     */
    public static int cudaDevAttrGlobalMemoryBusWidth() {
        return cudaDevAttrGlobalMemoryBusWidth;
    }
    private static final int cudaDevAttrL2CacheSize = (int)38L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrL2CacheSize = 38
     * }
     */
    public static int cudaDevAttrL2CacheSize() {
        return cudaDevAttrL2CacheSize;
    }
    private static final int cudaDevAttrMaxThreadsPerMultiProcessor = (int)39L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxThreadsPerMultiProcessor = 39
     * }
     */
    public static int cudaDevAttrMaxThreadsPerMultiProcessor() {
        return cudaDevAttrMaxThreadsPerMultiProcessor;
    }
    private static final int cudaDevAttrAsyncEngineCount = (int)40L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrAsyncEngineCount = 40
     * }
     */
    public static int cudaDevAttrAsyncEngineCount() {
        return cudaDevAttrAsyncEngineCount;
    }
    private static final int cudaDevAttrUnifiedAddressing = (int)41L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrUnifiedAddressing = 41
     * }
     */
    public static int cudaDevAttrUnifiedAddressing() {
        return cudaDevAttrUnifiedAddressing;
    }
    private static final int cudaDevAttrMaxTexture1DLayeredWidth = (int)42L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture1DLayeredWidth = 42
     * }
     */
    public static int cudaDevAttrMaxTexture1DLayeredWidth() {
        return cudaDevAttrMaxTexture1DLayeredWidth;
    }
    private static final int cudaDevAttrMaxTexture1DLayeredLayers = (int)43L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture1DLayeredLayers = 43
     * }
     */
    public static int cudaDevAttrMaxTexture1DLayeredLayers() {
        return cudaDevAttrMaxTexture1DLayeredLayers;
    }
    private static final int cudaDevAttrMaxTexture2DGatherWidth = (int)45L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DGatherWidth = 45
     * }
     */
    public static int cudaDevAttrMaxTexture2DGatherWidth() {
        return cudaDevAttrMaxTexture2DGatherWidth;
    }
    private static final int cudaDevAttrMaxTexture2DGatherHeight = (int)46L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DGatherHeight = 46
     * }
     */
    public static int cudaDevAttrMaxTexture2DGatherHeight() {
        return cudaDevAttrMaxTexture2DGatherHeight;
    }
    private static final int cudaDevAttrMaxTexture3DWidthAlt = (int)47L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture3DWidthAlt = 47
     * }
     */
    public static int cudaDevAttrMaxTexture3DWidthAlt() {
        return cudaDevAttrMaxTexture3DWidthAlt;
    }
    private static final int cudaDevAttrMaxTexture3DHeightAlt = (int)48L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture3DHeightAlt = 48
     * }
     */
    public static int cudaDevAttrMaxTexture3DHeightAlt() {
        return cudaDevAttrMaxTexture3DHeightAlt;
    }
    private static final int cudaDevAttrMaxTexture3DDepthAlt = (int)49L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture3DDepthAlt = 49
     * }
     */
    public static int cudaDevAttrMaxTexture3DDepthAlt() {
        return cudaDevAttrMaxTexture3DDepthAlt;
    }
    private static final int cudaDevAttrPciDomainId = (int)50L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrPciDomainId = 50
     * }
     */
    public static int cudaDevAttrPciDomainId() {
        return cudaDevAttrPciDomainId;
    }
    private static final int cudaDevAttrTexturePitchAlignment = (int)51L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrTexturePitchAlignment = 51
     * }
     */
    public static int cudaDevAttrTexturePitchAlignment() {
        return cudaDevAttrTexturePitchAlignment;
    }
    private static final int cudaDevAttrMaxTextureCubemapWidth = (int)52L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTextureCubemapWidth = 52
     * }
     */
    public static int cudaDevAttrMaxTextureCubemapWidth() {
        return cudaDevAttrMaxTextureCubemapWidth;
    }
    private static final int cudaDevAttrMaxTextureCubemapLayeredWidth = (int)53L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTextureCubemapLayeredWidth = 53
     * }
     */
    public static int cudaDevAttrMaxTextureCubemapLayeredWidth() {
        return cudaDevAttrMaxTextureCubemapLayeredWidth;
    }
    private static final int cudaDevAttrMaxTextureCubemapLayeredLayers = (int)54L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTextureCubemapLayeredLayers = 54
     * }
     */
    public static int cudaDevAttrMaxTextureCubemapLayeredLayers() {
        return cudaDevAttrMaxTextureCubemapLayeredLayers;
    }
    private static final int cudaDevAttrMaxSurface1DWidth = (int)55L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface1DWidth = 55
     * }
     */
    public static int cudaDevAttrMaxSurface1DWidth() {
        return cudaDevAttrMaxSurface1DWidth;
    }
    private static final int cudaDevAttrMaxSurface2DWidth = (int)56L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface2DWidth = 56
     * }
     */
    public static int cudaDevAttrMaxSurface2DWidth() {
        return cudaDevAttrMaxSurface2DWidth;
    }
    private static final int cudaDevAttrMaxSurface2DHeight = (int)57L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface2DHeight = 57
     * }
     */
    public static int cudaDevAttrMaxSurface2DHeight() {
        return cudaDevAttrMaxSurface2DHeight;
    }
    private static final int cudaDevAttrMaxSurface3DWidth = (int)58L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface3DWidth = 58
     * }
     */
    public static int cudaDevAttrMaxSurface3DWidth() {
        return cudaDevAttrMaxSurface3DWidth;
    }
    private static final int cudaDevAttrMaxSurface3DHeight = (int)59L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface3DHeight = 59
     * }
     */
    public static int cudaDevAttrMaxSurface3DHeight() {
        return cudaDevAttrMaxSurface3DHeight;
    }
    private static final int cudaDevAttrMaxSurface3DDepth = (int)60L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface3DDepth = 60
     * }
     */
    public static int cudaDevAttrMaxSurface3DDepth() {
        return cudaDevAttrMaxSurface3DDepth;
    }
    private static final int cudaDevAttrMaxSurface1DLayeredWidth = (int)61L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface1DLayeredWidth = 61
     * }
     */
    public static int cudaDevAttrMaxSurface1DLayeredWidth() {
        return cudaDevAttrMaxSurface1DLayeredWidth;
    }
    private static final int cudaDevAttrMaxSurface1DLayeredLayers = (int)62L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface1DLayeredLayers = 62
     * }
     */
    public static int cudaDevAttrMaxSurface1DLayeredLayers() {
        return cudaDevAttrMaxSurface1DLayeredLayers;
    }
    private static final int cudaDevAttrMaxSurface2DLayeredWidth = (int)63L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface2DLayeredWidth = 63
     * }
     */
    public static int cudaDevAttrMaxSurface2DLayeredWidth() {
        return cudaDevAttrMaxSurface2DLayeredWidth;
    }
    private static final int cudaDevAttrMaxSurface2DLayeredHeight = (int)64L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface2DLayeredHeight = 64
     * }
     */
    public static int cudaDevAttrMaxSurface2DLayeredHeight() {
        return cudaDevAttrMaxSurface2DLayeredHeight;
    }
    private static final int cudaDevAttrMaxSurface2DLayeredLayers = (int)65L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurface2DLayeredLayers = 65
     * }
     */
    public static int cudaDevAttrMaxSurface2DLayeredLayers() {
        return cudaDevAttrMaxSurface2DLayeredLayers;
    }
    private static final int cudaDevAttrMaxSurfaceCubemapWidth = (int)66L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurfaceCubemapWidth = 66
     * }
     */
    public static int cudaDevAttrMaxSurfaceCubemapWidth() {
        return cudaDevAttrMaxSurfaceCubemapWidth;
    }
    private static final int cudaDevAttrMaxSurfaceCubemapLayeredWidth = (int)67L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67
     * }
     */
    public static int cudaDevAttrMaxSurfaceCubemapLayeredWidth() {
        return cudaDevAttrMaxSurfaceCubemapLayeredWidth;
    }
    private static final int cudaDevAttrMaxSurfaceCubemapLayeredLayers = (int)68L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68
     * }
     */
    public static int cudaDevAttrMaxSurfaceCubemapLayeredLayers() {
        return cudaDevAttrMaxSurfaceCubemapLayeredLayers;
    }
    private static final int cudaDevAttrMaxTexture1DLinearWidth = (int)69L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture1DLinearWidth = 69
     * }
     */
    public static int cudaDevAttrMaxTexture1DLinearWidth() {
        return cudaDevAttrMaxTexture1DLinearWidth;
    }
    private static final int cudaDevAttrMaxTexture2DLinearWidth = (int)70L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DLinearWidth = 70
     * }
     */
    public static int cudaDevAttrMaxTexture2DLinearWidth() {
        return cudaDevAttrMaxTexture2DLinearWidth;
    }
    private static final int cudaDevAttrMaxTexture2DLinearHeight = (int)71L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DLinearHeight = 71
     * }
     */
    public static int cudaDevAttrMaxTexture2DLinearHeight() {
        return cudaDevAttrMaxTexture2DLinearHeight;
    }
    private static final int cudaDevAttrMaxTexture2DLinearPitch = (int)72L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DLinearPitch = 72
     * }
     */
    public static int cudaDevAttrMaxTexture2DLinearPitch() {
        return cudaDevAttrMaxTexture2DLinearPitch;
    }
    private static final int cudaDevAttrMaxTexture2DMipmappedWidth = (int)73L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DMipmappedWidth = 73
     * }
     */
    public static int cudaDevAttrMaxTexture2DMipmappedWidth() {
        return cudaDevAttrMaxTexture2DMipmappedWidth;
    }
    private static final int cudaDevAttrMaxTexture2DMipmappedHeight = (int)74L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture2DMipmappedHeight = 74
     * }
     */
    public static int cudaDevAttrMaxTexture2DMipmappedHeight() {
        return cudaDevAttrMaxTexture2DMipmappedHeight;
    }
    private static final int cudaDevAttrComputeCapabilityMajor = (int)75L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrComputeCapabilityMajor = 75
     * }
     */
    public static int cudaDevAttrComputeCapabilityMajor() {
        return cudaDevAttrComputeCapabilityMajor;
    }
    private static final int cudaDevAttrComputeCapabilityMinor = (int)76L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrComputeCapabilityMinor = 76
     * }
     */
    public static int cudaDevAttrComputeCapabilityMinor() {
        return cudaDevAttrComputeCapabilityMinor;
    }
    private static final int cudaDevAttrMaxTexture1DMipmappedWidth = (int)77L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTexture1DMipmappedWidth = 77
     * }
     */
    public static int cudaDevAttrMaxTexture1DMipmappedWidth() {
        return cudaDevAttrMaxTexture1DMipmappedWidth;
    }
    private static final int cudaDevAttrStreamPrioritiesSupported = (int)78L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrStreamPrioritiesSupported = 78
     * }
     */
    public static int cudaDevAttrStreamPrioritiesSupported() {
        return cudaDevAttrStreamPrioritiesSupported;
    }
    private static final int cudaDevAttrGlobalL1CacheSupported = (int)79L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrGlobalL1CacheSupported = 79
     * }
     */
    public static int cudaDevAttrGlobalL1CacheSupported() {
        return cudaDevAttrGlobalL1CacheSupported;
    }
    private static final int cudaDevAttrLocalL1CacheSupported = (int)80L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrLocalL1CacheSupported = 80
     * }
     */
    public static int cudaDevAttrLocalL1CacheSupported() {
        return cudaDevAttrLocalL1CacheSupported;
    }
    private static final int cudaDevAttrMaxSharedMemoryPerMultiprocessor = (int)81L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81
     * }
     */
    public static int cudaDevAttrMaxSharedMemoryPerMultiprocessor() {
        return cudaDevAttrMaxSharedMemoryPerMultiprocessor;
    }
    private static final int cudaDevAttrMaxRegistersPerMultiprocessor = (int)82L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxRegistersPerMultiprocessor = 82
     * }
     */
    public static int cudaDevAttrMaxRegistersPerMultiprocessor() {
        return cudaDevAttrMaxRegistersPerMultiprocessor;
    }
    private static final int cudaDevAttrManagedMemory = (int)83L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrManagedMemory = 83
     * }
     */
    public static int cudaDevAttrManagedMemory() {
        return cudaDevAttrManagedMemory;
    }
    private static final int cudaDevAttrIsMultiGpuBoard = (int)84L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrIsMultiGpuBoard = 84
     * }
     */
    public static int cudaDevAttrIsMultiGpuBoard() {
        return cudaDevAttrIsMultiGpuBoard;
    }
    private static final int cudaDevAttrMultiGpuBoardGroupID = (int)85L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMultiGpuBoardGroupID = 85
     * }
     */
    public static int cudaDevAttrMultiGpuBoardGroupID() {
        return cudaDevAttrMultiGpuBoardGroupID;
    }
    private static final int cudaDevAttrHostNativeAtomicSupported = (int)86L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrHostNativeAtomicSupported = 86
     * }
     */
    public static int cudaDevAttrHostNativeAtomicSupported() {
        return cudaDevAttrHostNativeAtomicSupported;
    }
    private static final int cudaDevAttrSingleToDoublePrecisionPerfRatio = (int)87L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrSingleToDoublePrecisionPerfRatio = 87
     * }
     */
    public static int cudaDevAttrSingleToDoublePrecisionPerfRatio() {
        return cudaDevAttrSingleToDoublePrecisionPerfRatio;
    }
    private static final int cudaDevAttrPageableMemoryAccess = (int)88L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrPageableMemoryAccess = 88
     * }
     */
    public static int cudaDevAttrPageableMemoryAccess() {
        return cudaDevAttrPageableMemoryAccess;
    }
    private static final int cudaDevAttrConcurrentManagedAccess = (int)89L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrConcurrentManagedAccess = 89
     * }
     */
    public static int cudaDevAttrConcurrentManagedAccess() {
        return cudaDevAttrConcurrentManagedAccess;
    }
    private static final int cudaDevAttrComputePreemptionSupported = (int)90L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrComputePreemptionSupported = 90
     * }
     */
    public static int cudaDevAttrComputePreemptionSupported() {
        return cudaDevAttrComputePreemptionSupported;
    }
    private static final int cudaDevAttrCanUseHostPointerForRegisteredMem = (int)91L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrCanUseHostPointerForRegisteredMem = 91
     * }
     */
    public static int cudaDevAttrCanUseHostPointerForRegisteredMem() {
        return cudaDevAttrCanUseHostPointerForRegisteredMem;
    }
    private static final int cudaDevAttrReserved92 = (int)92L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved92 = 92
     * }
     */
    public static int cudaDevAttrReserved92() {
        return cudaDevAttrReserved92;
    }
    private static final int cudaDevAttrReserved93 = (int)93L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved93 = 93
     * }
     */
    public static int cudaDevAttrReserved93() {
        return cudaDevAttrReserved93;
    }
    private static final int cudaDevAttrReserved94 = (int)94L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved94 = 94
     * }
     */
    public static int cudaDevAttrReserved94() {
        return cudaDevAttrReserved94;
    }
    private static final int cudaDevAttrCooperativeLaunch = (int)95L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrCooperativeLaunch = 95
     * }
     */
    public static int cudaDevAttrCooperativeLaunch() {
        return cudaDevAttrCooperativeLaunch;
    }
    private static final int cudaDevAttrCooperativeMultiDeviceLaunch = (int)96L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrCooperativeMultiDeviceLaunch = 96
     * }
     */
    public static int cudaDevAttrCooperativeMultiDeviceLaunch() {
        return cudaDevAttrCooperativeMultiDeviceLaunch;
    }
    private static final int cudaDevAttrMaxSharedMemoryPerBlockOptin = (int)97L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxSharedMemoryPerBlockOptin = 97
     * }
     */
    public static int cudaDevAttrMaxSharedMemoryPerBlockOptin() {
        return cudaDevAttrMaxSharedMemoryPerBlockOptin;
    }
    private static final int cudaDevAttrCanFlushRemoteWrites = (int)98L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrCanFlushRemoteWrites = 98
     * }
     */
    public static int cudaDevAttrCanFlushRemoteWrites() {
        return cudaDevAttrCanFlushRemoteWrites;
    }
    private static final int cudaDevAttrHostRegisterSupported = (int)99L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrHostRegisterSupported = 99
     * }
     */
    public static int cudaDevAttrHostRegisterSupported() {
        return cudaDevAttrHostRegisterSupported;
    }
    private static final int cudaDevAttrPageableMemoryAccessUsesHostPageTables = (int)100L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100
     * }
     */
    public static int cudaDevAttrPageableMemoryAccessUsesHostPageTables() {
        return cudaDevAttrPageableMemoryAccessUsesHostPageTables;
    }
    private static final int cudaDevAttrDirectManagedMemAccessFromHost = (int)101L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrDirectManagedMemAccessFromHost = 101
     * }
     */
    public static int cudaDevAttrDirectManagedMemAccessFromHost() {
        return cudaDevAttrDirectManagedMemAccessFromHost;
    }
    private static final int cudaDevAttrMaxBlocksPerMultiprocessor = (int)106L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxBlocksPerMultiprocessor = 106
     * }
     */
    public static int cudaDevAttrMaxBlocksPerMultiprocessor() {
        return cudaDevAttrMaxBlocksPerMultiprocessor;
    }
    private static final int cudaDevAttrMaxPersistingL2CacheSize = (int)108L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxPersistingL2CacheSize = 108
     * }
     */
    public static int cudaDevAttrMaxPersistingL2CacheSize() {
        return cudaDevAttrMaxPersistingL2CacheSize;
    }
    private static final int cudaDevAttrMaxAccessPolicyWindowSize = (int)109L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxAccessPolicyWindowSize = 109
     * }
     */
    public static int cudaDevAttrMaxAccessPolicyWindowSize() {
        return cudaDevAttrMaxAccessPolicyWindowSize;
    }
    private static final int cudaDevAttrReservedSharedMemoryPerBlock = (int)111L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReservedSharedMemoryPerBlock = 111
     * }
     */
    public static int cudaDevAttrReservedSharedMemoryPerBlock() {
        return cudaDevAttrReservedSharedMemoryPerBlock;
    }
    private static final int cudaDevAttrSparseCudaArraySupported = (int)112L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrSparseCudaArraySupported = 112
     * }
     */
    public static int cudaDevAttrSparseCudaArraySupported() {
        return cudaDevAttrSparseCudaArraySupported;
    }
    private static final int cudaDevAttrHostRegisterReadOnlySupported = (int)113L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrHostRegisterReadOnlySupported = 113
     * }
     */
    public static int cudaDevAttrHostRegisterReadOnlySupported() {
        return cudaDevAttrHostRegisterReadOnlySupported;
    }
    private static final int cudaDevAttrTimelineSemaphoreInteropSupported = (int)114L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrTimelineSemaphoreInteropSupported = 114
     * }
     */
    public static int cudaDevAttrTimelineSemaphoreInteropSupported() {
        return cudaDevAttrTimelineSemaphoreInteropSupported;
    }
    private static final int cudaDevAttrMaxTimelineSemaphoreInteropSupported = (int)114L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114
     * }
     */
    public static int cudaDevAttrMaxTimelineSemaphoreInteropSupported() {
        return cudaDevAttrMaxTimelineSemaphoreInteropSupported;
    }
    private static final int cudaDevAttrMemoryPoolsSupported = (int)115L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMemoryPoolsSupported = 115
     * }
     */
    public static int cudaDevAttrMemoryPoolsSupported() {
        return cudaDevAttrMemoryPoolsSupported;
    }
    private static final int cudaDevAttrGPUDirectRDMASupported = (int)116L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrGPUDirectRDMASupported = 116
     * }
     */
    public static int cudaDevAttrGPUDirectRDMASupported() {
        return cudaDevAttrGPUDirectRDMASupported;
    }
    private static final int cudaDevAttrGPUDirectRDMAFlushWritesOptions = (int)117L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117
     * }
     */
    public static int cudaDevAttrGPUDirectRDMAFlushWritesOptions() {
        return cudaDevAttrGPUDirectRDMAFlushWritesOptions;
    }
    private static final int cudaDevAttrGPUDirectRDMAWritesOrdering = (int)118L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrGPUDirectRDMAWritesOrdering = 118
     * }
     */
    public static int cudaDevAttrGPUDirectRDMAWritesOrdering() {
        return cudaDevAttrGPUDirectRDMAWritesOrdering;
    }
    private static final int cudaDevAttrMemoryPoolSupportedHandleTypes = (int)119L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMemoryPoolSupportedHandleTypes = 119
     * }
     */
    public static int cudaDevAttrMemoryPoolSupportedHandleTypes() {
        return cudaDevAttrMemoryPoolSupportedHandleTypes;
    }
    private static final int cudaDevAttrClusterLaunch = (int)120L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrClusterLaunch = 120
     * }
     */
    public static int cudaDevAttrClusterLaunch() {
        return cudaDevAttrClusterLaunch;
    }
    private static final int cudaDevAttrDeferredMappingCudaArraySupported = (int)121L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrDeferredMappingCudaArraySupported = 121
     * }
     */
    public static int cudaDevAttrDeferredMappingCudaArraySupported() {
        return cudaDevAttrDeferredMappingCudaArraySupported;
    }
    private static final int cudaDevAttrReserved122 = (int)122L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved122 = 122
     * }
     */
    public static int cudaDevAttrReserved122() {
        return cudaDevAttrReserved122;
    }
    private static final int cudaDevAttrReserved123 = (int)123L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved123 = 123
     * }
     */
    public static int cudaDevAttrReserved123() {
        return cudaDevAttrReserved123;
    }
    private static final int cudaDevAttrReserved124 = (int)124L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved124 = 124
     * }
     */
    public static int cudaDevAttrReserved124() {
        return cudaDevAttrReserved124;
    }
    private static final int cudaDevAttrIpcEventSupport = (int)125L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrIpcEventSupport = 125
     * }
     */
    public static int cudaDevAttrIpcEventSupport() {
        return cudaDevAttrIpcEventSupport;
    }
    private static final int cudaDevAttrMemSyncDomainCount = (int)126L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMemSyncDomainCount = 126
     * }
     */
    public static int cudaDevAttrMemSyncDomainCount() {
        return cudaDevAttrMemSyncDomainCount;
    }
    private static final int cudaDevAttrReserved127 = (int)127L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved127 = 127
     * }
     */
    public static int cudaDevAttrReserved127() {
        return cudaDevAttrReserved127;
    }
    private static final int cudaDevAttrReserved128 = (int)128L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved128 = 128
     * }
     */
    public static int cudaDevAttrReserved128() {
        return cudaDevAttrReserved128;
    }
    private static final int cudaDevAttrReserved129 = (int)129L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved129 = 129
     * }
     */
    public static int cudaDevAttrReserved129() {
        return cudaDevAttrReserved129;
    }
    private static final int cudaDevAttrNumaConfig = (int)130L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrNumaConfig = 130
     * }
     */
    public static int cudaDevAttrNumaConfig() {
        return cudaDevAttrNumaConfig;
    }
    private static final int cudaDevAttrNumaId = (int)131L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrNumaId = 131
     * }
     */
    public static int cudaDevAttrNumaId() {
        return cudaDevAttrNumaId;
    }
    private static final int cudaDevAttrReserved132 = (int)132L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrReserved132 = 132
     * }
     */
    public static int cudaDevAttrReserved132() {
        return cudaDevAttrReserved132;
    }
    private static final int cudaDevAttrMpsEnabled = (int)133L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMpsEnabled = 133
     * }
     */
    public static int cudaDevAttrMpsEnabled() {
        return cudaDevAttrMpsEnabled;
    }
    private static final int cudaDevAttrHostNumaId = (int)134L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrHostNumaId = 134
     * }
     */
    public static int cudaDevAttrHostNumaId() {
        return cudaDevAttrHostNumaId;
    }
    private static final int cudaDevAttrD3D12CigSupported = (int)135L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrD3D12CigSupported = 135
     * }
     */
    public static int cudaDevAttrD3D12CigSupported() {
        return cudaDevAttrD3D12CigSupported;
    }
    private static final int cudaDevAttrMax = (int)136L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceAttr.cudaDevAttrMax = 136
     * }
     */
    public static int cudaDevAttrMax() {
        return cudaDevAttrMax;
    }
    private static final int cudaMemPoolReuseFollowEventDependencies = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolReuseFollowEventDependencies = 1
     * }
     */
    public static int cudaMemPoolReuseFollowEventDependencies() {
        return cudaMemPoolReuseFollowEventDependencies;
    }
    private static final int cudaMemPoolReuseAllowOpportunistic = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolReuseAllowOpportunistic = 2
     * }
     */
    public static int cudaMemPoolReuseAllowOpportunistic() {
        return cudaMemPoolReuseAllowOpportunistic;
    }
    private static final int cudaMemPoolReuseAllowInternalDependencies = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolReuseAllowInternalDependencies = 3
     * }
     */
    public static int cudaMemPoolReuseAllowInternalDependencies() {
        return cudaMemPoolReuseAllowInternalDependencies;
    }
    private static final int cudaMemPoolAttrReleaseThreshold = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolAttrReleaseThreshold = 4
     * }
     */
    public static int cudaMemPoolAttrReleaseThreshold() {
        return cudaMemPoolAttrReleaseThreshold;
    }
    private static final int cudaMemPoolAttrReservedMemCurrent = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolAttrReservedMemCurrent = 5
     * }
     */
    public static int cudaMemPoolAttrReservedMemCurrent() {
        return cudaMemPoolAttrReservedMemCurrent;
    }
    private static final int cudaMemPoolAttrReservedMemHigh = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolAttrReservedMemHigh = 6
     * }
     */
    public static int cudaMemPoolAttrReservedMemHigh() {
        return cudaMemPoolAttrReservedMemHigh;
    }
    private static final int cudaMemPoolAttrUsedMemCurrent = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolAttrUsedMemCurrent = 7
     * }
     */
    public static int cudaMemPoolAttrUsedMemCurrent() {
        return cudaMemPoolAttrUsedMemCurrent;
    }
    private static final int cudaMemPoolAttrUsedMemHigh = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaMemPoolAttr.cudaMemPoolAttrUsedMemHigh = 8
     * }
     */
    public static int cudaMemPoolAttrUsedMemHigh() {
        return cudaMemPoolAttrUsedMemHigh;
    }
    private static final int cudaMemLocationTypeInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaMemLocationType.cudaMemLocationTypeInvalid = 0
     * }
     */
    public static int cudaMemLocationTypeInvalid() {
        return cudaMemLocationTypeInvalid;
    }
    private static final int cudaMemLocationTypeDevice = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemLocationType.cudaMemLocationTypeDevice = 1
     * }
     */
    public static int cudaMemLocationTypeDevice() {
        return cudaMemLocationTypeDevice;
    }
    private static final int cudaMemLocationTypeHost = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaMemLocationType.cudaMemLocationTypeHost = 2
     * }
     */
    public static int cudaMemLocationTypeHost() {
        return cudaMemLocationTypeHost;
    }
    private static final int cudaMemLocationTypeHostNuma = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaMemLocationType.cudaMemLocationTypeHostNuma = 3
     * }
     */
    public static int cudaMemLocationTypeHostNuma() {
        return cudaMemLocationTypeHostNuma;
    }
    private static final int cudaMemLocationTypeHostNumaCurrent = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaMemLocationType.cudaMemLocationTypeHostNumaCurrent = 4
     * }
     */
    public static int cudaMemLocationTypeHostNumaCurrent() {
        return cudaMemLocationTypeHostNumaCurrent;
    }
    private static final int cudaMemAccessFlagsProtNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAccessFlags.cudaMemAccessFlagsProtNone = 0
     * }
     */
    public static int cudaMemAccessFlagsProtNone() {
        return cudaMemAccessFlagsProtNone;
    }
    private static final int cudaMemAccessFlagsProtRead = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAccessFlags.cudaMemAccessFlagsProtRead = 1
     * }
     */
    public static int cudaMemAccessFlagsProtRead() {
        return cudaMemAccessFlagsProtRead;
    }
    private static final int cudaMemAccessFlagsProtReadWrite = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAccessFlags.cudaMemAccessFlagsProtReadWrite = 3
     * }
     */
    public static int cudaMemAccessFlagsProtReadWrite() {
        return cudaMemAccessFlagsProtReadWrite;
    }
    private static final int cudaMemAllocationTypeInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationType.cudaMemAllocationTypeInvalid = 0
     * }
     */
    public static int cudaMemAllocationTypeInvalid() {
        return cudaMemAllocationTypeInvalid;
    }
    private static final int cudaMemAllocationTypePinned = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationType.cudaMemAllocationTypePinned = 1
     * }
     */
    public static int cudaMemAllocationTypePinned() {
        return cudaMemAllocationTypePinned;
    }
    private static final int cudaMemAllocationTypeMax = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationType.cudaMemAllocationTypeMax = 2147483647
     * }
     */
    public static int cudaMemAllocationTypeMax() {
        return cudaMemAllocationTypeMax;
    }
    private static final int cudaMemHandleTypeNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType.cudaMemHandleTypeNone = 0
     * }
     */
    public static int cudaMemHandleTypeNone() {
        return cudaMemHandleTypeNone;
    }
    private static final int cudaMemHandleTypePosixFileDescriptor = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType.cudaMemHandleTypePosixFileDescriptor = 1
     * }
     */
    public static int cudaMemHandleTypePosixFileDescriptor() {
        return cudaMemHandleTypePosixFileDescriptor;
    }
    private static final int cudaMemHandleTypeWin32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType.cudaMemHandleTypeWin32 = 2
     * }
     */
    public static int cudaMemHandleTypeWin32() {
        return cudaMemHandleTypeWin32;
    }
    private static final int cudaMemHandleTypeWin32Kmt = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType.cudaMemHandleTypeWin32Kmt = 4
     * }
     */
    public static int cudaMemHandleTypeWin32Kmt() {
        return cudaMemHandleTypeWin32Kmt;
    }
    private static final int cudaMemHandleTypeFabric = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaMemAllocationHandleType.cudaMemHandleTypeFabric = 8
     * }
     */
    public static int cudaMemHandleTypeFabric() {
        return cudaMemHandleTypeFabric;
    }
    private static final int cudaGraphMemAttrUsedMemCurrent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphMemAttributeType.cudaGraphMemAttrUsedMemCurrent = 0
     * }
     */
    public static int cudaGraphMemAttrUsedMemCurrent() {
        return cudaGraphMemAttrUsedMemCurrent;
    }
    private static final int cudaGraphMemAttrUsedMemHigh = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphMemAttributeType.cudaGraphMemAttrUsedMemHigh = 1
     * }
     */
    public static int cudaGraphMemAttrUsedMemHigh() {
        return cudaGraphMemAttrUsedMemHigh;
    }
    private static final int cudaGraphMemAttrReservedMemCurrent = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphMemAttributeType.cudaGraphMemAttrReservedMemCurrent = 2
     * }
     */
    public static int cudaGraphMemAttrReservedMemCurrent() {
        return cudaGraphMemAttrReservedMemCurrent;
    }
    private static final int cudaGraphMemAttrReservedMemHigh = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphMemAttributeType.cudaGraphMemAttrReservedMemHigh = 3
     * }
     */
    public static int cudaGraphMemAttrReservedMemHigh() {
        return cudaGraphMemAttrReservedMemHigh;
    }
    private static final int cudaDevP2PAttrPerformanceRank = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceP2PAttr.cudaDevP2PAttrPerformanceRank = 1
     * }
     */
    public static int cudaDevP2PAttrPerformanceRank() {
        return cudaDevP2PAttrPerformanceRank;
    }
    private static final int cudaDevP2PAttrAccessSupported = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceP2PAttr.cudaDevP2PAttrAccessSupported = 2
     * }
     */
    public static int cudaDevP2PAttrAccessSupported() {
        return cudaDevP2PAttrAccessSupported;
    }
    private static final int cudaDevP2PAttrNativeAtomicSupported = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceP2PAttr.cudaDevP2PAttrNativeAtomicSupported = 3
     * }
     */
    public static int cudaDevP2PAttrNativeAtomicSupported() {
        return cudaDevP2PAttrNativeAtomicSupported;
    }
    private static final int cudaDevP2PAttrCudaArrayAccessSupported = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceP2PAttr.cudaDevP2PAttrCudaArrayAccessSupported = 4
     * }
     */
    public static int cudaDevP2PAttrCudaArrayAccessSupported() {
        return cudaDevP2PAttrCudaArrayAccessSupported;
    }
    private static final int cudaExternalMemoryHandleTypeOpaqueFd = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueFd = 1
     * }
     */
    public static int cudaExternalMemoryHandleTypeOpaqueFd() {
        return cudaExternalMemoryHandleTypeOpaqueFd;
    }
    private static final int cudaExternalMemoryHandleTypeOpaqueWin32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32 = 2
     * }
     */
    public static int cudaExternalMemoryHandleTypeOpaqueWin32() {
        return cudaExternalMemoryHandleTypeOpaqueWin32;
    }
    private static final int cudaExternalMemoryHandleTypeOpaqueWin32Kmt = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3
     * }
     */
    public static int cudaExternalMemoryHandleTypeOpaqueWin32Kmt() {
        return cudaExternalMemoryHandleTypeOpaqueWin32Kmt;
    }
    private static final int cudaExternalMemoryHandleTypeD3D12Heap = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Heap = 4
     * }
     */
    public static int cudaExternalMemoryHandleTypeD3D12Heap() {
        return cudaExternalMemoryHandleTypeD3D12Heap;
    }
    private static final int cudaExternalMemoryHandleTypeD3D12Resource = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Resource = 5
     * }
     */
    public static int cudaExternalMemoryHandleTypeD3D12Resource() {
        return cudaExternalMemoryHandleTypeD3D12Resource;
    }
    private static final int cudaExternalMemoryHandleTypeD3D11Resource = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11Resource = 6
     * }
     */
    public static int cudaExternalMemoryHandleTypeD3D11Resource() {
        return cudaExternalMemoryHandleTypeD3D11Resource;
    }
    private static final int cudaExternalMemoryHandleTypeD3D11ResourceKmt = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7
     * }
     */
    public static int cudaExternalMemoryHandleTypeD3D11ResourceKmt() {
        return cudaExternalMemoryHandleTypeD3D11ResourceKmt;
    }
    private static final int cudaExternalMemoryHandleTypeNvSciBuf = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeNvSciBuf = 8
     * }
     */
    public static int cudaExternalMemoryHandleTypeNvSciBuf() {
        return cudaExternalMemoryHandleTypeNvSciBuf;
    }
    private static final int cudaExternalSemaphoreHandleTypeOpaqueFd = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueFd = 1
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeOpaqueFd() {
        return cudaExternalSemaphoreHandleTypeOpaqueFd;
    }
    private static final int cudaExternalSemaphoreHandleTypeOpaqueWin32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeOpaqueWin32() {
        return cudaExternalSemaphoreHandleTypeOpaqueWin32;
    }
    private static final int cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt() {
        return cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt;
    }
    private static final int cudaExternalSemaphoreHandleTypeD3D12Fence = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D12Fence = 4
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeD3D12Fence() {
        return cudaExternalSemaphoreHandleTypeD3D12Fence;
    }
    private static final int cudaExternalSemaphoreHandleTypeD3D11Fence = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D11Fence = 5
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeD3D11Fence() {
        return cudaExternalSemaphoreHandleTypeD3D11Fence;
    }
    private static final int cudaExternalSemaphoreHandleTypeNvSciSync = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeNvSciSync = 6
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeNvSciSync() {
        return cudaExternalSemaphoreHandleTypeNvSciSync;
    }
    private static final int cudaExternalSemaphoreHandleTypeKeyedMutex = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutex = 7
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeKeyedMutex() {
        return cudaExternalSemaphoreHandleTypeKeyedMutex;
    }
    private static final int cudaExternalSemaphoreHandleTypeKeyedMutexKmt = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeKeyedMutexKmt() {
        return cudaExternalSemaphoreHandleTypeKeyedMutexKmt;
    }
    private static final int cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd() {
        return cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd;
    }
    private static final int cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10
     * }
     */
    public static int cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32() {
        return cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32;
    }
    /**
     * {@snippet lang=c :
     * typedef struct CUstream_st *cudaStream_t
     * }
     */
    public static final AddressLayout cudaStream_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUevent_st *cudaEvent_t
     * }
     */
    public static final AddressLayout cudaEvent_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct cudaGraphicsResource *cudaGraphicsResource_t
     * }
     */
    public static final AddressLayout cudaGraphicsResource_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUexternalMemory_st *cudaExternalMemory_t
     * }
     */
    public static final AddressLayout cudaExternalMemory_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUexternalSemaphore_st *cudaExternalSemaphore_t
     * }
     */
    public static final AddressLayout cudaExternalSemaphore_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUgraph_st *cudaGraph_t
     * }
     */
    public static final AddressLayout cudaGraph_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUgraphNode_st *cudaGraphNode_t
     * }
     */
    public static final AddressLayout cudaGraphNode_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUuserObject_st *cudaUserObject_t
     * }
     */
    public static final AddressLayout cudaUserObject_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long cudaGraphConditionalHandle
     * }
     */
    public static final OfLong cudaGraphConditionalHandle = PanamaFFMAPI.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct CUfunc_st *cudaFunction_t
     * }
     */
    public static final AddressLayout cudaFunction_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUkern_st *cudaKernel_t
     * }
     */
    public static final AddressLayout cudaKernel_t = PanamaFFMAPI.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CUmemPoolHandle_st *cudaMemPool_t
     * }
     */
    public static final AddressLayout cudaMemPool_t = PanamaFFMAPI.C_POINTER;
    private static final int cudaCGScopeInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaCGScope.cudaCGScopeInvalid = 0
     * }
     */
    public static int cudaCGScopeInvalid() {
        return cudaCGScopeInvalid;
    }
    private static final int cudaCGScopeGrid = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaCGScope.cudaCGScopeGrid = 1
     * }
     */
    public static int cudaCGScopeGrid() {
        return cudaCGScopeGrid;
    }
    private static final int cudaCGScopeMultiGrid = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaCGScope.cudaCGScopeMultiGrid = 2
     * }
     */
    public static int cudaCGScopeMultiGrid() {
        return cudaCGScopeMultiGrid;
    }
    private static final int cudaGraphCondAssignDefault = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphConditionalHandleFlags.cudaGraphCondAssignDefault = 1
     * }
     */
    public static int cudaGraphCondAssignDefault() {
        return cudaGraphCondAssignDefault;
    }
    private static final int cudaGraphCondTypeIf = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphConditionalNodeType.cudaGraphCondTypeIf = 0
     * }
     */
    public static int cudaGraphCondTypeIf() {
        return cudaGraphCondTypeIf;
    }
    private static final int cudaGraphCondTypeWhile = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphConditionalNodeType.cudaGraphCondTypeWhile = 1
     * }
     */
    public static int cudaGraphCondTypeWhile() {
        return cudaGraphCondTypeWhile;
    }
    private static final int cudaGraphNodeTypeKernel = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeKernel = 0
     * }
     */
    public static int cudaGraphNodeTypeKernel() {
        return cudaGraphNodeTypeKernel;
    }
    private static final int cudaGraphNodeTypeMemcpy = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeMemcpy = 1
     * }
     */
    public static int cudaGraphNodeTypeMemcpy() {
        return cudaGraphNodeTypeMemcpy;
    }
    private static final int cudaGraphNodeTypeMemset = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeMemset = 2
     * }
     */
    public static int cudaGraphNodeTypeMemset() {
        return cudaGraphNodeTypeMemset;
    }
    private static final int cudaGraphNodeTypeHost = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeHost = 3
     * }
     */
    public static int cudaGraphNodeTypeHost() {
        return cudaGraphNodeTypeHost;
    }
    private static final int cudaGraphNodeTypeGraph = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeGraph = 4
     * }
     */
    public static int cudaGraphNodeTypeGraph() {
        return cudaGraphNodeTypeGraph;
    }
    private static final int cudaGraphNodeTypeEmpty = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeEmpty = 5
     * }
     */
    public static int cudaGraphNodeTypeEmpty() {
        return cudaGraphNodeTypeEmpty;
    }
    private static final int cudaGraphNodeTypeWaitEvent = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeWaitEvent = 6
     * }
     */
    public static int cudaGraphNodeTypeWaitEvent() {
        return cudaGraphNodeTypeWaitEvent;
    }
    private static final int cudaGraphNodeTypeEventRecord = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeEventRecord = 7
     * }
     */
    public static int cudaGraphNodeTypeEventRecord() {
        return cudaGraphNodeTypeEventRecord;
    }
    private static final int cudaGraphNodeTypeExtSemaphoreSignal = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeExtSemaphoreSignal = 8
     * }
     */
    public static int cudaGraphNodeTypeExtSemaphoreSignal() {
        return cudaGraphNodeTypeExtSemaphoreSignal;
    }
    private static final int cudaGraphNodeTypeExtSemaphoreWait = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeExtSemaphoreWait = 9
     * }
     */
    public static int cudaGraphNodeTypeExtSemaphoreWait() {
        return cudaGraphNodeTypeExtSemaphoreWait;
    }
    private static final int cudaGraphNodeTypeMemAlloc = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeMemAlloc = 10
     * }
     */
    public static int cudaGraphNodeTypeMemAlloc() {
        return cudaGraphNodeTypeMemAlloc;
    }
    private static final int cudaGraphNodeTypeMemFree = (int)11L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeMemFree = 11
     * }
     */
    public static int cudaGraphNodeTypeMemFree() {
        return cudaGraphNodeTypeMemFree;
    }
    private static final int cudaGraphNodeTypeConditional = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeConditional = 13
     * }
     */
    public static int cudaGraphNodeTypeConditional() {
        return cudaGraphNodeTypeConditional;
    }
    private static final int cudaGraphNodeTypeCount = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphNodeType.cudaGraphNodeTypeCount = 14
     * }
     */
    public static int cudaGraphNodeTypeCount() {
        return cudaGraphNodeTypeCount;
    }
    private static final int cudaGraphDependencyTypeDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDependencyType_enum.cudaGraphDependencyTypeDefault = 0
     * }
     */
    public static int cudaGraphDependencyTypeDefault() {
        return cudaGraphDependencyTypeDefault;
    }
    private static final int cudaGraphDependencyTypeProgrammatic = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDependencyType_enum.cudaGraphDependencyTypeProgrammatic = 1
     * }
     */
    public static int cudaGraphDependencyTypeProgrammatic() {
        return cudaGraphDependencyTypeProgrammatic;
    }
    /**
     * {@snippet lang=c :
     * typedef struct CUgraphExec_st *cudaGraphExec_t
     * }
     */
    public static final AddressLayout cudaGraphExec_t = PanamaFFMAPI.C_POINTER;
    private static final int cudaGraphExecUpdateSuccess = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateSuccess = 0
     * }
     */
    public static int cudaGraphExecUpdateSuccess() {
        return cudaGraphExecUpdateSuccess;
    }
    private static final int cudaGraphExecUpdateError = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateError = 1
     * }
     */
    public static int cudaGraphExecUpdateError() {
        return cudaGraphExecUpdateError;
    }
    private static final int cudaGraphExecUpdateErrorTopologyChanged = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateErrorTopologyChanged = 2
     * }
     */
    public static int cudaGraphExecUpdateErrorTopologyChanged() {
        return cudaGraphExecUpdateErrorTopologyChanged;
    }
    private static final int cudaGraphExecUpdateErrorNodeTypeChanged = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateErrorNodeTypeChanged = 3
     * }
     */
    public static int cudaGraphExecUpdateErrorNodeTypeChanged() {
        return cudaGraphExecUpdateErrorNodeTypeChanged;
    }
    private static final int cudaGraphExecUpdateErrorFunctionChanged = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateErrorFunctionChanged = 4
     * }
     */
    public static int cudaGraphExecUpdateErrorFunctionChanged() {
        return cudaGraphExecUpdateErrorFunctionChanged;
    }
    private static final int cudaGraphExecUpdateErrorParametersChanged = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateErrorParametersChanged = 5
     * }
     */
    public static int cudaGraphExecUpdateErrorParametersChanged() {
        return cudaGraphExecUpdateErrorParametersChanged;
    }
    private static final int cudaGraphExecUpdateErrorNotSupported = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateErrorNotSupported = 6
     * }
     */
    public static int cudaGraphExecUpdateErrorNotSupported() {
        return cudaGraphExecUpdateErrorNotSupported;
    }
    private static final int cudaGraphExecUpdateErrorUnsupportedFunctionChange = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7
     * }
     */
    public static int cudaGraphExecUpdateErrorUnsupportedFunctionChange() {
        return cudaGraphExecUpdateErrorUnsupportedFunctionChange;
    }
    private static final int cudaGraphExecUpdateErrorAttributesChanged = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphExecUpdateResult.cudaGraphExecUpdateErrorAttributesChanged = 8
     * }
     */
    public static int cudaGraphExecUpdateErrorAttributesChanged() {
        return cudaGraphExecUpdateErrorAttributesChanged;
    }
    private static final int cudaGraphInstantiateSuccess = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateResult.cudaGraphInstantiateSuccess = 0
     * }
     */
    public static int cudaGraphInstantiateSuccess() {
        return cudaGraphInstantiateSuccess;
    }
    private static final int cudaGraphInstantiateError = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateResult.cudaGraphInstantiateError = 1
     * }
     */
    public static int cudaGraphInstantiateError() {
        return cudaGraphInstantiateError;
    }
    private static final int cudaGraphInstantiateInvalidStructure = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateResult.cudaGraphInstantiateInvalidStructure = 2
     * }
     */
    public static int cudaGraphInstantiateInvalidStructure() {
        return cudaGraphInstantiateInvalidStructure;
    }
    private static final int cudaGraphInstantiateNodeOperationNotSupported = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateResult.cudaGraphInstantiateNodeOperationNotSupported = 3
     * }
     */
    public static int cudaGraphInstantiateNodeOperationNotSupported() {
        return cudaGraphInstantiateNodeOperationNotSupported;
    }
    private static final int cudaGraphInstantiateMultipleDevicesNotSupported = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateResult.cudaGraphInstantiateMultipleDevicesNotSupported = 4
     * }
     */
    public static int cudaGraphInstantiateMultipleDevicesNotSupported() {
        return cudaGraphInstantiateMultipleDevicesNotSupported;
    }
    /**
     * {@snippet lang=c :
     * typedef struct CUgraphDeviceUpdatableNode_st *cudaGraphDeviceNode_t
     * }
     */
    public static final AddressLayout cudaGraphDeviceNode_t = PanamaFFMAPI.C_POINTER;
    private static final int cudaGraphKernelNodeFieldInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField.cudaGraphKernelNodeFieldInvalid = 0
     * }
     */
    public static int cudaGraphKernelNodeFieldInvalid() {
        return cudaGraphKernelNodeFieldInvalid;
    }
    private static final int cudaGraphKernelNodeFieldGridDim = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField.cudaGraphKernelNodeFieldGridDim = 1
     * }
     */
    public static int cudaGraphKernelNodeFieldGridDim() {
        return cudaGraphKernelNodeFieldGridDim;
    }
    private static final int cudaGraphKernelNodeFieldParam = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField.cudaGraphKernelNodeFieldParam = 2
     * }
     */
    public static int cudaGraphKernelNodeFieldParam() {
        return cudaGraphKernelNodeFieldParam;
    }
    private static final int cudaGraphKernelNodeFieldEnabled = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphKernelNodeField.cudaGraphKernelNodeFieldEnabled = 3
     * }
     */
    public static int cudaGraphKernelNodeFieldEnabled() {
        return cudaGraphKernelNodeFieldEnabled;
    }
    private static final int cudaEnableDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaGetDriverEntryPointFlags.cudaEnableDefault = 0
     * }
     */
    public static int cudaEnableDefault() {
        return cudaEnableDefault;
    }
    private static final int cudaEnableLegacyStream = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGetDriverEntryPointFlags.cudaEnableLegacyStream = 1
     * }
     */
    public static int cudaEnableLegacyStream() {
        return cudaEnableLegacyStream;
    }
    private static final int cudaEnablePerThreadDefaultStream = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGetDriverEntryPointFlags.cudaEnablePerThreadDefaultStream = 2
     * }
     */
    public static int cudaEnablePerThreadDefaultStream() {
        return cudaEnablePerThreadDefaultStream;
    }
    private static final int cudaDriverEntryPointSuccess = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaDriverEntryPointQueryResult.cudaDriverEntryPointSuccess = 0
     * }
     */
    public static int cudaDriverEntryPointSuccess() {
        return cudaDriverEntryPointSuccess;
    }
    private static final int cudaDriverEntryPointSymbolNotFound = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaDriverEntryPointQueryResult.cudaDriverEntryPointSymbolNotFound = 1
     * }
     */
    public static int cudaDriverEntryPointSymbolNotFound() {
        return cudaDriverEntryPointSymbolNotFound;
    }
    private static final int cudaDriverEntryPointVersionNotSufficent = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaDriverEntryPointQueryResult.cudaDriverEntryPointVersionNotSufficent = 2
     * }
     */
    public static int cudaDriverEntryPointVersionNotSufficent() {
        return cudaDriverEntryPointVersionNotSufficent;
    }
    private static final int cudaGraphDebugDotFlagsVerbose = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsVerbose = 1
     * }
     */
    public static int cudaGraphDebugDotFlagsVerbose() {
        return cudaGraphDebugDotFlagsVerbose;
    }
    private static final int cudaGraphDebugDotFlagsKernelNodeParams = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsKernelNodeParams = 4
     * }
     */
    public static int cudaGraphDebugDotFlagsKernelNodeParams() {
        return cudaGraphDebugDotFlagsKernelNodeParams;
    }
    private static final int cudaGraphDebugDotFlagsMemcpyNodeParams = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsMemcpyNodeParams = 8
     * }
     */
    public static int cudaGraphDebugDotFlagsMemcpyNodeParams() {
        return cudaGraphDebugDotFlagsMemcpyNodeParams;
    }
    private static final int cudaGraphDebugDotFlagsMemsetNodeParams = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsMemsetNodeParams = 16
     * }
     */
    public static int cudaGraphDebugDotFlagsMemsetNodeParams() {
        return cudaGraphDebugDotFlagsMemsetNodeParams;
    }
    private static final int cudaGraphDebugDotFlagsHostNodeParams = (int)32L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsHostNodeParams = 32
     * }
     */
    public static int cudaGraphDebugDotFlagsHostNodeParams() {
        return cudaGraphDebugDotFlagsHostNodeParams;
    }
    private static final int cudaGraphDebugDotFlagsEventNodeParams = (int)64L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsEventNodeParams = 64
     * }
     */
    public static int cudaGraphDebugDotFlagsEventNodeParams() {
        return cudaGraphDebugDotFlagsEventNodeParams;
    }
    private static final int cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (int)128L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 128
     * }
     */
    public static int cudaGraphDebugDotFlagsExtSemasSignalNodeParams() {
        return cudaGraphDebugDotFlagsExtSemasSignalNodeParams;
    }
    private static final int cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (int)256L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 256
     * }
     */
    public static int cudaGraphDebugDotFlagsExtSemasWaitNodeParams() {
        return cudaGraphDebugDotFlagsExtSemasWaitNodeParams;
    }
    private static final int cudaGraphDebugDotFlagsKernelNodeAttributes = (int)512L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsKernelNodeAttributes = 512
     * }
     */
    public static int cudaGraphDebugDotFlagsKernelNodeAttributes() {
        return cudaGraphDebugDotFlagsKernelNodeAttributes;
    }
    private static final int cudaGraphDebugDotFlagsHandles = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsHandles = 1024
     * }
     */
    public static int cudaGraphDebugDotFlagsHandles() {
        return cudaGraphDebugDotFlagsHandles;
    }
    private static final int cudaGraphDebugDotFlagsConditionalNodeParams = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphDebugDotFlags.cudaGraphDebugDotFlagsConditionalNodeParams = 32768
     * }
     */
    public static int cudaGraphDebugDotFlagsConditionalNodeParams() {
        return cudaGraphDebugDotFlagsConditionalNodeParams;
    }
    private static final int cudaGraphInstantiateFlagAutoFreeOnLaunch = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateFlags.cudaGraphInstantiateFlagAutoFreeOnLaunch = 1
     * }
     */
    public static int cudaGraphInstantiateFlagAutoFreeOnLaunch() {
        return cudaGraphInstantiateFlagAutoFreeOnLaunch;
    }
    private static final int cudaGraphInstantiateFlagUpload = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateFlags.cudaGraphInstantiateFlagUpload = 2
     * }
     */
    public static int cudaGraphInstantiateFlagUpload() {
        return cudaGraphInstantiateFlagUpload;
    }
    private static final int cudaGraphInstantiateFlagDeviceLaunch = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateFlags.cudaGraphInstantiateFlagDeviceLaunch = 4
     * }
     */
    public static int cudaGraphInstantiateFlagDeviceLaunch() {
        return cudaGraphInstantiateFlagDeviceLaunch;
    }
    private static final int cudaGraphInstantiateFlagUseNodePriority = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaGraphInstantiateFlags.cudaGraphInstantiateFlagUseNodePriority = 8
     * }
     */
    public static int cudaGraphInstantiateFlagUseNodePriority() {
        return cudaGraphInstantiateFlagUseNodePriority;
    }
    private static final int cudaLaunchMemSyncDomainDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchMemSyncDomain.cudaLaunchMemSyncDomainDefault = 0
     * }
     */
    public static int cudaLaunchMemSyncDomainDefault() {
        return cudaLaunchMemSyncDomainDefault;
    }
    private static final int cudaLaunchMemSyncDomainRemote = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchMemSyncDomain.cudaLaunchMemSyncDomainRemote = 1
     * }
     */
    public static int cudaLaunchMemSyncDomainRemote() {
        return cudaLaunchMemSyncDomainRemote;
    }
    private static final int cudaLaunchAttributeIgnore = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeIgnore = 0
     * }
     */
    public static int cudaLaunchAttributeIgnore() {
        return cudaLaunchAttributeIgnore;
    }
    private static final int cudaLaunchAttributeAccessPolicyWindow = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeAccessPolicyWindow = 1
     * }
     */
    public static int cudaLaunchAttributeAccessPolicyWindow() {
        return cudaLaunchAttributeAccessPolicyWindow;
    }
    private static final int cudaLaunchAttributeCooperative = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeCooperative = 2
     * }
     */
    public static int cudaLaunchAttributeCooperative() {
        return cudaLaunchAttributeCooperative;
    }
    private static final int cudaLaunchAttributeSynchronizationPolicy = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeSynchronizationPolicy = 3
     * }
     */
    public static int cudaLaunchAttributeSynchronizationPolicy() {
        return cudaLaunchAttributeSynchronizationPolicy;
    }
    private static final int cudaLaunchAttributeClusterDimension = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeClusterDimension = 4
     * }
     */
    public static int cudaLaunchAttributeClusterDimension() {
        return cudaLaunchAttributeClusterDimension;
    }
    private static final int cudaLaunchAttributeClusterSchedulingPolicyPreference = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeClusterSchedulingPolicyPreference = 5
     * }
     */
    public static int cudaLaunchAttributeClusterSchedulingPolicyPreference() {
        return cudaLaunchAttributeClusterSchedulingPolicyPreference;
    }
    private static final int cudaLaunchAttributeProgrammaticStreamSerialization = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeProgrammaticStreamSerialization = 6
     * }
     */
    public static int cudaLaunchAttributeProgrammaticStreamSerialization() {
        return cudaLaunchAttributeProgrammaticStreamSerialization;
    }
    private static final int cudaLaunchAttributeProgrammaticEvent = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeProgrammaticEvent = 7
     * }
     */
    public static int cudaLaunchAttributeProgrammaticEvent() {
        return cudaLaunchAttributeProgrammaticEvent;
    }
    private static final int cudaLaunchAttributePriority = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributePriority = 8
     * }
     */
    public static int cudaLaunchAttributePriority() {
        return cudaLaunchAttributePriority;
    }
    private static final int cudaLaunchAttributeMemSyncDomainMap = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeMemSyncDomainMap = 9
     * }
     */
    public static int cudaLaunchAttributeMemSyncDomainMap() {
        return cudaLaunchAttributeMemSyncDomainMap;
    }
    private static final int cudaLaunchAttributeMemSyncDomain = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeMemSyncDomain = 10
     * }
     */
    public static int cudaLaunchAttributeMemSyncDomain() {
        return cudaLaunchAttributeMemSyncDomain;
    }
    private static final int cudaLaunchAttributeLaunchCompletionEvent = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeLaunchCompletionEvent = 12
     * }
     */
    public static int cudaLaunchAttributeLaunchCompletionEvent() {
        return cudaLaunchAttributeLaunchCompletionEvent;
    }
    private static final int cudaLaunchAttributeDeviceUpdatableKernelNode = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributeDeviceUpdatableKernelNode = 13
     * }
     */
    public static int cudaLaunchAttributeDeviceUpdatableKernelNode() {
        return cudaLaunchAttributeDeviceUpdatableKernelNode;
    }
    private static final int cudaLaunchAttributePreferredSharedMemoryCarveout = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cudaLaunchAttributeID.cudaLaunchAttributePreferredSharedMemoryCarveout = 14
     * }
     */
    public static int cudaLaunchAttributePreferredSharedMemoryCarveout() {
        return cudaLaunchAttributePreferredSharedMemoryCarveout;
    }
    private static final int cudaDeviceNumaConfigNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceNumaConfig.cudaDeviceNumaConfigNone = 0
     * }
     */
    public static int cudaDeviceNumaConfigNone() {
        return cudaDeviceNumaConfigNone;
    }
    private static final int cudaDeviceNumaConfigNumaNode = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaDeviceNumaConfig.cudaDeviceNumaConfigNumaNode = 1
     * }
     */
    public static int cudaDeviceNumaConfigNumaNode() {
        return cudaDeviceNumaConfigNumaNode;
    }
    /**
     * {@snippet lang=c :
     * typedef struct cudaAsyncCallbackEntry *cudaAsyncCallbackHandle_t
     * }
     */
    public static final AddressLayout cudaAsyncCallbackHandle_t = PanamaFFMAPI.C_POINTER;
    private static final int cudaAsyncNotificationTypeOverBudget = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaAsyncNotificationType_enum.cudaAsyncNotificationTypeOverBudget = 1
     * }
     */
    public static int cudaAsyncNotificationTypeOverBudget() {
        return cudaAsyncNotificationTypeOverBudget;
    }
    private static final int cudaBoundaryModeZero = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaSurfaceBoundaryMode.cudaBoundaryModeZero = 0
     * }
     */
    public static int cudaBoundaryModeZero() {
        return cudaBoundaryModeZero;
    }
    private static final int cudaBoundaryModeClamp = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaSurfaceBoundaryMode.cudaBoundaryModeClamp = 1
     * }
     */
    public static int cudaBoundaryModeClamp() {
        return cudaBoundaryModeClamp;
    }
    private static final int cudaBoundaryModeTrap = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaSurfaceBoundaryMode.cudaBoundaryModeTrap = 2
     * }
     */
    public static int cudaBoundaryModeTrap() {
        return cudaBoundaryModeTrap;
    }
    private static final int cudaFormatModeForced = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaSurfaceFormatMode.cudaFormatModeForced = 0
     * }
     */
    public static int cudaFormatModeForced() {
        return cudaFormatModeForced;
    }
    private static final int cudaFormatModeAuto = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaSurfaceFormatMode.cudaFormatModeAuto = 1
     * }
     */
    public static int cudaFormatModeAuto() {
        return cudaFormatModeAuto;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long long cudaSurfaceObject_t
     * }
     */
    public static final OfLong cudaSurfaceObject_t = PanamaFFMAPI.C_LONG_LONG;
    private static final int cudaAddressModeWrap = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureAddressMode.cudaAddressModeWrap = 0
     * }
     */
    public static int cudaAddressModeWrap() {
        return cudaAddressModeWrap;
    }
    private static final int cudaAddressModeClamp = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureAddressMode.cudaAddressModeClamp = 1
     * }
     */
    public static int cudaAddressModeClamp() {
        return cudaAddressModeClamp;
    }
    private static final int cudaAddressModeMirror = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureAddressMode.cudaAddressModeMirror = 2
     * }
     */
    public static int cudaAddressModeMirror() {
        return cudaAddressModeMirror;
    }
    private static final int cudaAddressModeBorder = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureAddressMode.cudaAddressModeBorder = 3
     * }
     */
    public static int cudaAddressModeBorder() {
        return cudaAddressModeBorder;
    }
    private static final int cudaFilterModePoint = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureFilterMode.cudaFilterModePoint = 0
     * }
     */
    public static int cudaFilterModePoint() {
        return cudaFilterModePoint;
    }
    private static final int cudaFilterModeLinear = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureFilterMode.cudaFilterModeLinear = 1
     * }
     */
    public static int cudaFilterModeLinear() {
        return cudaFilterModeLinear;
    }
    private static final int cudaReadModeElementType = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureReadMode.cudaReadModeElementType = 0
     * }
     */
    public static int cudaReadModeElementType() {
        return cudaReadModeElementType;
    }
    private static final int cudaReadModeNormalizedFloat = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaTextureReadMode.cudaReadModeNormalizedFloat = 1
     * }
     */
    public static int cudaReadModeNormalizedFloat() {
        return cudaReadModeNormalizedFloat;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long long cudaTextureObject_t
     * }
     */
    public static final OfLong cudaTextureObject_t = PanamaFFMAPI.C_LONG_LONG;
    private static final int CUDA_R_16F = (int)2L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_16F = 2
     * }
     */
    public static int CUDA_R_16F() {
        return CUDA_R_16F;
    }
    private static final int CUDA_C_16F = (int)6L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_16F = 6
     * }
     */
    public static int CUDA_C_16F() {
        return CUDA_C_16F;
    }
    private static final int CUDA_R_16BF = (int)14L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_16BF = 14
     * }
     */
    public static int CUDA_R_16BF() {
        return CUDA_R_16BF;
    }
    private static final int CUDA_C_16BF = (int)15L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_16BF = 15
     * }
     */
    public static int CUDA_C_16BF() {
        return CUDA_C_16BF;
    }
    private static final int CUDA_R_32F = (int)0L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_32F = 0
     * }
     */
    public static int CUDA_R_32F() {
        return CUDA_R_32F;
    }
    private static final int CUDA_C_32F = (int)4L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_32F = 4
     * }
     */
    public static int CUDA_C_32F() {
        return CUDA_C_32F;
    }
    private static final int CUDA_R_64F = (int)1L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_64F = 1
     * }
     */
    public static int CUDA_R_64F() {
        return CUDA_R_64F;
    }
    private static final int CUDA_C_64F = (int)5L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_64F = 5
     * }
     */
    public static int CUDA_C_64F() {
        return CUDA_C_64F;
    }
    private static final int CUDA_R_4I = (int)16L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_4I = 16
     * }
     */
    public static int CUDA_R_4I() {
        return CUDA_R_4I;
    }
    private static final int CUDA_C_4I = (int)17L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_4I = 17
     * }
     */
    public static int CUDA_C_4I() {
        return CUDA_C_4I;
    }
    private static final int CUDA_R_4U = (int)18L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_4U = 18
     * }
     */
    public static int CUDA_R_4U() {
        return CUDA_R_4U;
    }
    private static final int CUDA_C_4U = (int)19L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_4U = 19
     * }
     */
    public static int CUDA_C_4U() {
        return CUDA_C_4U;
    }
    private static final int CUDA_R_8I = (int)3L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_8I = 3
     * }
     */
    public static int CUDA_R_8I() {
        return CUDA_R_8I;
    }
    private static final int CUDA_C_8I = (int)7L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_8I = 7
     * }
     */
    public static int CUDA_C_8I() {
        return CUDA_C_8I;
    }
    private static final int CUDA_R_8U = (int)8L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_8U = 8
     * }
     */
    public static int CUDA_R_8U() {
        return CUDA_R_8U;
    }
    private static final int CUDA_C_8U = (int)9L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_8U = 9
     * }
     */
    public static int CUDA_C_8U() {
        return CUDA_C_8U;
    }
    private static final int CUDA_R_16I = (int)20L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_16I = 20
     * }
     */
    public static int CUDA_R_16I() {
        return CUDA_R_16I;
    }
    private static final int CUDA_C_16I = (int)21L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_16I = 21
     * }
     */
    public static int CUDA_C_16I() {
        return CUDA_C_16I;
    }
    private static final int CUDA_R_16U = (int)22L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_16U = 22
     * }
     */
    public static int CUDA_R_16U() {
        return CUDA_R_16U;
    }
    private static final int CUDA_C_16U = (int)23L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_16U = 23
     * }
     */
    public static int CUDA_C_16U() {
        return CUDA_C_16U;
    }
    private static final int CUDA_R_32I = (int)10L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_32I = 10
     * }
     */
    public static int CUDA_R_32I() {
        return CUDA_R_32I;
    }
    private static final int CUDA_C_32I = (int)11L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_32I = 11
     * }
     */
    public static int CUDA_C_32I() {
        return CUDA_C_32I;
    }
    private static final int CUDA_R_32U = (int)12L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_32U = 12
     * }
     */
    public static int CUDA_R_32U() {
        return CUDA_R_32U;
    }
    private static final int CUDA_C_32U = (int)13L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_32U = 13
     * }
     */
    public static int CUDA_C_32U() {
        return CUDA_C_32U;
    }
    private static final int CUDA_R_64I = (int)24L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_64I = 24
     * }
     */
    public static int CUDA_R_64I() {
        return CUDA_R_64I;
    }
    private static final int CUDA_C_64I = (int)25L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_64I = 25
     * }
     */
    public static int CUDA_C_64I() {
        return CUDA_C_64I;
    }
    private static final int CUDA_R_64U = (int)26L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_64U = 26
     * }
     */
    public static int CUDA_R_64U() {
        return CUDA_R_64U;
    }
    private static final int CUDA_C_64U = (int)27L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_C_64U = 27
     * }
     */
    public static int CUDA_C_64U() {
        return CUDA_C_64U;
    }
    private static final int CUDA_R_8F_E4M3 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_8F_E4M3 = 28
     * }
     */
    public static int CUDA_R_8F_E4M3() {
        return CUDA_R_8F_E4M3;
    }
    private static final int CUDA_R_8F_E5M2 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum cudaDataType_t.CUDA_R_8F_E5M2 = 29
     * }
     */
    public static int CUDA_R_8F_E5M2() {
        return CUDA_R_8F_E5M2;
    }
    private static final int MAJOR_VERSION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum libraryPropertyType_t.MAJOR_VERSION = 0
     * }
     */
    public static int MAJOR_VERSION() {
        return MAJOR_VERSION;
    }
    private static final int MINOR_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum libraryPropertyType_t.MINOR_VERSION = 1
     * }
     */
    public static int MINOR_VERSION() {
        return MINOR_VERSION;
    }
    private static final int PATCH_LEVEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum libraryPropertyType_t.PATCH_LEVEL = 2
     * }
     */
    public static int PATCH_LEVEL() {
        return PATCH_LEVEL;
    }

    private static class cudaDeviceReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT    );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceReset()
     * }
     */
    public static FunctionDescriptor cudaDeviceReset$descriptor() {
        return cudaDeviceReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceReset()
     * }
     */
    public static MethodHandle cudaDeviceReset$handle() {
        return cudaDeviceReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceReset()
     * }
     */
    public static MemorySegment cudaDeviceReset$address() {
        return cudaDeviceReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceReset()
     * }
     */
    public static int cudaDeviceReset() {
        var mh$ = cudaDeviceReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceReset");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceSynchronize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT    );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceSynchronize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSynchronize()
     * }
     */
    public static FunctionDescriptor cudaDeviceSynchronize$descriptor() {
        return cudaDeviceSynchronize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSynchronize()
     * }
     */
    public static MethodHandle cudaDeviceSynchronize$handle() {
        return cudaDeviceSynchronize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSynchronize()
     * }
     */
    public static MemorySegment cudaDeviceSynchronize$address() {
        return cudaDeviceSynchronize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSynchronize()
     * }
     */
    public static int cudaDeviceSynchronize() {
        var mh$ = cudaDeviceSynchronize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceSynchronize");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceSetLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceSetLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static FunctionDescriptor cudaDeviceSetLimit$descriptor() {
        return cudaDeviceSetLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static MethodHandle cudaDeviceSetLimit$handle() {
        return cudaDeviceSetLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static MemorySegment cudaDeviceSetLimit$address() {
        return cudaDeviceSetLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static int cudaDeviceSetLimit(int limit, long value) {
        var mh$ = cudaDeviceSetLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceSetLimit", limit, value);
            }
            return (int)mh$.invokeExact(limit, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetLimit$descriptor() {
        return cudaDeviceGetLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static MethodHandle cudaDeviceGetLimit$handle() {
        return cudaDeviceGetLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static MemorySegment cudaDeviceGetLimit$address() {
        return cudaDeviceGetLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static int cudaDeviceGetLimit(MemorySegment pValue, int limit) {
        var mh$ = cudaDeviceGetLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetLimit", pValue, limit);
            }
            return (int)mh$.invokeExact(pValue, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetTexture1DLinearMaxWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetTexture1DLinearMaxWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, const struct cudaChannelFormatDesc *fmtDesc, int device)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetTexture1DLinearMaxWidth$descriptor() {
        return cudaDeviceGetTexture1DLinearMaxWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, const struct cudaChannelFormatDesc *fmtDesc, int device)
     * }
     */
    public static MethodHandle cudaDeviceGetTexture1DLinearMaxWidth$handle() {
        return cudaDeviceGetTexture1DLinearMaxWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, const struct cudaChannelFormatDesc *fmtDesc, int device)
     * }
     */
    public static MemorySegment cudaDeviceGetTexture1DLinearMaxWidth$address() {
        return cudaDeviceGetTexture1DLinearMaxWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, const struct cudaChannelFormatDesc *fmtDesc, int device)
     * }
     */
    public static int cudaDeviceGetTexture1DLinearMaxWidth(MemorySegment maxWidthInElements, MemorySegment fmtDesc, int device) {
        var mh$ = cudaDeviceGetTexture1DLinearMaxWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetTexture1DLinearMaxWidth", maxWidthInElements, fmtDesc, device);
            }
            return (int)mh$.invokeExact(maxWidthInElements, fmtDesc, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetCacheConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetCacheConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetCacheConfig$descriptor() {
        return cudaDeviceGetCacheConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static MethodHandle cudaDeviceGetCacheConfig$handle() {
        return cudaDeviceGetCacheConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static MemorySegment cudaDeviceGetCacheConfig$address() {
        return cudaDeviceGetCacheConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static int cudaDeviceGetCacheConfig(MemorySegment pCacheConfig) {
        var mh$ = cudaDeviceGetCacheConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetCacheConfig", pCacheConfig);
            }
            return (int)mh$.invokeExact(pCacheConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetStreamPriorityRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetStreamPriorityRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetStreamPriorityRange$descriptor() {
        return cudaDeviceGetStreamPriorityRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority)
     * }
     */
    public static MethodHandle cudaDeviceGetStreamPriorityRange$handle() {
        return cudaDeviceGetStreamPriorityRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority)
     * }
     */
    public static MemorySegment cudaDeviceGetStreamPriorityRange$address() {
        return cudaDeviceGetStreamPriorityRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority)
     * }
     */
    public static int cudaDeviceGetStreamPriorityRange(MemorySegment leastPriority, MemorySegment greatestPriority) {
        var mh$ = cudaDeviceGetStreamPriorityRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetStreamPriorityRange", leastPriority, greatestPriority);
            }
            return (int)mh$.invokeExact(leastPriority, greatestPriority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceSetCacheConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceSetCacheConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static FunctionDescriptor cudaDeviceSetCacheConfig$descriptor() {
        return cudaDeviceSetCacheConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static MethodHandle cudaDeviceSetCacheConfig$handle() {
        return cudaDeviceSetCacheConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static MemorySegment cudaDeviceSetCacheConfig$address() {
        return cudaDeviceSetCacheConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static int cudaDeviceSetCacheConfig(int cacheConfig) {
        var mh$ = cudaDeviceSetCacheConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceSetCacheConfig", cacheConfig);
            }
            return (int)mh$.invokeExact(cacheConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetByPCIBusId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetByPCIBusId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetByPCIBusId$descriptor() {
        return cudaDeviceGetByPCIBusId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId)
     * }
     */
    public static MethodHandle cudaDeviceGetByPCIBusId$handle() {
        return cudaDeviceGetByPCIBusId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId)
     * }
     */
    public static MemorySegment cudaDeviceGetByPCIBusId$address() {
        return cudaDeviceGetByPCIBusId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId)
     * }
     */
    public static int cudaDeviceGetByPCIBusId(MemorySegment device, MemorySegment pciBusId) {
        var mh$ = cudaDeviceGetByPCIBusId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetByPCIBusId", device, pciBusId);
            }
            return (int)mh$.invokeExact(device, pciBusId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetPCIBusId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetPCIBusId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetPCIBusId$descriptor() {
        return cudaDeviceGetPCIBusId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device)
     * }
     */
    public static MethodHandle cudaDeviceGetPCIBusId$handle() {
        return cudaDeviceGetPCIBusId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device)
     * }
     */
    public static MemorySegment cudaDeviceGetPCIBusId$address() {
        return cudaDeviceGetPCIBusId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device)
     * }
     */
    public static int cudaDeviceGetPCIBusId(MemorySegment pciBusId, int len, int device) {
        var mh$ = cudaDeviceGetPCIBusId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetPCIBusId", pciBusId, len, device);
            }
            return (int)mh$.invokeExact(pciBusId, len, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaIpcGetEventHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaIpcGetEventHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaIpcGetEventHandle$descriptor() {
        return cudaIpcGetEventHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaIpcGetEventHandle$handle() {
        return cudaIpcGetEventHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaIpcGetEventHandle$address() {
        return cudaIpcGetEventHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event)
     * }
     */
    public static int cudaIpcGetEventHandle(MemorySegment handle, MemorySegment event) {
        var mh$ = cudaIpcGetEventHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaIpcGetEventHandle", handle, event);
            }
            return (int)mh$.invokeExact(handle, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaIpcOpenEventHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            cudaIpcEventHandle_st.layout()
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaIpcOpenEventHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle)
     * }
     */
    public static FunctionDescriptor cudaIpcOpenEventHandle$descriptor() {
        return cudaIpcOpenEventHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle)
     * }
     */
    public static MethodHandle cudaIpcOpenEventHandle$handle() {
        return cudaIpcOpenEventHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle)
     * }
     */
    public static MemorySegment cudaIpcOpenEventHandle$address() {
        return cudaIpcOpenEventHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle)
     * }
     */
    public static int cudaIpcOpenEventHandle(MemorySegment event, MemorySegment handle) {
        var mh$ = cudaIpcOpenEventHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaIpcOpenEventHandle", event, handle);
            }
            return (int)mh$.invokeExact(event, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaIpcGetMemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaIpcGetMemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr)
     * }
     */
    public static FunctionDescriptor cudaIpcGetMemHandle$descriptor() {
        return cudaIpcGetMemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr)
     * }
     */
    public static MethodHandle cudaIpcGetMemHandle$handle() {
        return cudaIpcGetMemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr)
     * }
     */
    public static MemorySegment cudaIpcGetMemHandle$address() {
        return cudaIpcGetMemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr)
     * }
     */
    public static int cudaIpcGetMemHandle(MemorySegment handle, MemorySegment devPtr) {
        var mh$ = cudaIpcGetMemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaIpcGetMemHandle", handle, devPtr);
            }
            return (int)mh$.invokeExact(handle, devPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaIpcOpenMemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            cudaIpcMemHandle_st.layout(),
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaIpcOpenMemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaIpcOpenMemHandle$descriptor() {
        return cudaIpcOpenMemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags)
     * }
     */
    public static MethodHandle cudaIpcOpenMemHandle$handle() {
        return cudaIpcOpenMemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags)
     * }
     */
    public static MemorySegment cudaIpcOpenMemHandle$address() {
        return cudaIpcOpenMemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags)
     * }
     */
    public static int cudaIpcOpenMemHandle(MemorySegment devPtr, MemorySegment handle, int flags) {
        var mh$ = cudaIpcOpenMemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaIpcOpenMemHandle", devPtr, handle, flags);
            }
            return (int)mh$.invokeExact(devPtr, handle, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaIpcCloseMemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaIpcCloseMemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcCloseMemHandle(void *devPtr)
     * }
     */
    public static FunctionDescriptor cudaIpcCloseMemHandle$descriptor() {
        return cudaIpcCloseMemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcCloseMemHandle(void *devPtr)
     * }
     */
    public static MethodHandle cudaIpcCloseMemHandle$handle() {
        return cudaIpcCloseMemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcCloseMemHandle(void *devPtr)
     * }
     */
    public static MemorySegment cudaIpcCloseMemHandle$address() {
        return cudaIpcCloseMemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaIpcCloseMemHandle(void *devPtr)
     * }
     */
    public static int cudaIpcCloseMemHandle(MemorySegment devPtr) {
        var mh$ = cudaIpcCloseMemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaIpcCloseMemHandle", devPtr);
            }
            return (int)mh$.invokeExact(devPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceFlushGPUDirectRDMAWrites {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceFlushGPUDirectRDMAWrites");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget target, enum cudaFlushGPUDirectRDMAWritesScope scope)
     * }
     */
    public static FunctionDescriptor cudaDeviceFlushGPUDirectRDMAWrites$descriptor() {
        return cudaDeviceFlushGPUDirectRDMAWrites.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget target, enum cudaFlushGPUDirectRDMAWritesScope scope)
     * }
     */
    public static MethodHandle cudaDeviceFlushGPUDirectRDMAWrites$handle() {
        return cudaDeviceFlushGPUDirectRDMAWrites.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget target, enum cudaFlushGPUDirectRDMAWritesScope scope)
     * }
     */
    public static MemorySegment cudaDeviceFlushGPUDirectRDMAWrites$address() {
        return cudaDeviceFlushGPUDirectRDMAWrites.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget target, enum cudaFlushGPUDirectRDMAWritesScope scope)
     * }
     */
    public static int cudaDeviceFlushGPUDirectRDMAWrites(int target, int scope) {
        var mh$ = cudaDeviceFlushGPUDirectRDMAWrites.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceFlushGPUDirectRDMAWrites", target, scope);
            }
            return (int)mh$.invokeExact(target, scope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceRegisterAsyncNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceRegisterAsyncNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void *userData, cudaAsyncCallbackHandle_t *callback)
     * }
     */
    public static FunctionDescriptor cudaDeviceRegisterAsyncNotification$descriptor() {
        return cudaDeviceRegisterAsyncNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void *userData, cudaAsyncCallbackHandle_t *callback)
     * }
     */
    public static MethodHandle cudaDeviceRegisterAsyncNotification$handle() {
        return cudaDeviceRegisterAsyncNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void *userData, cudaAsyncCallbackHandle_t *callback)
     * }
     */
    public static MemorySegment cudaDeviceRegisterAsyncNotification$address() {
        return cudaDeviceRegisterAsyncNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void *userData, cudaAsyncCallbackHandle_t *callback)
     * }
     */
    public static int cudaDeviceRegisterAsyncNotification(int device, MemorySegment callbackFunc, MemorySegment userData, MemorySegment callback) {
        var mh$ = cudaDeviceRegisterAsyncNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceRegisterAsyncNotification", device, callbackFunc, userData, callback);
            }
            return (int)mh$.invokeExact(device, callbackFunc, userData, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceUnregisterAsyncNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceUnregisterAsyncNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback)
     * }
     */
    public static FunctionDescriptor cudaDeviceUnregisterAsyncNotification$descriptor() {
        return cudaDeviceUnregisterAsyncNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback)
     * }
     */
    public static MethodHandle cudaDeviceUnregisterAsyncNotification$handle() {
        return cudaDeviceUnregisterAsyncNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback)
     * }
     */
    public static MemorySegment cudaDeviceUnregisterAsyncNotification$address() {
        return cudaDeviceUnregisterAsyncNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback)
     * }
     */
    public static int cudaDeviceUnregisterAsyncNotification(int device, MemorySegment callback) {
        var mh$ = cudaDeviceUnregisterAsyncNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceUnregisterAsyncNotification", device, callback);
            }
            return (int)mh$.invokeExact(device, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetSharedMemConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetSharedMemConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetSharedMemConfig$descriptor() {
        return cudaDeviceGetSharedMemConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig)
     * }
     */
    public static MethodHandle cudaDeviceGetSharedMemConfig$handle() {
        return cudaDeviceGetSharedMemConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig)
     * }
     */
    public static MemorySegment cudaDeviceGetSharedMemConfig$address() {
        return cudaDeviceGetSharedMemConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig)
     * }
     */
    public static int cudaDeviceGetSharedMemConfig(MemorySegment pConfig) {
        var mh$ = cudaDeviceGetSharedMemConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetSharedMemConfig", pConfig);
            }
            return (int)mh$.invokeExact(pConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceSetSharedMemConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceSetSharedMemConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config)
     * }
     */
    public static FunctionDescriptor cudaDeviceSetSharedMemConfig$descriptor() {
        return cudaDeviceSetSharedMemConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config)
     * }
     */
    public static MethodHandle cudaDeviceSetSharedMemConfig$handle() {
        return cudaDeviceSetSharedMemConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config)
     * }
     */
    public static MemorySegment cudaDeviceSetSharedMemConfig$address() {
        return cudaDeviceSetSharedMemConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config)
     * }
     */
    public static int cudaDeviceSetSharedMemConfig(int config) {
        var mh$ = cudaDeviceSetSharedMemConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceSetSharedMemConfig", config);
            }
            return (int)mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaThreadExit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT    );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaThreadExit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExit()
     * }
     */
    public static FunctionDescriptor cudaThreadExit$descriptor() {
        return cudaThreadExit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExit()
     * }
     */
    public static MethodHandle cudaThreadExit$handle() {
        return cudaThreadExit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExit()
     * }
     */
    public static MemorySegment cudaThreadExit$address() {
        return cudaThreadExit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExit()
     * }
     */
    public static int cudaThreadExit() {
        var mh$ = cudaThreadExit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaThreadExit");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaThreadSynchronize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT    );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaThreadSynchronize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSynchronize()
     * }
     */
    public static FunctionDescriptor cudaThreadSynchronize$descriptor() {
        return cudaThreadSynchronize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSynchronize()
     * }
     */
    public static MethodHandle cudaThreadSynchronize$handle() {
        return cudaThreadSynchronize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSynchronize()
     * }
     */
    public static MemorySegment cudaThreadSynchronize$address() {
        return cudaThreadSynchronize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSynchronize()
     * }
     */
    public static int cudaThreadSynchronize() {
        var mh$ = cudaThreadSynchronize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaThreadSynchronize");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaThreadSetLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaThreadSetLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static FunctionDescriptor cudaThreadSetLimit$descriptor() {
        return cudaThreadSetLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static MethodHandle cudaThreadSetLimit$handle() {
        return cudaThreadSetLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static MemorySegment cudaThreadSetLimit$address() {
        return cudaThreadSetLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value)
     * }
     */
    public static int cudaThreadSetLimit(int limit, long value) {
        var mh$ = cudaThreadSetLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaThreadSetLimit", limit, value);
            }
            return (int)mh$.invokeExact(limit, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaThreadGetLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaThreadGetLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static FunctionDescriptor cudaThreadGetLimit$descriptor() {
        return cudaThreadGetLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static MethodHandle cudaThreadGetLimit$handle() {
        return cudaThreadGetLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static MemorySegment cudaThreadGetLimit$address() {
        return cudaThreadGetLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit)
     * }
     */
    public static int cudaThreadGetLimit(MemorySegment pValue, int limit) {
        var mh$ = cudaThreadGetLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaThreadGetLimit", pValue, limit);
            }
            return (int)mh$.invokeExact(pValue, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaThreadGetCacheConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaThreadGetCacheConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static FunctionDescriptor cudaThreadGetCacheConfig$descriptor() {
        return cudaThreadGetCacheConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static MethodHandle cudaThreadGetCacheConfig$handle() {
        return cudaThreadGetCacheConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static MemorySegment cudaThreadGetCacheConfig$address() {
        return cudaThreadGetCacheConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig)
     * }
     */
    public static int cudaThreadGetCacheConfig(MemorySegment pCacheConfig) {
        var mh$ = cudaThreadGetCacheConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaThreadGetCacheConfig", pCacheConfig);
            }
            return (int)mh$.invokeExact(pCacheConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaThreadSetCacheConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaThreadSetCacheConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static FunctionDescriptor cudaThreadSetCacheConfig$descriptor() {
        return cudaThreadSetCacheConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static MethodHandle cudaThreadSetCacheConfig$handle() {
        return cudaThreadSetCacheConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static MemorySegment cudaThreadSetCacheConfig$address() {
        return cudaThreadSetCacheConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig)
     * }
     */
    public static int cudaThreadSetCacheConfig(int cacheConfig) {
        var mh$ = cudaThreadSetCacheConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaThreadSetCacheConfig", cacheConfig);
            }
            return (int)mh$.invokeExact(cacheConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetLastError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT    );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetLastError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetLastError()
     * }
     */
    public static FunctionDescriptor cudaGetLastError$descriptor() {
        return cudaGetLastError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetLastError()
     * }
     */
    public static MethodHandle cudaGetLastError$handle() {
        return cudaGetLastError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetLastError()
     * }
     */
    public static MemorySegment cudaGetLastError$address() {
        return cudaGetLastError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetLastError()
     * }
     */
    public static int cudaGetLastError() {
        var mh$ = cudaGetLastError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetLastError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaPeekAtLastError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT    );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaPeekAtLastError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaPeekAtLastError()
     * }
     */
    public static FunctionDescriptor cudaPeekAtLastError$descriptor() {
        return cudaPeekAtLastError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaPeekAtLastError()
     * }
     */
    public static MethodHandle cudaPeekAtLastError$handle() {
        return cudaPeekAtLastError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaPeekAtLastError()
     * }
     */
    public static MemorySegment cudaPeekAtLastError$address() {
        return cudaPeekAtLastError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaPeekAtLastError()
     * }
     */
    public static int cudaPeekAtLastError() {
        var mh$ = cudaPeekAtLastError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaPeekAtLastError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetErrorName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetErrorName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *cudaGetErrorName(cudaError_t error)
     * }
     */
    public static FunctionDescriptor cudaGetErrorName$descriptor() {
        return cudaGetErrorName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *cudaGetErrorName(cudaError_t error)
     * }
     */
    public static MethodHandle cudaGetErrorName$handle() {
        return cudaGetErrorName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *cudaGetErrorName(cudaError_t error)
     * }
     */
    public static MemorySegment cudaGetErrorName$address() {
        return cudaGetErrorName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *cudaGetErrorName(cudaError_t error)
     * }
     */
    public static MemorySegment cudaGetErrorName(int error) {
        var mh$ = cudaGetErrorName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetErrorName", error);
            }
            return (MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetErrorString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetErrorString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *cudaGetErrorString(cudaError_t error)
     * }
     */
    public static FunctionDescriptor cudaGetErrorString$descriptor() {
        return cudaGetErrorString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *cudaGetErrorString(cudaError_t error)
     * }
     */
    public static MethodHandle cudaGetErrorString$handle() {
        return cudaGetErrorString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *cudaGetErrorString(cudaError_t error)
     * }
     */
    public static MemorySegment cudaGetErrorString$address() {
        return cudaGetErrorString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *cudaGetErrorString(cudaError_t error)
     * }
     */
    public static MemorySegment cudaGetErrorString(int error) {
        var mh$ = cudaGetErrorString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetErrorString", error);
            }
            return (MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetDeviceCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetDeviceCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceCount(int *count)
     * }
     */
    public static FunctionDescriptor cudaGetDeviceCount$descriptor() {
        return cudaGetDeviceCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceCount(int *count)
     * }
     */
    public static MethodHandle cudaGetDeviceCount$handle() {
        return cudaGetDeviceCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceCount(int *count)
     * }
     */
    public static MemorySegment cudaGetDeviceCount$address() {
        return cudaGetDeviceCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceCount(int *count)
     * }
     */
    public static int cudaGetDeviceCount(MemorySegment count) {
        var mh$ = cudaGetDeviceCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetDeviceCount", count);
            }
            return (int)mh$.invokeExact(count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetDeviceProperties_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetDeviceProperties_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceProperties_v2(struct cudaDeviceProp *prop, int device)
     * }
     */
    public static FunctionDescriptor cudaGetDeviceProperties_v2$descriptor() {
        return cudaGetDeviceProperties_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceProperties_v2(struct cudaDeviceProp *prop, int device)
     * }
     */
    public static MethodHandle cudaGetDeviceProperties_v2$handle() {
        return cudaGetDeviceProperties_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceProperties_v2(struct cudaDeviceProp *prop, int device)
     * }
     */
    public static MemorySegment cudaGetDeviceProperties_v2$address() {
        return cudaGetDeviceProperties_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceProperties_v2(struct cudaDeviceProp *prop, int device)
     * }
     */
    public static int cudaGetDeviceProperties_v2(MemorySegment prop, int device) {
        var mh$ = cudaGetDeviceProperties_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetDeviceProperties_v2", prop, device);
            }
            return (int)mh$.invokeExact(prop, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetAttribute$descriptor() {
        return cudaDeviceGetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device)
     * }
     */
    public static MethodHandle cudaDeviceGetAttribute$handle() {
        return cudaDeviceGetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device)
     * }
     */
    public static MemorySegment cudaDeviceGetAttribute$address() {
        return cudaDeviceGetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device)
     * }
     */
    public static int cudaDeviceGetAttribute(MemorySegment value, int attr, int device) {
        var mh$ = cudaDeviceGetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetAttribute", value, attr, device);
            }
            return (int)mh$.invokeExact(value, attr, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetDefaultMemPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetDefaultMemPool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetDefaultMemPool$descriptor() {
        return cudaDeviceGetDefaultMemPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static MethodHandle cudaDeviceGetDefaultMemPool$handle() {
        return cudaDeviceGetDefaultMemPool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static MemorySegment cudaDeviceGetDefaultMemPool$address() {
        return cudaDeviceGetDefaultMemPool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static int cudaDeviceGetDefaultMemPool(MemorySegment memPool, int device) {
        var mh$ = cudaDeviceGetDefaultMemPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetDefaultMemPool", memPool, device);
            }
            return (int)mh$.invokeExact(memPool, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceSetMemPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceSetMemPool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool)
     * }
     */
    public static FunctionDescriptor cudaDeviceSetMemPool$descriptor() {
        return cudaDeviceSetMemPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool)
     * }
     */
    public static MethodHandle cudaDeviceSetMemPool$handle() {
        return cudaDeviceSetMemPool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool)
     * }
     */
    public static MemorySegment cudaDeviceSetMemPool$address() {
        return cudaDeviceSetMemPool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool)
     * }
     */
    public static int cudaDeviceSetMemPool(int device, MemorySegment memPool) {
        var mh$ = cudaDeviceSetMemPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceSetMemPool", device, memPool);
            }
            return (int)mh$.invokeExact(device, memPool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetMemPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetMemPool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetMemPool$descriptor() {
        return cudaDeviceGetMemPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static MethodHandle cudaDeviceGetMemPool$handle() {
        return cudaDeviceGetMemPool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static MemorySegment cudaDeviceGetMemPool$address() {
        return cudaDeviceGetMemPool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t *memPool, int device)
     * }
     */
    public static int cudaDeviceGetMemPool(MemorySegment memPool, int device) {
        var mh$ = cudaDeviceGetMemPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetMemPool", memPool, device);
            }
            return (int)mh$.invokeExact(memPool, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetNvSciSyncAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetNvSciSyncAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, int device, int flags)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetNvSciSyncAttributes$descriptor() {
        return cudaDeviceGetNvSciSyncAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, int device, int flags)
     * }
     */
    public static MethodHandle cudaDeviceGetNvSciSyncAttributes$handle() {
        return cudaDeviceGetNvSciSyncAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, int device, int flags)
     * }
     */
    public static MemorySegment cudaDeviceGetNvSciSyncAttributes$address() {
        return cudaDeviceGetNvSciSyncAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, int device, int flags)
     * }
     */
    public static int cudaDeviceGetNvSciSyncAttributes(MemorySegment nvSciSyncAttrList, int device, int flags) {
        var mh$ = cudaDeviceGetNvSciSyncAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetNvSciSyncAttributes", nvSciSyncAttrList, device, flags);
            }
            return (int)mh$.invokeExact(nvSciSyncAttrList, device, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDeviceGetP2PAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDeviceGetP2PAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice)
     * }
     */
    public static FunctionDescriptor cudaDeviceGetP2PAttribute$descriptor() {
        return cudaDeviceGetP2PAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice)
     * }
     */
    public static MethodHandle cudaDeviceGetP2PAttribute$handle() {
        return cudaDeviceGetP2PAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice)
     * }
     */
    public static MemorySegment cudaDeviceGetP2PAttribute$address() {
        return cudaDeviceGetP2PAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice)
     * }
     */
    public static int cudaDeviceGetP2PAttribute(MemorySegment value, int attr, int srcDevice, int dstDevice) {
        var mh$ = cudaDeviceGetP2PAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDeviceGetP2PAttribute", value, attr, srcDevice, dstDevice);
            }
            return (int)mh$.invokeExact(value, attr, srcDevice, dstDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaChooseDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaChooseDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop)
     * }
     */
    public static FunctionDescriptor cudaChooseDevice$descriptor() {
        return cudaChooseDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop)
     * }
     */
    public static MethodHandle cudaChooseDevice$handle() {
        return cudaChooseDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop)
     * }
     */
    public static MemorySegment cudaChooseDevice$address() {
        return cudaChooseDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop)
     * }
     */
    public static int cudaChooseDevice(MemorySegment device, MemorySegment prop) {
        var mh$ = cudaChooseDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaChooseDevice", device, prop);
            }
            return (int)mh$.invokeExact(device, prop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaInitDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaInitDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaInitDevice$descriptor() {
        return cudaInitDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags)
     * }
     */
    public static MethodHandle cudaInitDevice$handle() {
        return cudaInitDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags)
     * }
     */
    public static MemorySegment cudaInitDevice$address() {
        return cudaInitDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaInitDevice(int device, unsigned int deviceFlags, unsigned int flags)
     * }
     */
    public static int cudaInitDevice(int device, int deviceFlags, int flags) {
        var mh$ = cudaInitDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaInitDevice", device, deviceFlags, flags);
            }
            return (int)mh$.invokeExact(device, deviceFlags, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaSetDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaSetDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDevice(int device)
     * }
     */
    public static FunctionDescriptor cudaSetDevice$descriptor() {
        return cudaSetDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDevice(int device)
     * }
     */
    public static MethodHandle cudaSetDevice$handle() {
        return cudaSetDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDevice(int device)
     * }
     */
    public static MemorySegment cudaSetDevice$address() {
        return cudaSetDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDevice(int device)
     * }
     */
    public static int cudaSetDevice(int device) {
        var mh$ = cudaSetDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaSetDevice", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDevice(int *device)
     * }
     */
    public static FunctionDescriptor cudaGetDevice$descriptor() {
        return cudaGetDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDevice(int *device)
     * }
     */
    public static MethodHandle cudaGetDevice$handle() {
        return cudaGetDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDevice(int *device)
     * }
     */
    public static MemorySegment cudaGetDevice$address() {
        return cudaGetDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDevice(int *device)
     * }
     */
    public static int cudaGetDevice(MemorySegment device) {
        var mh$ = cudaGetDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetDevice", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaSetValidDevices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaSetValidDevices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetValidDevices(int *device_arr, int len)
     * }
     */
    public static FunctionDescriptor cudaSetValidDevices$descriptor() {
        return cudaSetValidDevices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetValidDevices(int *device_arr, int len)
     * }
     */
    public static MethodHandle cudaSetValidDevices$handle() {
        return cudaSetValidDevices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetValidDevices(int *device_arr, int len)
     * }
     */
    public static MemorySegment cudaSetValidDevices$address() {
        return cudaSetValidDevices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaSetValidDevices(int *device_arr, int len)
     * }
     */
    public static int cudaSetValidDevices(MemorySegment device_arr, int len) {
        var mh$ = cudaSetValidDevices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaSetValidDevices", device_arr, len);
            }
            return (int)mh$.invokeExact(device_arr, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaSetDeviceFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaSetDeviceFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDeviceFlags(unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaSetDeviceFlags$descriptor() {
        return cudaSetDeviceFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDeviceFlags(unsigned int flags)
     * }
     */
    public static MethodHandle cudaSetDeviceFlags$handle() {
        return cudaSetDeviceFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDeviceFlags(unsigned int flags)
     * }
     */
    public static MemorySegment cudaSetDeviceFlags$address() {
        return cudaSetDeviceFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDeviceFlags(unsigned int flags)
     * }
     */
    public static int cudaSetDeviceFlags(int flags) {
        var mh$ = cudaSetDeviceFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaSetDeviceFlags", flags);
            }
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetDeviceFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetDeviceFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceFlags(unsigned int *flags)
     * }
     */
    public static FunctionDescriptor cudaGetDeviceFlags$descriptor() {
        return cudaGetDeviceFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceFlags(unsigned int *flags)
     * }
     */
    public static MethodHandle cudaGetDeviceFlags$handle() {
        return cudaGetDeviceFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceFlags(unsigned int *flags)
     * }
     */
    public static MemorySegment cudaGetDeviceFlags$address() {
        return cudaGetDeviceFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetDeviceFlags(unsigned int *flags)
     * }
     */
    public static int cudaGetDeviceFlags(MemorySegment flags) {
        var mh$ = cudaGetDeviceFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetDeviceFlags", flags);
            }
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreate(cudaStream_t *pStream)
     * }
     */
    public static FunctionDescriptor cudaStreamCreate$descriptor() {
        return cudaStreamCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreate(cudaStream_t *pStream)
     * }
     */
    public static MethodHandle cudaStreamCreate$handle() {
        return cudaStreamCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreate(cudaStream_t *pStream)
     * }
     */
    public static MemorySegment cudaStreamCreate$address() {
        return cudaStreamCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreate(cudaStream_t *pStream)
     * }
     */
    public static int cudaStreamCreate(MemorySegment pStream) {
        var mh$ = cudaStreamCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamCreate", pStream);
            }
            return (int)mh$.invokeExact(pStream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamCreateWithFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamCreateWithFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaStreamCreateWithFlags$descriptor() {
        return cudaStreamCreateWithFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags)
     * }
     */
    public static MethodHandle cudaStreamCreateWithFlags$handle() {
        return cudaStreamCreateWithFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags)
     * }
     */
    public static MemorySegment cudaStreamCreateWithFlags$address() {
        return cudaStreamCreateWithFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags)
     * }
     */
    public static int cudaStreamCreateWithFlags(MemorySegment pStream, int flags) {
        var mh$ = cudaStreamCreateWithFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamCreateWithFlags", pStream, flags);
            }
            return (int)mh$.invokeExact(pStream, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamCreateWithPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamCreateWithPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority)
     * }
     */
    public static FunctionDescriptor cudaStreamCreateWithPriority$descriptor() {
        return cudaStreamCreateWithPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority)
     * }
     */
    public static MethodHandle cudaStreamCreateWithPriority$handle() {
        return cudaStreamCreateWithPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority)
     * }
     */
    public static MemorySegment cudaStreamCreateWithPriority$address() {
        return cudaStreamCreateWithPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority)
     * }
     */
    public static int cudaStreamCreateWithPriority(MemorySegment pStream, int flags, int priority) {
        var mh$ = cudaStreamCreateWithPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamCreateWithPriority", pStream, flags, priority);
            }
            return (int)mh$.invokeExact(pStream, flags, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamGetPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamGetPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority)
     * }
     */
    public static FunctionDescriptor cudaStreamGetPriority$descriptor() {
        return cudaStreamGetPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority)
     * }
     */
    public static MethodHandle cudaStreamGetPriority$handle() {
        return cudaStreamGetPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority)
     * }
     */
    public static MemorySegment cudaStreamGetPriority$address() {
        return cudaStreamGetPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority)
     * }
     */
    public static int cudaStreamGetPriority(MemorySegment hStream, MemorySegment priority) {
        var mh$ = cudaStreamGetPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamGetPriority", hStream, priority);
            }
            return (int)mh$.invokeExact(hStream, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamGetFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamGetFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags)
     * }
     */
    public static FunctionDescriptor cudaStreamGetFlags$descriptor() {
        return cudaStreamGetFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags)
     * }
     */
    public static MethodHandle cudaStreamGetFlags$handle() {
        return cudaStreamGetFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags)
     * }
     */
    public static MemorySegment cudaStreamGetFlags$address() {
        return cudaStreamGetFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags)
     * }
     */
    public static int cudaStreamGetFlags(MemorySegment hStream, MemorySegment flags) {
        var mh$ = cudaStreamGetFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamGetFlags", hStream, flags);
            }
            return (int)mh$.invokeExact(hStream, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamGetId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamGetId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long *streamId)
     * }
     */
    public static FunctionDescriptor cudaStreamGetId$descriptor() {
        return cudaStreamGetId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long *streamId)
     * }
     */
    public static MethodHandle cudaStreamGetId$handle() {
        return cudaStreamGetId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long *streamId)
     * }
     */
    public static MemorySegment cudaStreamGetId$address() {
        return cudaStreamGetId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long *streamId)
     * }
     */
    public static int cudaStreamGetId(MemorySegment hStream, MemorySegment streamId) {
        var mh$ = cudaStreamGetId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamGetId", hStream, streamId);
            }
            return (int)mh$.invokeExact(hStream, streamId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaCtxResetPersistingL2Cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT    );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaCtxResetPersistingL2Cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCtxResetPersistingL2Cache()
     * }
     */
    public static FunctionDescriptor cudaCtxResetPersistingL2Cache$descriptor() {
        return cudaCtxResetPersistingL2Cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCtxResetPersistingL2Cache()
     * }
     */
    public static MethodHandle cudaCtxResetPersistingL2Cache$handle() {
        return cudaCtxResetPersistingL2Cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaCtxResetPersistingL2Cache()
     * }
     */
    public static MemorySegment cudaCtxResetPersistingL2Cache$address() {
        return cudaCtxResetPersistingL2Cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaCtxResetPersistingL2Cache()
     * }
     */
    public static int cudaCtxResetPersistingL2Cache() {
        var mh$ = cudaCtxResetPersistingL2Cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaCtxResetPersistingL2Cache");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamCopyAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamCopyAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src)
     * }
     */
    public static FunctionDescriptor cudaStreamCopyAttributes$descriptor() {
        return cudaStreamCopyAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src)
     * }
     */
    public static MethodHandle cudaStreamCopyAttributes$handle() {
        return cudaStreamCopyAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src)
     * }
     */
    public static MemorySegment cudaStreamCopyAttributes$address() {
        return cudaStreamCopyAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src)
     * }
     */
    public static int cudaStreamCopyAttributes(MemorySegment dst, MemorySegment src) {
        var mh$ = cudaStreamCopyAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamCopyAttributes", dst, src);
            }
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamGetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamGetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static FunctionDescriptor cudaStreamGetAttribute$descriptor() {
        return cudaStreamGetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static MethodHandle cudaStreamGetAttribute$handle() {
        return cudaStreamGetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static MemorySegment cudaStreamGetAttribute$address() {
        return cudaStreamGetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue *value_out)
     * }
     */
    public static int cudaStreamGetAttribute(MemorySegment hStream, int attr, MemorySegment value_out) {
        var mh$ = cudaStreamGetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamGetAttribute", hStream, attr, value_out);
            }
            return (int)mh$.invokeExact(hStream, attr, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamSetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamSetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static FunctionDescriptor cudaStreamSetAttribute$descriptor() {
        return cudaStreamSetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static MethodHandle cudaStreamSetAttribute$handle() {
        return cudaStreamSetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static MemorySegment cudaStreamSetAttribute$address() {
        return cudaStreamSetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue *value)
     * }
     */
    public static int cudaStreamSetAttribute(MemorySegment hStream, int attr, MemorySegment value) {
        var mh$ = cudaStreamSetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamSetAttribute", hStream, attr, value);
            }
            return (int)mh$.invokeExact(hStream, attr, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamDestroy(cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaStreamDestroy$descriptor() {
        return cudaStreamDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamDestroy(cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaStreamDestroy$handle() {
        return cudaStreamDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamDestroy(cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaStreamDestroy$address() {
        return cudaStreamDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamDestroy(cudaStream_t stream)
     * }
     */
    public static int cudaStreamDestroy(MemorySegment stream) {
        var mh$ = cudaStreamDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamDestroy", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamWaitEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamWaitEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaStreamWaitEvent$descriptor() {
        return cudaStreamWaitEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags)
     * }
     */
    public static MethodHandle cudaStreamWaitEvent$handle() {
        return cudaStreamWaitEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags)
     * }
     */
    public static MemorySegment cudaStreamWaitEvent$address() {
        return cudaStreamWaitEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags)
     * }
     */
    public static int cudaStreamWaitEvent(MemorySegment stream, MemorySegment event, int flags) {
        var mh$ = cudaStreamWaitEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamWaitEvent", stream, event, flags);
            }
            return (int)mh$.invokeExact(stream, event, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamAddCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamAddCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void *userData, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaStreamAddCallback$descriptor() {
        return cudaStreamAddCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void *userData, unsigned int flags)
     * }
     */
    public static MethodHandle cudaStreamAddCallback$handle() {
        return cudaStreamAddCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void *userData, unsigned int flags)
     * }
     */
    public static MemorySegment cudaStreamAddCallback$address() {
        return cudaStreamAddCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void *userData, unsigned int flags)
     * }
     */
    public static int cudaStreamAddCallback(MemorySegment stream, MemorySegment callback, MemorySegment userData, int flags) {
        var mh$ = cudaStreamAddCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamAddCallback", stream, callback, userData, flags);
            }
            return (int)mh$.invokeExact(stream, callback, userData, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamSynchronize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamSynchronize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSynchronize(cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaStreamSynchronize$descriptor() {
        return cudaStreamSynchronize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSynchronize(cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaStreamSynchronize$handle() {
        return cudaStreamSynchronize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSynchronize(cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaStreamSynchronize$address() {
        return cudaStreamSynchronize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamSynchronize(cudaStream_t stream)
     * }
     */
    public static int cudaStreamSynchronize(MemorySegment stream) {
        var mh$ = cudaStreamSynchronize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamSynchronize", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamQuery(cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaStreamQuery$descriptor() {
        return cudaStreamQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamQuery(cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaStreamQuery$handle() {
        return cudaStreamQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamQuery(cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaStreamQuery$address() {
        return cudaStreamQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamQuery(cudaStream_t stream)
     * }
     */
    public static int cudaStreamQuery(MemorySegment stream) {
        var mh$ = cudaStreamQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamQuery", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamAttachMemAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamAttachMemAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaStreamAttachMemAsync$descriptor() {
        return cudaStreamAttachMemAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length, unsigned int flags)
     * }
     */
    public static MethodHandle cudaStreamAttachMemAsync$handle() {
        return cudaStreamAttachMemAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length, unsigned int flags)
     * }
     */
    public static MemorySegment cudaStreamAttachMemAsync$address() {
        return cudaStreamAttachMemAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length, unsigned int flags)
     * }
     */
    public static int cudaStreamAttachMemAsync(MemorySegment stream, MemorySegment devPtr, long length, int flags) {
        var mh$ = cudaStreamAttachMemAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamAttachMemAsync", stream, devPtr, length, flags);
            }
            return (int)mh$.invokeExact(stream, devPtr, length, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamBeginCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamBeginCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, enum cudaStreamCaptureMode mode)
     * }
     */
    public static FunctionDescriptor cudaStreamBeginCapture$descriptor() {
        return cudaStreamBeginCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, enum cudaStreamCaptureMode mode)
     * }
     */
    public static MethodHandle cudaStreamBeginCapture$handle() {
        return cudaStreamBeginCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, enum cudaStreamCaptureMode mode)
     * }
     */
    public static MemorySegment cudaStreamBeginCapture$address() {
        return cudaStreamBeginCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, enum cudaStreamCaptureMode mode)
     * }
     */
    public static int cudaStreamBeginCapture(MemorySegment stream, int mode) {
        var mh$ = cudaStreamBeginCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamBeginCapture", stream, mode);
            }
            return (int)mh$.invokeExact(stream, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamBeginCaptureToGraph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamBeginCaptureToGraph");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, enum cudaStreamCaptureMode mode)
     * }
     */
    public static FunctionDescriptor cudaStreamBeginCaptureToGraph$descriptor() {
        return cudaStreamBeginCaptureToGraph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, enum cudaStreamCaptureMode mode)
     * }
     */
    public static MethodHandle cudaStreamBeginCaptureToGraph$handle() {
        return cudaStreamBeginCaptureToGraph.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, enum cudaStreamCaptureMode mode)
     * }
     */
    public static MemorySegment cudaStreamBeginCaptureToGraph$address() {
        return cudaStreamBeginCaptureToGraph.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, enum cudaStreamCaptureMode mode)
     * }
     */
    public static int cudaStreamBeginCaptureToGraph(MemorySegment stream, MemorySegment graph, MemorySegment dependencies, MemorySegment dependencyData, long numDependencies, int mode) {
        var mh$ = cudaStreamBeginCaptureToGraph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamBeginCaptureToGraph", stream, graph, dependencies, dependencyData, numDependencies, mode);
            }
            return (int)mh$.invokeExact(stream, graph, dependencies, dependencyData, numDependencies, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaThreadExchangeStreamCaptureMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaThreadExchangeStreamCaptureMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *mode)
     * }
     */
    public static FunctionDescriptor cudaThreadExchangeStreamCaptureMode$descriptor() {
        return cudaThreadExchangeStreamCaptureMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *mode)
     * }
     */
    public static MethodHandle cudaThreadExchangeStreamCaptureMode$handle() {
        return cudaThreadExchangeStreamCaptureMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *mode)
     * }
     */
    public static MemorySegment cudaThreadExchangeStreamCaptureMode$address() {
        return cudaThreadExchangeStreamCaptureMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *mode)
     * }
     */
    public static int cudaThreadExchangeStreamCaptureMode(MemorySegment mode) {
        var mh$ = cudaThreadExchangeStreamCaptureMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaThreadExchangeStreamCaptureMode", mode);
            }
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamEndCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamEndCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t *pGraph)
     * }
     */
    public static FunctionDescriptor cudaStreamEndCapture$descriptor() {
        return cudaStreamEndCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t *pGraph)
     * }
     */
    public static MethodHandle cudaStreamEndCapture$handle() {
        return cudaStreamEndCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t *pGraph)
     * }
     */
    public static MemorySegment cudaStreamEndCapture$address() {
        return cudaStreamEndCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t *pGraph)
     * }
     */
    public static int cudaStreamEndCapture(MemorySegment stream, MemorySegment pGraph) {
        var mh$ = cudaStreamEndCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamEndCapture", stream, pGraph);
            }
            return (int)mh$.invokeExact(stream, pGraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamIsCapturing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamIsCapturing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus)
     * }
     */
    public static FunctionDescriptor cudaStreamIsCapturing$descriptor() {
        return cudaStreamIsCapturing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus)
     * }
     */
    public static MethodHandle cudaStreamIsCapturing$handle() {
        return cudaStreamIsCapturing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus)
     * }
     */
    public static MemorySegment cudaStreamIsCapturing$address() {
        return cudaStreamIsCapturing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus)
     * }
     */
    public static int cudaStreamIsCapturing(MemorySegment stream, MemorySegment pCaptureStatus) {
        var mh$ = cudaStreamIsCapturing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamIsCapturing", stream, pCaptureStatus);
            }
            return (int)mh$.invokeExact(stream, pCaptureStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamGetCaptureInfo_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamGetCaptureInfo_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, size_t *numDependencies_out)
     * }
     */
    public static FunctionDescriptor cudaStreamGetCaptureInfo_v2$descriptor() {
        return cudaStreamGetCaptureInfo_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, size_t *numDependencies_out)
     * }
     */
    public static MethodHandle cudaStreamGetCaptureInfo_v2$handle() {
        return cudaStreamGetCaptureInfo_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, size_t *numDependencies_out)
     * }
     */
    public static MemorySegment cudaStreamGetCaptureInfo_v2$address() {
        return cudaStreamGetCaptureInfo_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, size_t *numDependencies_out)
     * }
     */
    public static int cudaStreamGetCaptureInfo_v2(MemorySegment stream, MemorySegment captureStatus_out, MemorySegment id_out, MemorySegment graph_out, MemorySegment dependencies_out, MemorySegment numDependencies_out) {
        var mh$ = cudaStreamGetCaptureInfo_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamGetCaptureInfo_v2", stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out);
            }
            return (int)mh$.invokeExact(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamGetCaptureInfo_v3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamGetCaptureInfo_v3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, const cudaGraphEdgeData **edgeData_out, size_t *numDependencies_out)
     * }
     */
    public static FunctionDescriptor cudaStreamGetCaptureInfo_v3$descriptor() {
        return cudaStreamGetCaptureInfo_v3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, const cudaGraphEdgeData **edgeData_out, size_t *numDependencies_out)
     * }
     */
    public static MethodHandle cudaStreamGetCaptureInfo_v3$handle() {
        return cudaStreamGetCaptureInfo_v3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, const cudaGraphEdgeData **edgeData_out, size_t *numDependencies_out)
     * }
     */
    public static MemorySegment cudaStreamGetCaptureInfo_v3$address() {
        return cudaStreamGetCaptureInfo_v3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, enum cudaStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, cudaGraph_t *graph_out, const cudaGraphNode_t **dependencies_out, const cudaGraphEdgeData **edgeData_out, size_t *numDependencies_out)
     * }
     */
    public static int cudaStreamGetCaptureInfo_v3(MemorySegment stream, MemorySegment captureStatus_out, MemorySegment id_out, MemorySegment graph_out, MemorySegment dependencies_out, MemorySegment edgeData_out, MemorySegment numDependencies_out) {
        var mh$ = cudaStreamGetCaptureInfo_v3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamGetCaptureInfo_v3", stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out);
            }
            return (int)mh$.invokeExact(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamUpdateCaptureDependencies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamUpdateCaptureDependencies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t *dependencies, size_t numDependencies, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaStreamUpdateCaptureDependencies$descriptor() {
        return cudaStreamUpdateCaptureDependencies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t *dependencies, size_t numDependencies, unsigned int flags)
     * }
     */
    public static MethodHandle cudaStreamUpdateCaptureDependencies$handle() {
        return cudaStreamUpdateCaptureDependencies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t *dependencies, size_t numDependencies, unsigned int flags)
     * }
     */
    public static MemorySegment cudaStreamUpdateCaptureDependencies$address() {
        return cudaStreamUpdateCaptureDependencies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t *dependencies, size_t numDependencies, unsigned int flags)
     * }
     */
    public static int cudaStreamUpdateCaptureDependencies(MemorySegment stream, MemorySegment dependencies, long numDependencies, int flags) {
        var mh$ = cudaStreamUpdateCaptureDependencies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamUpdateCaptureDependencies", stream, dependencies, numDependencies, flags);
            }
            return (int)mh$.invokeExact(stream, dependencies, numDependencies, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaStreamUpdateCaptureDependencies_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaStreamUpdateCaptureDependencies_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaStreamUpdateCaptureDependencies_v2$descriptor() {
        return cudaStreamUpdateCaptureDependencies_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, unsigned int flags)
     * }
     */
    public static MethodHandle cudaStreamUpdateCaptureDependencies_v2$handle() {
        return cudaStreamUpdateCaptureDependencies_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, unsigned int flags)
     * }
     */
    public static MemorySegment cudaStreamUpdateCaptureDependencies_v2$address() {
        return cudaStreamUpdateCaptureDependencies_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t *dependencies, const cudaGraphEdgeData *dependencyData, size_t numDependencies, unsigned int flags)
     * }
     */
    public static int cudaStreamUpdateCaptureDependencies_v2(MemorySegment stream, MemorySegment dependencies, MemorySegment dependencyData, long numDependencies, int flags) {
        var mh$ = cudaStreamUpdateCaptureDependencies_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaStreamUpdateCaptureDependencies_v2", stream, dependencies, dependencyData, numDependencies, flags);
            }
            return (int)mh$.invokeExact(stream, dependencies, dependencyData, numDependencies, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreate(cudaEvent_t *event)
     * }
     */
    public static FunctionDescriptor cudaEventCreate$descriptor() {
        return cudaEventCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreate(cudaEvent_t *event)
     * }
     */
    public static MethodHandle cudaEventCreate$handle() {
        return cudaEventCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreate(cudaEvent_t *event)
     * }
     */
    public static MemorySegment cudaEventCreate$address() {
        return cudaEventCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreate(cudaEvent_t *event)
     * }
     */
    public static int cudaEventCreate(MemorySegment event) {
        var mh$ = cudaEventCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventCreate", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventCreateWithFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventCreateWithFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaEventCreateWithFlags$descriptor() {
        return cudaEventCreateWithFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags)
     * }
     */
    public static MethodHandle cudaEventCreateWithFlags$handle() {
        return cudaEventCreateWithFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags)
     * }
     */
    public static MemorySegment cudaEventCreateWithFlags$address() {
        return cudaEventCreateWithFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags)
     * }
     */
    public static int cudaEventCreateWithFlags(MemorySegment event, int flags) {
        var mh$ = cudaEventCreateWithFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventCreateWithFlags", event, flags);
            }
            return (int)mh$.invokeExact(event, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventRecord {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventRecord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaEventRecord$descriptor() {
        return cudaEventRecord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaEventRecord$handle() {
        return cudaEventRecord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaEventRecord$address() {
        return cudaEventRecord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream)
     * }
     */
    public static int cudaEventRecord(MemorySegment event, MemorySegment stream) {
        var mh$ = cudaEventRecord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventRecord", event, stream);
            }
            return (int)mh$.invokeExact(event, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventRecordWithFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventRecordWithFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaEventRecordWithFlags$descriptor() {
        return cudaEventRecordWithFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags)
     * }
     */
    public static MethodHandle cudaEventRecordWithFlags$handle() {
        return cudaEventRecordWithFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags)
     * }
     */
    public static MemorySegment cudaEventRecordWithFlags$address() {
        return cudaEventRecordWithFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags)
     * }
     */
    public static int cudaEventRecordWithFlags(MemorySegment event, MemorySegment stream, int flags) {
        var mh$ = cudaEventRecordWithFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventRecordWithFlags", event, stream, flags);
            }
            return (int)mh$.invokeExact(event, stream, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventQuery(cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaEventQuery$descriptor() {
        return cudaEventQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventQuery(cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaEventQuery$handle() {
        return cudaEventQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventQuery(cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaEventQuery$address() {
        return cudaEventQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventQuery(cudaEvent_t event)
     * }
     */
    public static int cudaEventQuery(MemorySegment event) {
        var mh$ = cudaEventQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventQuery", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventSynchronize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventSynchronize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventSynchronize(cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaEventSynchronize$descriptor() {
        return cudaEventSynchronize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventSynchronize(cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaEventSynchronize$handle() {
        return cudaEventSynchronize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventSynchronize(cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaEventSynchronize$address() {
        return cudaEventSynchronize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventSynchronize(cudaEvent_t event)
     * }
     */
    public static int cudaEventSynchronize(MemorySegment event) {
        var mh$ = cudaEventSynchronize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventSynchronize", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventDestroy(cudaEvent_t event)
     * }
     */
    public static FunctionDescriptor cudaEventDestroy$descriptor() {
        return cudaEventDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventDestroy(cudaEvent_t event)
     * }
     */
    public static MethodHandle cudaEventDestroy$handle() {
        return cudaEventDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventDestroy(cudaEvent_t event)
     * }
     */
    public static MemorySegment cudaEventDestroy$address() {
        return cudaEventDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventDestroy(cudaEvent_t event)
     * }
     */
    public static int cudaEventDestroy(MemorySegment event) {
        var mh$ = cudaEventDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventDestroy", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaEventElapsedTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaEventElapsedTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end)
     * }
     */
    public static FunctionDescriptor cudaEventElapsedTime$descriptor() {
        return cudaEventElapsedTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end)
     * }
     */
    public static MethodHandle cudaEventElapsedTime$handle() {
        return cudaEventElapsedTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end)
     * }
     */
    public static MemorySegment cudaEventElapsedTime$address() {
        return cudaEventElapsedTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end)
     * }
     */
    public static int cudaEventElapsedTime(MemorySegment ms, MemorySegment start, MemorySegment end) {
        var mh$ = cudaEventElapsedTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaEventElapsedTime", ms, start, end);
            }
            return (int)mh$.invokeExact(ms, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaImportExternalMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaImportExternalMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t *extMem_out, const struct cudaExternalMemoryHandleDesc *memHandleDesc)
     * }
     */
    public static FunctionDescriptor cudaImportExternalMemory$descriptor() {
        return cudaImportExternalMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t *extMem_out, const struct cudaExternalMemoryHandleDesc *memHandleDesc)
     * }
     */
    public static MethodHandle cudaImportExternalMemory$handle() {
        return cudaImportExternalMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t *extMem_out, const struct cudaExternalMemoryHandleDesc *memHandleDesc)
     * }
     */
    public static MemorySegment cudaImportExternalMemory$address() {
        return cudaImportExternalMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t *extMem_out, const struct cudaExternalMemoryHandleDesc *memHandleDesc)
     * }
     */
    public static int cudaImportExternalMemory(MemorySegment extMem_out, MemorySegment memHandleDesc) {
        var mh$ = cudaImportExternalMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaImportExternalMemory", extMem_out, memHandleDesc);
            }
            return (int)mh$.invokeExact(extMem_out, memHandleDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaExternalMemoryGetMappedBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaExternalMemoryGetMappedBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedBuffer(void **devPtr, cudaExternalMemory_t extMem, const struct cudaExternalMemoryBufferDesc *bufferDesc)
     * }
     */
    public static FunctionDescriptor cudaExternalMemoryGetMappedBuffer$descriptor() {
        return cudaExternalMemoryGetMappedBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedBuffer(void **devPtr, cudaExternalMemory_t extMem, const struct cudaExternalMemoryBufferDesc *bufferDesc)
     * }
     */
    public static MethodHandle cudaExternalMemoryGetMappedBuffer$handle() {
        return cudaExternalMemoryGetMappedBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedBuffer(void **devPtr, cudaExternalMemory_t extMem, const struct cudaExternalMemoryBufferDesc *bufferDesc)
     * }
     */
    public static MemorySegment cudaExternalMemoryGetMappedBuffer$address() {
        return cudaExternalMemoryGetMappedBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedBuffer(void **devPtr, cudaExternalMemory_t extMem, const struct cudaExternalMemoryBufferDesc *bufferDesc)
     * }
     */
    public static int cudaExternalMemoryGetMappedBuffer(MemorySegment devPtr, MemorySegment extMem, MemorySegment bufferDesc) {
        var mh$ = cudaExternalMemoryGetMappedBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaExternalMemoryGetMappedBuffer", devPtr, extMem, bufferDesc);
            }
            return (int)mh$.invokeExact(devPtr, extMem, bufferDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaExternalMemoryGetMappedMipmappedArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaExternalMemoryGetMappedMipmappedArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *mipmap, cudaExternalMemory_t extMem, const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc)
     * }
     */
    public static FunctionDescriptor cudaExternalMemoryGetMappedMipmappedArray$descriptor() {
        return cudaExternalMemoryGetMappedMipmappedArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *mipmap, cudaExternalMemory_t extMem, const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc)
     * }
     */
    public static MethodHandle cudaExternalMemoryGetMappedMipmappedArray$handle() {
        return cudaExternalMemoryGetMappedMipmappedArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *mipmap, cudaExternalMemory_t extMem, const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc)
     * }
     */
    public static MemorySegment cudaExternalMemoryGetMappedMipmappedArray$address() {
        return cudaExternalMemoryGetMappedMipmappedArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *mipmap, cudaExternalMemory_t extMem, const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc)
     * }
     */
    public static int cudaExternalMemoryGetMappedMipmappedArray(MemorySegment mipmap, MemorySegment extMem, MemorySegment mipmapDesc) {
        var mh$ = cudaExternalMemoryGetMappedMipmappedArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaExternalMemoryGetMappedMipmappedArray", mipmap, extMem, mipmapDesc);
            }
            return (int)mh$.invokeExact(mipmap, extMem, mipmapDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDestroyExternalMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDestroyExternalMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem)
     * }
     */
    public static FunctionDescriptor cudaDestroyExternalMemory$descriptor() {
        return cudaDestroyExternalMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem)
     * }
     */
    public static MethodHandle cudaDestroyExternalMemory$handle() {
        return cudaDestroyExternalMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem)
     * }
     */
    public static MemorySegment cudaDestroyExternalMemory$address() {
        return cudaDestroyExternalMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem)
     * }
     */
    public static int cudaDestroyExternalMemory(MemorySegment extMem) {
        var mh$ = cudaDestroyExternalMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDestroyExternalMemory", extMem);
            }
            return (int)mh$.invokeExact(extMem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaImportExternalSemaphore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaImportExternalSemaphore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t *extSem_out, const struct cudaExternalSemaphoreHandleDesc *semHandleDesc)
     * }
     */
    public static FunctionDescriptor cudaImportExternalSemaphore$descriptor() {
        return cudaImportExternalSemaphore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t *extSem_out, const struct cudaExternalSemaphoreHandleDesc *semHandleDesc)
     * }
     */
    public static MethodHandle cudaImportExternalSemaphore$handle() {
        return cudaImportExternalSemaphore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t *extSem_out, const struct cudaExternalSemaphoreHandleDesc *semHandleDesc)
     * }
     */
    public static MemorySegment cudaImportExternalSemaphore$address() {
        return cudaImportExternalSemaphore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t *extSem_out, const struct cudaExternalSemaphoreHandleDesc *semHandleDesc)
     * }
     */
    public static int cudaImportExternalSemaphore(MemorySegment extSem_out, MemorySegment semHandleDesc) {
        var mh$ = cudaImportExternalSemaphore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaImportExternalSemaphore", extSem_out, semHandleDesc);
            }
            return (int)mh$.invokeExact(extSem_out, semHandleDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaSignalExternalSemaphoresAsync_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaSignalExternalSemaphoresAsync_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaSignalExternalSemaphoresAsync_v2$descriptor() {
        return cudaSignalExternalSemaphoresAsync_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaSignalExternalSemaphoresAsync_v2$handle() {
        return cudaSignalExternalSemaphoresAsync_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaSignalExternalSemaphoresAsync_v2$address() {
        return cudaSignalExternalSemaphoresAsync_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static int cudaSignalExternalSemaphoresAsync_v2(MemorySegment extSemArray, MemorySegment paramsArray, int numExtSems, MemorySegment stream) {
        var mh$ = cudaSignalExternalSemaphoresAsync_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaSignalExternalSemaphoresAsync_v2", extSemArray, paramsArray, numExtSems, stream);
            }
            return (int)mh$.invokeExact(extSemArray, paramsArray, numExtSems, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaWaitExternalSemaphoresAsync_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaWaitExternalSemaphoresAsync_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaWaitExternalSemaphoresAsync_v2$descriptor() {
        return cudaWaitExternalSemaphoresAsync_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaWaitExternalSemaphoresAsync_v2$handle() {
        return cudaWaitExternalSemaphoresAsync_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaWaitExternalSemaphoresAsync_v2$address() {
        return cudaWaitExternalSemaphoresAsync_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, cudaStream_t stream)
     * }
     */
    public static int cudaWaitExternalSemaphoresAsync_v2(MemorySegment extSemArray, MemorySegment paramsArray, int numExtSems, MemorySegment stream) {
        var mh$ = cudaWaitExternalSemaphoresAsync_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaWaitExternalSemaphoresAsync_v2", extSemArray, paramsArray, numExtSems, stream);
            }
            return (int)mh$.invokeExact(extSemArray, paramsArray, numExtSems, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaDestroyExternalSemaphore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaDestroyExternalSemaphore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem)
     * }
     */
    public static FunctionDescriptor cudaDestroyExternalSemaphore$descriptor() {
        return cudaDestroyExternalSemaphore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem)
     * }
     */
    public static MethodHandle cudaDestroyExternalSemaphore$handle() {
        return cudaDestroyExternalSemaphore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem)
     * }
     */
    public static MemorySegment cudaDestroyExternalSemaphore$address() {
        return cudaDestroyExternalSemaphore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem)
     * }
     */
    public static int cudaDestroyExternalSemaphore(MemorySegment extSem) {
        var mh$ = cudaDestroyExternalSemaphore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaDestroyExternalSemaphore", extSem);
            }
            return (int)mh$.invokeExact(extSem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaLaunchKernel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            dim3.layout(),
            dim3.layout(),
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaLaunchKernel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaLaunchKernel$descriptor() {
        return cudaLaunchKernel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaLaunchKernel$handle() {
        return cudaLaunchKernel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaLaunchKernel$address() {
        return cudaLaunchKernel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static int cudaLaunchKernel(MemorySegment func, MemorySegment gridDim, MemorySegment blockDim, MemorySegment args, long sharedMem, MemorySegment stream) {
        var mh$ = cudaLaunchKernel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaLaunchKernel", func, gridDim, blockDim, args, sharedMem, stream);
            }
            return (int)mh$.invokeExact(func, gridDim, blockDim, args, sharedMem, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaLaunchKernelExC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaLaunchKernelExC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t *config, const void *func, void **args)
     * }
     */
    public static FunctionDescriptor cudaLaunchKernelExC$descriptor() {
        return cudaLaunchKernelExC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t *config, const void *func, void **args)
     * }
     */
    public static MethodHandle cudaLaunchKernelExC$handle() {
        return cudaLaunchKernelExC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t *config, const void *func, void **args)
     * }
     */
    public static MemorySegment cudaLaunchKernelExC$address() {
        return cudaLaunchKernelExC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t *config, const void *func, void **args)
     * }
     */
    public static int cudaLaunchKernelExC(MemorySegment config, MemorySegment func, MemorySegment args) {
        var mh$ = cudaLaunchKernelExC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaLaunchKernelExC", config, func, args);
            }
            return (int)mh$.invokeExact(config, func, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaLaunchCooperativeKernel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            dim3.layout(),
            dim3.layout(),
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaLaunchCooperativeKernel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaLaunchCooperativeKernel$descriptor() {
        return cudaLaunchCooperativeKernel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaLaunchCooperativeKernel$handle() {
        return cudaLaunchCooperativeKernel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaLaunchCooperativeKernel$address() {
        return cudaLaunchCooperativeKernel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream)
     * }
     */
    public static int cudaLaunchCooperativeKernel(MemorySegment func, MemorySegment gridDim, MemorySegment blockDim, MemorySegment args, long sharedMem, MemorySegment stream) {
        var mh$ = cudaLaunchCooperativeKernel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaLaunchCooperativeKernel", func, gridDim, blockDim, args, sharedMem, stream);
            }
            return (int)mh$.invokeExact(func, gridDim, blockDim, args, sharedMem, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaLaunchCooperativeKernelMultiDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaLaunchCooperativeKernelMultiDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaLaunchCooperativeKernelMultiDevice$descriptor() {
        return cudaLaunchCooperativeKernelMultiDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags)
     * }
     */
    public static MethodHandle cudaLaunchCooperativeKernelMultiDevice$handle() {
        return cudaLaunchCooperativeKernelMultiDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags)
     * }
     */
    public static MemorySegment cudaLaunchCooperativeKernelMultiDevice$address() {
        return cudaLaunchCooperativeKernelMultiDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags)
     * }
     */
    public static int cudaLaunchCooperativeKernelMultiDevice(MemorySegment launchParamsList, int numDevices, int flags) {
        var mh$ = cudaLaunchCooperativeKernelMultiDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaLaunchCooperativeKernelMultiDevice", launchParamsList, numDevices, flags);
            }
            return (int)mh$.invokeExact(launchParamsList, numDevices, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFuncSetCacheConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFuncSetCacheConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig)
     * }
     */
    public static FunctionDescriptor cudaFuncSetCacheConfig$descriptor() {
        return cudaFuncSetCacheConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig)
     * }
     */
    public static MethodHandle cudaFuncSetCacheConfig$handle() {
        return cudaFuncSetCacheConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig)
     * }
     */
    public static MemorySegment cudaFuncSetCacheConfig$address() {
        return cudaFuncSetCacheConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig)
     * }
     */
    public static int cudaFuncSetCacheConfig(MemorySegment func, int cacheConfig) {
        var mh$ = cudaFuncSetCacheConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFuncSetCacheConfig", func, cacheConfig);
            }
            return (int)mh$.invokeExact(func, cacheConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFuncGetAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFuncGetAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func)
     * }
     */
    public static FunctionDescriptor cudaFuncGetAttributes$descriptor() {
        return cudaFuncGetAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func)
     * }
     */
    public static MethodHandle cudaFuncGetAttributes$handle() {
        return cudaFuncGetAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func)
     * }
     */
    public static MemorySegment cudaFuncGetAttributes$address() {
        return cudaFuncGetAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func)
     * }
     */
    public static int cudaFuncGetAttributes(MemorySegment attr, MemorySegment func) {
        var mh$ = cudaFuncGetAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFuncGetAttributes", attr, func);
            }
            return (int)mh$.invokeExact(attr, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFuncSetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFuncSetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value)
     * }
     */
    public static FunctionDescriptor cudaFuncSetAttribute$descriptor() {
        return cudaFuncSetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value)
     * }
     */
    public static MethodHandle cudaFuncSetAttribute$handle() {
        return cudaFuncSetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value)
     * }
     */
    public static MemorySegment cudaFuncSetAttribute$address() {
        return cudaFuncSetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value)
     * }
     */
    public static int cudaFuncSetAttribute(MemorySegment func, int attr, int value) {
        var mh$ = cudaFuncSetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFuncSetAttribute", func, attr, value);
            }
            return (int)mh$.invokeExact(func, attr, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFuncGetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFuncGetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetName(const char **name, const void *func)
     * }
     */
    public static FunctionDescriptor cudaFuncGetName$descriptor() {
        return cudaFuncGetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetName(const char **name, const void *func)
     * }
     */
    public static MethodHandle cudaFuncGetName$handle() {
        return cudaFuncGetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetName(const char **name, const void *func)
     * }
     */
    public static MemorySegment cudaFuncGetName$address() {
        return cudaFuncGetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetName(const char **name, const void *func)
     * }
     */
    public static int cudaFuncGetName(MemorySegment name, MemorySegment func) {
        var mh$ = cudaFuncGetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFuncGetName", name, func);
            }
            return (int)mh$.invokeExact(name, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFuncGetParamInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFuncGetParamInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetParamInfo(const void *func, size_t paramIndex, size_t *paramOffset, size_t *paramSize)
     * }
     */
    public static FunctionDescriptor cudaFuncGetParamInfo$descriptor() {
        return cudaFuncGetParamInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetParamInfo(const void *func, size_t paramIndex, size_t *paramOffset, size_t *paramSize)
     * }
     */
    public static MethodHandle cudaFuncGetParamInfo$handle() {
        return cudaFuncGetParamInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetParamInfo(const void *func, size_t paramIndex, size_t *paramOffset, size_t *paramSize)
     * }
     */
    public static MemorySegment cudaFuncGetParamInfo$address() {
        return cudaFuncGetParamInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncGetParamInfo(const void *func, size_t paramIndex, size_t *paramOffset, size_t *paramSize)
     * }
     */
    public static int cudaFuncGetParamInfo(MemorySegment func, long paramIndex, MemorySegment paramOffset, MemorySegment paramSize) {
        var mh$ = cudaFuncGetParamInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFuncGetParamInfo", func, paramIndex, paramOffset, paramSize);
            }
            return (int)mh$.invokeExact(func, paramIndex, paramOffset, paramSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaSetDoubleForDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaSetDoubleForDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForDevice(double *d)
     * }
     */
    public static FunctionDescriptor cudaSetDoubleForDevice$descriptor() {
        return cudaSetDoubleForDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForDevice(double *d)
     * }
     */
    public static MethodHandle cudaSetDoubleForDevice$handle() {
        return cudaSetDoubleForDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForDevice(double *d)
     * }
     */
    public static MemorySegment cudaSetDoubleForDevice$address() {
        return cudaSetDoubleForDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForDevice(double *d)
     * }
     */
    public static int cudaSetDoubleForDevice(MemorySegment d) {
        var mh$ = cudaSetDoubleForDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaSetDoubleForDevice", d);
            }
            return (int)mh$.invokeExact(d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaSetDoubleForHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaSetDoubleForHost");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForHost(double *d)
     * }
     */
    public static FunctionDescriptor cudaSetDoubleForHost$descriptor() {
        return cudaSetDoubleForHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForHost(double *d)
     * }
     */
    public static MethodHandle cudaSetDoubleForHost$handle() {
        return cudaSetDoubleForHost.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForHost(double *d)
     * }
     */
    public static MemorySegment cudaSetDoubleForHost$address() {
        return cudaSetDoubleForHost.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaSetDoubleForHost(double *d)
     * }
     */
    public static int cudaSetDoubleForHost(MemorySegment d) {
        var mh$ = cudaSetDoubleForHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaSetDoubleForHost", d);
            }
            return (int)mh$.invokeExact(d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaLaunchHostFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaLaunchHostFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void *userData)
     * }
     */
    public static FunctionDescriptor cudaLaunchHostFunc$descriptor() {
        return cudaLaunchHostFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void *userData)
     * }
     */
    public static MethodHandle cudaLaunchHostFunc$handle() {
        return cudaLaunchHostFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void *userData)
     * }
     */
    public static MemorySegment cudaLaunchHostFunc$address() {
        return cudaLaunchHostFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void *userData)
     * }
     */
    public static int cudaLaunchHostFunc(MemorySegment stream, MemorySegment fn, MemorySegment userData) {
        var mh$ = cudaLaunchHostFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaLaunchHostFunc", stream, fn, userData);
            }
            return (int)mh$.invokeExact(stream, fn, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFuncSetSharedMemConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFuncSetSharedMemConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config)
     * }
     */
    public static FunctionDescriptor cudaFuncSetSharedMemConfig$descriptor() {
        return cudaFuncSetSharedMemConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config)
     * }
     */
    public static MethodHandle cudaFuncSetSharedMemConfig$handle() {
        return cudaFuncSetSharedMemConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config)
     * }
     */
    public static MemorySegment cudaFuncSetSharedMemConfig$address() {
        return cudaFuncSetSharedMemConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config)
     * }
     */
    public static int cudaFuncSetSharedMemConfig(MemorySegment func, int config) {
        var mh$ = cudaFuncSetSharedMemConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFuncSetSharedMemConfig", func, config);
            }
            return (int)mh$.invokeExact(func, config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaOccupancyMaxActiveBlocksPerMultiprocessor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaOccupancyMaxActiveBlocksPerMultiprocessor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize)
     * }
     */
    public static FunctionDescriptor cudaOccupancyMaxActiveBlocksPerMultiprocessor$descriptor() {
        return cudaOccupancyMaxActiveBlocksPerMultiprocessor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize)
     * }
     */
    public static MethodHandle cudaOccupancyMaxActiveBlocksPerMultiprocessor$handle() {
        return cudaOccupancyMaxActiveBlocksPerMultiprocessor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize)
     * }
     */
    public static MemorySegment cudaOccupancyMaxActiveBlocksPerMultiprocessor$address() {
        return cudaOccupancyMaxActiveBlocksPerMultiprocessor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize)
     * }
     */
    public static int cudaOccupancyMaxActiveBlocksPerMultiprocessor(MemorySegment numBlocks, MemorySegment func, int blockSize, long dynamicSMemSize) {
        var mh$ = cudaOccupancyMaxActiveBlocksPerMultiprocessor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaOccupancyMaxActiveBlocksPerMultiprocessor", numBlocks, func, blockSize, dynamicSMemSize);
            }
            return (int)mh$.invokeExact(numBlocks, func, blockSize, dynamicSMemSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaOccupancyAvailableDynamicSMemPerBlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaOccupancyAvailableDynamicSMemPerBlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, const void *func, int numBlocks, int blockSize)
     * }
     */
    public static FunctionDescriptor cudaOccupancyAvailableDynamicSMemPerBlock$descriptor() {
        return cudaOccupancyAvailableDynamicSMemPerBlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, const void *func, int numBlocks, int blockSize)
     * }
     */
    public static MethodHandle cudaOccupancyAvailableDynamicSMemPerBlock$handle() {
        return cudaOccupancyAvailableDynamicSMemPerBlock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, const void *func, int numBlocks, int blockSize)
     * }
     */
    public static MemorySegment cudaOccupancyAvailableDynamicSMemPerBlock$address() {
        return cudaOccupancyAvailableDynamicSMemPerBlock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, const void *func, int numBlocks, int blockSize)
     * }
     */
    public static int cudaOccupancyAvailableDynamicSMemPerBlock(MemorySegment dynamicSmemSize, MemorySegment func, int numBlocks, int blockSize) {
        var mh$ = cudaOccupancyAvailableDynamicSMemPerBlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaOccupancyAvailableDynamicSMemPerBlock", dynamicSmemSize, func, numBlocks, blockSize);
            }
            return (int)mh$.invokeExact(dynamicSmemSize, func, numBlocks, blockSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags$descriptor() {
        return cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags)
     * }
     */
    public static MethodHandle cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags$handle() {
        return cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags)
     * }
     */
    public static MemorySegment cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags$address() {
        return cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags)
     * }
     */
    public static int cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(MemorySegment numBlocks, MemorySegment func, int blockSize, long dynamicSMemSize, int flags) {
        var mh$ = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", numBlocks, func, blockSize, dynamicSMemSize, flags);
            }
            return (int)mh$.invokeExact(numBlocks, func, blockSize, dynamicSMemSize, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaOccupancyMaxPotentialClusterSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaOccupancyMaxPotentialClusterSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int *clusterSize, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static FunctionDescriptor cudaOccupancyMaxPotentialClusterSize$descriptor() {
        return cudaOccupancyMaxPotentialClusterSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int *clusterSize, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static MethodHandle cudaOccupancyMaxPotentialClusterSize$handle() {
        return cudaOccupancyMaxPotentialClusterSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int *clusterSize, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static MemorySegment cudaOccupancyMaxPotentialClusterSize$address() {
        return cudaOccupancyMaxPotentialClusterSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int *clusterSize, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static int cudaOccupancyMaxPotentialClusterSize(MemorySegment clusterSize, MemorySegment func, MemorySegment launchConfig) {
        var mh$ = cudaOccupancyMaxPotentialClusterSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaOccupancyMaxPotentialClusterSize", clusterSize, func, launchConfig);
            }
            return (int)mh$.invokeExact(clusterSize, func, launchConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaOccupancyMaxActiveClusters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaOccupancyMaxActiveClusters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveClusters(int *numClusters, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static FunctionDescriptor cudaOccupancyMaxActiveClusters$descriptor() {
        return cudaOccupancyMaxActiveClusters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveClusters(int *numClusters, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static MethodHandle cudaOccupancyMaxActiveClusters$handle() {
        return cudaOccupancyMaxActiveClusters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveClusters(int *numClusters, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static MemorySegment cudaOccupancyMaxActiveClusters$address() {
        return cudaOccupancyMaxActiveClusters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaOccupancyMaxActiveClusters(int *numClusters, const void *func, const cudaLaunchConfig_t *launchConfig)
     * }
     */
    public static int cudaOccupancyMaxActiveClusters(MemorySegment numClusters, MemorySegment func, MemorySegment launchConfig) {
        var mh$ = cudaOccupancyMaxActiveClusters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaOccupancyMaxActiveClusters", numClusters, func, launchConfig);
            }
            return (int)mh$.invokeExact(numClusters, func, launchConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMallocManaged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMallocManaged");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaMallocManaged$descriptor() {
        return cudaMallocManaged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags)
     * }
     */
    public static MethodHandle cudaMallocManaged$handle() {
        return cudaMallocManaged.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags)
     * }
     */
    public static MemorySegment cudaMallocManaged$address() {
        return cudaMallocManaged.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags)
     * }
     */
    public static int cudaMallocManaged(MemorySegment devPtr, long size, int flags) {
        var mh$ = cudaMallocManaged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMallocManaged", devPtr, size, flags);
            }
            return (int)mh$.invokeExact(devPtr, size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc(void **devPtr, size_t size)
     * }
     */
    public static FunctionDescriptor cudaMalloc$descriptor() {
        return cudaMalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc(void **devPtr, size_t size)
     * }
     */
    public static MethodHandle cudaMalloc$handle() {
        return cudaMalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc(void **devPtr, size_t size)
     * }
     */
    public static MemorySegment cudaMalloc$address() {
        return cudaMalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc(void **devPtr, size_t size)
     * }
     */
    public static int cudaMalloc(MemorySegment devPtr, long size) {
        var mh$ = cudaMalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMalloc", devPtr, size);
            }
            return (int)mh$.invokeExact(devPtr, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMallocHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMallocHost");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocHost(void **ptr, size_t size)
     * }
     */
    public static FunctionDescriptor cudaMallocHost$descriptor() {
        return cudaMallocHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocHost(void **ptr, size_t size)
     * }
     */
    public static MethodHandle cudaMallocHost$handle() {
        return cudaMallocHost.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocHost(void **ptr, size_t size)
     * }
     */
    public static MemorySegment cudaMallocHost$address() {
        return cudaMallocHost.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocHost(void **ptr, size_t size)
     * }
     */
    public static int cudaMallocHost(MemorySegment ptr, long size) {
        var mh$ = cudaMallocHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMallocHost", ptr, size);
            }
            return (int)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMallocPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMallocPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height)
     * }
     */
    public static FunctionDescriptor cudaMallocPitch$descriptor() {
        return cudaMallocPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height)
     * }
     */
    public static MethodHandle cudaMallocPitch$handle() {
        return cudaMallocPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height)
     * }
     */
    public static MemorySegment cudaMallocPitch$address() {
        return cudaMallocPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height)
     * }
     */
    public static int cudaMallocPitch(MemorySegment devPtr, MemorySegment pitch, long width, long height) {
        var mh$ = cudaMallocPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMallocPitch", devPtr, pitch, width, height);
            }
            return (int)mh$.invokeExact(devPtr, pitch, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMallocArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMallocArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaMallocArray$descriptor() {
        return cudaMallocArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)
     * }
     */
    public static MethodHandle cudaMallocArray$handle() {
        return cudaMallocArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)
     * }
     */
    public static MemorySegment cudaMallocArray$address() {
        return cudaMallocArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)
     * }
     */
    public static int cudaMallocArray(MemorySegment array, MemorySegment desc, long width, long height, int flags) {
        var mh$ = cudaMallocArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMallocArray", array, desc, width, height, flags);
            }
            return (int)mh$.invokeExact(array, desc, width, height, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFree(void *devPtr)
     * }
     */
    public static FunctionDescriptor cudaFree$descriptor() {
        return cudaFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFree(void *devPtr)
     * }
     */
    public static MethodHandle cudaFree$handle() {
        return cudaFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFree(void *devPtr)
     * }
     */
    public static MemorySegment cudaFree$address() {
        return cudaFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFree(void *devPtr)
     * }
     */
    public static int cudaFree(MemorySegment devPtr) {
        var mh$ = cudaFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFree", devPtr);
            }
            return (int)mh$.invokeExact(devPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFreeHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFreeHost");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeHost(void *ptr)
     * }
     */
    public static FunctionDescriptor cudaFreeHost$descriptor() {
        return cudaFreeHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeHost(void *ptr)
     * }
     */
    public static MethodHandle cudaFreeHost$handle() {
        return cudaFreeHost.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeHost(void *ptr)
     * }
     */
    public static MemorySegment cudaFreeHost$address() {
        return cudaFreeHost.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeHost(void *ptr)
     * }
     */
    public static int cudaFreeHost(MemorySegment ptr) {
        var mh$ = cudaFreeHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFreeHost", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFreeArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFreeArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeArray(cudaArray_t array)
     * }
     */
    public static FunctionDescriptor cudaFreeArray$descriptor() {
        return cudaFreeArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeArray(cudaArray_t array)
     * }
     */
    public static MethodHandle cudaFreeArray$handle() {
        return cudaFreeArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeArray(cudaArray_t array)
     * }
     */
    public static MemorySegment cudaFreeArray$address() {
        return cudaFreeArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeArray(cudaArray_t array)
     * }
     */
    public static int cudaFreeArray(MemorySegment array) {
        var mh$ = cudaFreeArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFreeArray", array);
            }
            return (int)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFreeMipmappedArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFreeMipmappedArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray)
     * }
     */
    public static FunctionDescriptor cudaFreeMipmappedArray$descriptor() {
        return cudaFreeMipmappedArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray)
     * }
     */
    public static MethodHandle cudaFreeMipmappedArray$handle() {
        return cudaFreeMipmappedArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray)
     * }
     */
    public static MemorySegment cudaFreeMipmappedArray$address() {
        return cudaFreeMipmappedArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray)
     * }
     */
    public static int cudaFreeMipmappedArray(MemorySegment mipmappedArray) {
        var mh$ = cudaFreeMipmappedArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFreeMipmappedArray", mipmappedArray);
            }
            return (int)mh$.invokeExact(mipmappedArray);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaHostAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaHostAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaHostAlloc$descriptor() {
        return cudaHostAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags)
     * }
     */
    public static MethodHandle cudaHostAlloc$handle() {
        return cudaHostAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags)
     * }
     */
    public static MemorySegment cudaHostAlloc$address() {
        return cudaHostAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags)
     * }
     */
    public static int cudaHostAlloc(MemorySegment pHost, long size, int flags) {
        var mh$ = cudaHostAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaHostAlloc", pHost, size, flags);
            }
            return (int)mh$.invokeExact(pHost, size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaHostRegister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaHostRegister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaHostRegister$descriptor() {
        return cudaHostRegister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags)
     * }
     */
    public static MethodHandle cudaHostRegister$handle() {
        return cudaHostRegister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags)
     * }
     */
    public static MemorySegment cudaHostRegister$address() {
        return cudaHostRegister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags)
     * }
     */
    public static int cudaHostRegister(MemorySegment ptr, long size, int flags) {
        var mh$ = cudaHostRegister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaHostRegister", ptr, size, flags);
            }
            return (int)mh$.invokeExact(ptr, size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaHostUnregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaHostUnregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostUnregister(void *ptr)
     * }
     */
    public static FunctionDescriptor cudaHostUnregister$descriptor() {
        return cudaHostUnregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostUnregister(void *ptr)
     * }
     */
    public static MethodHandle cudaHostUnregister$handle() {
        return cudaHostUnregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostUnregister(void *ptr)
     * }
     */
    public static MemorySegment cudaHostUnregister$address() {
        return cudaHostUnregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaHostUnregister(void *ptr)
     * }
     */
    public static int cudaHostUnregister(MemorySegment ptr) {
        var mh$ = cudaHostUnregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaHostUnregister", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaHostGetDevicePointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaHostGetDevicePointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaHostGetDevicePointer$descriptor() {
        return cudaHostGetDevicePointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags)
     * }
     */
    public static MethodHandle cudaHostGetDevicePointer$handle() {
        return cudaHostGetDevicePointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags)
     * }
     */
    public static MemorySegment cudaHostGetDevicePointer$address() {
        return cudaHostGetDevicePointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags)
     * }
     */
    public static int cudaHostGetDevicePointer(MemorySegment pDevice, MemorySegment pHost, int flags) {
        var mh$ = cudaHostGetDevicePointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaHostGetDevicePointer", pDevice, pHost, flags);
            }
            return (int)mh$.invokeExact(pDevice, pHost, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaHostGetFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaHostGetFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost)
     * }
     */
    public static FunctionDescriptor cudaHostGetFlags$descriptor() {
        return cudaHostGetFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost)
     * }
     */
    public static MethodHandle cudaHostGetFlags$handle() {
        return cudaHostGetFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost)
     * }
     */
    public static MemorySegment cudaHostGetFlags$address() {
        return cudaHostGetFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost)
     * }
     */
    public static int cudaHostGetFlags(MemorySegment pFlags, MemorySegment pHost) {
        var mh$ = cudaHostGetFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaHostGetFlags", pFlags, pHost);
            }
            return (int)mh$.invokeExact(pFlags, pHost);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMalloc3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            cudaExtent.layout()
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMalloc3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3D(struct cudaPitchedPtr *pitchedDevPtr, struct cudaExtent extent)
     * }
     */
    public static FunctionDescriptor cudaMalloc3D$descriptor() {
        return cudaMalloc3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3D(struct cudaPitchedPtr *pitchedDevPtr, struct cudaExtent extent)
     * }
     */
    public static MethodHandle cudaMalloc3D$handle() {
        return cudaMalloc3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3D(struct cudaPitchedPtr *pitchedDevPtr, struct cudaExtent extent)
     * }
     */
    public static MemorySegment cudaMalloc3D$address() {
        return cudaMalloc3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3D(struct cudaPitchedPtr *pitchedDevPtr, struct cudaExtent extent)
     * }
     */
    public static int cudaMalloc3D(MemorySegment pitchedDevPtr, MemorySegment extent) {
        var mh$ = cudaMalloc3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMalloc3D", pitchedDevPtr, extent);
            }
            return (int)mh$.invokeExact(pitchedDevPtr, extent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMalloc3DArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            cudaExtent.layout(),
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMalloc3DArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaMalloc3DArray$descriptor() {
        return cudaMalloc3DArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int flags)
     * }
     */
    public static MethodHandle cudaMalloc3DArray$handle() {
        return cudaMalloc3DArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int flags)
     * }
     */
    public static MemorySegment cudaMalloc3DArray$address() {
        return cudaMalloc3DArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int flags)
     * }
     */
    public static int cudaMalloc3DArray(MemorySegment array, MemorySegment desc, MemorySegment extent, int flags) {
        var mh$ = cudaMalloc3DArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMalloc3DArray", array, desc, extent, flags);
            }
            return (int)mh$.invokeExact(array, desc, extent, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMallocMipmappedArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            cudaExtent.layout(),
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMallocMipmappedArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags)
     * }
     */
    public static FunctionDescriptor cudaMallocMipmappedArray$descriptor() {
        return cudaMallocMipmappedArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags)
     * }
     */
    public static MethodHandle cudaMallocMipmappedArray$handle() {
        return cudaMallocMipmappedArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags)
     * }
     */
    public static MemorySegment cudaMallocMipmappedArray$address() {
        return cudaMallocMipmappedArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc *desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags)
     * }
     */
    public static int cudaMallocMipmappedArray(MemorySegment mipmappedArray, MemorySegment desc, MemorySegment extent, int numLevels, int flags) {
        var mh$ = cudaMallocMipmappedArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMallocMipmappedArray", mipmappedArray, desc, extent, numLevels, flags);
            }
            return (int)mh$.invokeExact(mipmappedArray, desc, extent, numLevels, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetMipmappedArrayLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetMipmappedArrayLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level)
     * }
     */
    public static FunctionDescriptor cudaGetMipmappedArrayLevel$descriptor() {
        return cudaGetMipmappedArrayLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level)
     * }
     */
    public static MethodHandle cudaGetMipmappedArrayLevel$handle() {
        return cudaGetMipmappedArrayLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level)
     * }
     */
    public static MemorySegment cudaGetMipmappedArrayLevel$address() {
        return cudaGetMipmappedArrayLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level)
     * }
     */
    public static int cudaGetMipmappedArrayLevel(MemorySegment levelArray, MemorySegment mipmappedArray, int level) {
        var mh$ = cudaGetMipmappedArrayLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetMipmappedArrayLevel", levelArray, mipmappedArray, level);
            }
            return (int)mh$.invokeExact(levelArray, mipmappedArray, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p)
     * }
     */
    public static FunctionDescriptor cudaMemcpy3D$descriptor() {
        return cudaMemcpy3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p)
     * }
     */
    public static MethodHandle cudaMemcpy3D$handle() {
        return cudaMemcpy3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p)
     * }
     */
    public static MemorySegment cudaMemcpy3D$address() {
        return cudaMemcpy3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p)
     * }
     */
    public static int cudaMemcpy3D(MemorySegment p) {
        var mh$ = cudaMemcpy3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy3D", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy3DPeer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy3DPeer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p)
     * }
     */
    public static FunctionDescriptor cudaMemcpy3DPeer$descriptor() {
        return cudaMemcpy3DPeer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p)
     * }
     */
    public static MethodHandle cudaMemcpy3DPeer$handle() {
        return cudaMemcpy3DPeer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p)
     * }
     */
    public static MemorySegment cudaMemcpy3DPeer$address() {
        return cudaMemcpy3DPeer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p)
     * }
     */
    public static int cudaMemcpy3DPeer(MemorySegment p) {
        var mh$ = cudaMemcpy3DPeer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy3DPeer", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy3DAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy3DAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpy3DAsync$descriptor() {
        return cudaMemcpy3DAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpy3DAsync$handle() {
        return cudaMemcpy3DAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpy3DAsync$address() {
        return cudaMemcpy3DAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpy3DAsync(MemorySegment p, MemorySegment stream) {
        var mh$ = cudaMemcpy3DAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy3DAsync", p, stream);
            }
            return (int)mh$.invokeExact(p, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy3DPeerAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy3DPeerAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpy3DPeerAsync$descriptor() {
        return cudaMemcpy3DPeerAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpy3DPeerAsync$handle() {
        return cudaMemcpy3DPeerAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpy3DPeerAsync$address() {
        return cudaMemcpy3DPeerAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpy3DPeerAsync(MemorySegment p, MemorySegment stream) {
        var mh$ = cudaMemcpy3DPeerAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy3DPeerAsync", p, stream);
            }
            return (int)mh$.invokeExact(p, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemGetInfo(size_t *free, size_t *total)
     * }
     */
    public static FunctionDescriptor cudaMemGetInfo$descriptor() {
        return cudaMemGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemGetInfo(size_t *free, size_t *total)
     * }
     */
    public static MethodHandle cudaMemGetInfo$handle() {
        return cudaMemGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemGetInfo(size_t *free, size_t *total)
     * }
     */
    public static MemorySegment cudaMemGetInfo$address() {
        return cudaMemGetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemGetInfo(size_t *free, size_t *total)
     * }
     */
    public static int cudaMemGetInfo(MemorySegment free, MemorySegment total) {
        var mh$ = cudaMemGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemGetInfo", free, total);
            }
            return (int)mh$.invokeExact(free, total);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaArrayGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaArrayGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array)
     * }
     */
    public static FunctionDescriptor cudaArrayGetInfo$descriptor() {
        return cudaArrayGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array)
     * }
     */
    public static MethodHandle cudaArrayGetInfo$handle() {
        return cudaArrayGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array)
     * }
     */
    public static MemorySegment cudaArrayGetInfo$address() {
        return cudaArrayGetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array)
     * }
     */
    public static int cudaArrayGetInfo(MemorySegment desc, MemorySegment extent, MemorySegment flags, MemorySegment array) {
        var mh$ = cudaArrayGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaArrayGetInfo", desc, extent, flags, array);
            }
            return (int)mh$.invokeExact(desc, extent, flags, array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaArrayGetPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaArrayGetPlane");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetPlane(cudaArray_t *pPlaneArray, cudaArray_t hArray, unsigned int planeIdx)
     * }
     */
    public static FunctionDescriptor cudaArrayGetPlane$descriptor() {
        return cudaArrayGetPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetPlane(cudaArray_t *pPlaneArray, cudaArray_t hArray, unsigned int planeIdx)
     * }
     */
    public static MethodHandle cudaArrayGetPlane$handle() {
        return cudaArrayGetPlane.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetPlane(cudaArray_t *pPlaneArray, cudaArray_t hArray, unsigned int planeIdx)
     * }
     */
    public static MemorySegment cudaArrayGetPlane$address() {
        return cudaArrayGetPlane.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetPlane(cudaArray_t *pPlaneArray, cudaArray_t hArray, unsigned int planeIdx)
     * }
     */
    public static int cudaArrayGetPlane(MemorySegment pPlaneArray, MemorySegment hArray, int planeIdx) {
        var mh$ = cudaArrayGetPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaArrayGetPlane", pPlaneArray, hArray, planeIdx);
            }
            return (int)mh$.invokeExact(pPlaneArray, hArray, planeIdx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaArrayGetMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaArrayGetMemoryRequirements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaArray_t array, int device)
     * }
     */
    public static FunctionDescriptor cudaArrayGetMemoryRequirements$descriptor() {
        return cudaArrayGetMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaArray_t array, int device)
     * }
     */
    public static MethodHandle cudaArrayGetMemoryRequirements$handle() {
        return cudaArrayGetMemoryRequirements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaArray_t array, int device)
     * }
     */
    public static MemorySegment cudaArrayGetMemoryRequirements$address() {
        return cudaArrayGetMemoryRequirements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaArray_t array, int device)
     * }
     */
    public static int cudaArrayGetMemoryRequirements(MemorySegment memoryRequirements, MemorySegment array, int device) {
        var mh$ = cudaArrayGetMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaArrayGetMemoryRequirements", memoryRequirements, array, device);
            }
            return (int)mh$.invokeExact(memoryRequirements, array, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMipmappedArrayGetMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMipmappedArrayGetMemoryRequirements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaMipmappedArray_t mipmap, int device)
     * }
     */
    public static FunctionDescriptor cudaMipmappedArrayGetMemoryRequirements$descriptor() {
        return cudaMipmappedArrayGetMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaMipmappedArray_t mipmap, int device)
     * }
     */
    public static MethodHandle cudaMipmappedArrayGetMemoryRequirements$handle() {
        return cudaMipmappedArrayGetMemoryRequirements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaMipmappedArray_t mipmap, int device)
     * }
     */
    public static MemorySegment cudaMipmappedArrayGetMemoryRequirements$address() {
        return cudaMipmappedArrayGetMemoryRequirements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *memoryRequirements, cudaMipmappedArray_t mipmap, int device)
     * }
     */
    public static int cudaMipmappedArrayGetMemoryRequirements(MemorySegment memoryRequirements, MemorySegment mipmap, int device) {
        var mh$ = cudaMipmappedArrayGetMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMipmappedArrayGetMemoryRequirements", memoryRequirements, mipmap, device);
            }
            return (int)mh$.invokeExact(memoryRequirements, mipmap, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaArrayGetSparseProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaArrayGetSparseProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaArray_t array)
     * }
     */
    public static FunctionDescriptor cudaArrayGetSparseProperties$descriptor() {
        return cudaArrayGetSparseProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaArray_t array)
     * }
     */
    public static MethodHandle cudaArrayGetSparseProperties$handle() {
        return cudaArrayGetSparseProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaArray_t array)
     * }
     */
    public static MemorySegment cudaArrayGetSparseProperties$address() {
        return cudaArrayGetSparseProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaArray_t array)
     * }
     */
    public static int cudaArrayGetSparseProperties(MemorySegment sparseProperties, MemorySegment array) {
        var mh$ = cudaArrayGetSparseProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaArrayGetSparseProperties", sparseProperties, array);
            }
            return (int)mh$.invokeExact(sparseProperties, array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMipmappedArrayGetSparseProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMipmappedArrayGetSparseProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaMipmappedArray_t mipmap)
     * }
     */
    public static FunctionDescriptor cudaMipmappedArrayGetSparseProperties$descriptor() {
        return cudaMipmappedArrayGetSparseProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaMipmappedArray_t mipmap)
     * }
     */
    public static MethodHandle cudaMipmappedArrayGetSparseProperties$handle() {
        return cudaMipmappedArrayGetSparseProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaMipmappedArray_t mipmap)
     * }
     */
    public static MemorySegment cudaMipmappedArrayGetSparseProperties$address() {
        return cudaMipmappedArrayGetSparseProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *sparseProperties, cudaMipmappedArray_t mipmap)
     * }
     */
    public static int cudaMipmappedArrayGetSparseProperties(MemorySegment sparseProperties, MemorySegment mipmap) {
        var mh$ = cudaMipmappedArrayGetSparseProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMipmappedArrayGetSparseProperties", sparseProperties, mipmap);
            }
            return (int)mh$.invokeExact(sparseProperties, mipmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpy$descriptor() {
        return cudaMemcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpy$handle() {
        return cudaMemcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpy$address() {
        return cudaMemcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpy(MemorySegment dst, MemorySegment src, long count, int kind) {
        var mh$ = cudaMemcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy", dst, src, count, kind);
            }
            return (int)mh$.invokeExact(dst, src, count, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyPeer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyPeer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count)
     * }
     */
    public static FunctionDescriptor cudaMemcpyPeer$descriptor() {
        return cudaMemcpyPeer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count)
     * }
     */
    public static MethodHandle cudaMemcpyPeer$handle() {
        return cudaMemcpyPeer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count)
     * }
     */
    public static MemorySegment cudaMemcpyPeer$address() {
        return cudaMemcpyPeer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count)
     * }
     */
    public static int cudaMemcpyPeer(MemorySegment dst, int dstDevice, MemorySegment src, int srcDevice, long count) {
        var mh$ = cudaMemcpyPeer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyPeer", dst, dstDevice, src, srcDevice, count);
            }
            return (int)mh$.invokeExact(dst, dstDevice, src, srcDevice, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpy2D$descriptor() {
        return cudaMemcpy2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpy2D$handle() {
        return cudaMemcpy2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpy2D$address() {
        return cudaMemcpy2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpy2D(MemorySegment dst, long dpitch, MemorySegment src, long spitch, long width, long height, int kind) {
        var mh$ = cudaMemcpy2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy2D", dst, dpitch, src, spitch, width, height, kind);
            }
            return (int)mh$.invokeExact(dst, dpitch, src, spitch, width, height, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy2DToArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy2DToArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpy2DToArray$descriptor() {
        return cudaMemcpy2DToArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpy2DToArray$handle() {
        return cudaMemcpy2DToArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpy2DToArray$address() {
        return cudaMemcpy2DToArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpy2DToArray(MemorySegment dst, long wOffset, long hOffset, MemorySegment src, long spitch, long width, long height, int kind) {
        var mh$ = cudaMemcpy2DToArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy2DToArray", dst, wOffset, hOffset, src, spitch, width, height, kind);
            }
            return (int)mh$.invokeExact(dst, wOffset, hOffset, src, spitch, width, height, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy2DFromArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy2DFromArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpy2DFromArray$descriptor() {
        return cudaMemcpy2DFromArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpy2DFromArray$handle() {
        return cudaMemcpy2DFromArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpy2DFromArray$address() {
        return cudaMemcpy2DFromArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpy2DFromArray(MemorySegment dst, long dpitch, MemorySegment src, long wOffset, long hOffset, long width, long height, int kind) {
        var mh$ = cudaMemcpy2DFromArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy2DFromArray", dst, dpitch, src, wOffset, hOffset, width, height, kind);
            }
            return (int)mh$.invokeExact(dst, dpitch, src, wOffset, hOffset, width, height, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy2DArrayToArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy2DArrayToArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpy2DArrayToArray$descriptor() {
        return cudaMemcpy2DArrayToArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpy2DArrayToArray$handle() {
        return cudaMemcpy2DArrayToArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpy2DArrayToArray$address() {
        return cudaMemcpy2DArrayToArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpy2DArrayToArray(MemorySegment dst, long wOffsetDst, long hOffsetDst, MemorySegment src, long wOffsetSrc, long hOffsetSrc, long width, long height, int kind) {
        var mh$ = cudaMemcpy2DArrayToArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy2DArrayToArray", dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind);
            }
            return (int)mh$.invokeExact(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, width, height, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyToSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyToSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpyToSymbol$descriptor() {
        return cudaMemcpyToSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpyToSymbol$handle() {
        return cudaMemcpyToSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpyToSymbol$address() {
        return cudaMemcpyToSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpyToSymbol(MemorySegment symbol, MemorySegment src, long count, long offset, int kind) {
        var mh$ = cudaMemcpyToSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyToSymbol", symbol, src, count, offset, kind);
            }
            return (int)mh$.invokeExact(symbol, src, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyFromSymbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyFromSymbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpyFromSymbol$descriptor() {
        return cudaMemcpyFromSymbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpyFromSymbol$handle() {
        return cudaMemcpyFromSymbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpyFromSymbol$address() {
        return cudaMemcpyFromSymbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpyFromSymbol(MemorySegment dst, MemorySegment symbol, long count, long offset, int kind) {
        var mh$ = cudaMemcpyFromSymbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyFromSymbol", dst, symbol, count, offset, kind);
            }
            return (int)mh$.invokeExact(dst, symbol, count, offset, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpyAsync$descriptor() {
        return cudaMemcpyAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpyAsync$handle() {
        return cudaMemcpyAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpyAsync$address() {
        return cudaMemcpyAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpyAsync(MemorySegment dst, MemorySegment src, long count, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpyAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyAsync", dst, src, count, kind, stream);
            }
            return (int)mh$.invokeExact(dst, src, count, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyPeerAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyPeerAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpyPeerAsync$descriptor() {
        return cudaMemcpyPeerAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpyPeerAsync$handle() {
        return cudaMemcpyPeerAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpyPeerAsync$address() {
        return cudaMemcpyPeerAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpyPeerAsync(MemorySegment dst, int dstDevice, MemorySegment src, int srcDevice, long count, MemorySegment stream) {
        var mh$ = cudaMemcpyPeerAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyPeerAsync", dst, dstDevice, src, srcDevice, count, stream);
            }
            return (int)mh$.invokeExact(dst, dstDevice, src, srcDevice, count, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy2DAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy2DAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpy2DAsync$descriptor() {
        return cudaMemcpy2DAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpy2DAsync$handle() {
        return cudaMemcpy2DAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpy2DAsync$address() {
        return cudaMemcpy2DAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpy2DAsync(MemorySegment dst, long dpitch, MemorySegment src, long spitch, long width, long height, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpy2DAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy2DAsync", dst, dpitch, src, spitch, width, height, kind, stream);
            }
            return (int)mh$.invokeExact(dst, dpitch, src, spitch, width, height, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy2DToArrayAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy2DToArrayAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpy2DToArrayAsync$descriptor() {
        return cudaMemcpy2DToArrayAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpy2DToArrayAsync$handle() {
        return cudaMemcpy2DToArrayAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpy2DToArrayAsync$address() {
        return cudaMemcpy2DToArrayAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpy2DToArrayAsync(MemorySegment dst, long wOffset, long hOffset, MemorySegment src, long spitch, long width, long height, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpy2DToArrayAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy2DToArrayAsync", dst, wOffset, hOffset, src, spitch, width, height, kind, stream);
            }
            return (int)mh$.invokeExact(dst, wOffset, hOffset, src, spitch, width, height, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpy2DFromArrayAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpy2DFromArrayAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpy2DFromArrayAsync$descriptor() {
        return cudaMemcpy2DFromArrayAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpy2DFromArrayAsync$handle() {
        return cudaMemcpy2DFromArrayAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpy2DFromArrayAsync$address() {
        return cudaMemcpy2DFromArrayAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpy2DFromArrayAsync(MemorySegment dst, long dpitch, MemorySegment src, long wOffset, long hOffset, long width, long height, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpy2DFromArrayAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpy2DFromArrayAsync", dst, dpitch, src, wOffset, hOffset, width, height, kind, stream);
            }
            return (int)mh$.invokeExact(dst, dpitch, src, wOffset, hOffset, width, height, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyToSymbolAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyToSymbolAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpyToSymbolAsync$descriptor() {
        return cudaMemcpyToSymbolAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpyToSymbolAsync$handle() {
        return cudaMemcpyToSymbolAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpyToSymbolAsync$address() {
        return cudaMemcpyToSymbolAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpyToSymbolAsync(MemorySegment symbol, MemorySegment src, long count, long offset, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpyToSymbolAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyToSymbolAsync", symbol, src, count, offset, kind, stream);
            }
            return (int)mh$.invokeExact(symbol, src, count, offset, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyFromSymbolAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyFromSymbolAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpyFromSymbolAsync$descriptor() {
        return cudaMemcpyFromSymbolAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpyFromSymbolAsync$handle() {
        return cudaMemcpyFromSymbolAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpyFromSymbolAsync$address() {
        return cudaMemcpyFromSymbolAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpyFromSymbolAsync(MemorySegment dst, MemorySegment symbol, long count, long offset, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpyFromSymbolAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyFromSymbolAsync", dst, symbol, count, offset, kind, stream);
            }
            return (int)mh$.invokeExact(dst, symbol, count, offset, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset(void *devPtr, int value, size_t count)
     * }
     */
    public static FunctionDescriptor cudaMemset$descriptor() {
        return cudaMemset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset(void *devPtr, int value, size_t count)
     * }
     */
    public static MethodHandle cudaMemset$handle() {
        return cudaMemset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset(void *devPtr, int value, size_t count)
     * }
     */
    public static MemorySegment cudaMemset$address() {
        return cudaMemset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset(void *devPtr, int value, size_t count)
     * }
     */
    public static int cudaMemset(MemorySegment devPtr, int value, long count) {
        var mh$ = cudaMemset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemset", devPtr, value, count);
            }
            return (int)mh$.invokeExact(devPtr, value, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemset2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemset2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height)
     * }
     */
    public static FunctionDescriptor cudaMemset2D$descriptor() {
        return cudaMemset2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height)
     * }
     */
    public static MethodHandle cudaMemset2D$handle() {
        return cudaMemset2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height)
     * }
     */
    public static MemorySegment cudaMemset2D$address() {
        return cudaMemset2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height)
     * }
     */
    public static int cudaMemset2D(MemorySegment devPtr, long pitch, int value, long width, long height) {
        var mh$ = cudaMemset2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemset2D", devPtr, pitch, value, width, height);
            }
            return (int)mh$.invokeExact(devPtr, pitch, value, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemset3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            cudaPitchedPtr.layout(),
            PanamaFFMAPI.C_INT,
            cudaExtent.layout()
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemset3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent)
     * }
     */
    public static FunctionDescriptor cudaMemset3D$descriptor() {
        return cudaMemset3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent)
     * }
     */
    public static MethodHandle cudaMemset3D$handle() {
        return cudaMemset3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent)
     * }
     */
    public static MemorySegment cudaMemset3D$address() {
        return cudaMemset3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent)
     * }
     */
    public static int cudaMemset3D(MemorySegment pitchedDevPtr, int value, MemorySegment extent) {
        var mh$ = cudaMemset3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemset3D", pitchedDevPtr, value, extent);
            }
            return (int)mh$.invokeExact(pitchedDevPtr, value, extent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemsetAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemsetAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemsetAsync$descriptor() {
        return cudaMemsetAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemsetAsync$handle() {
        return cudaMemsetAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemsetAsync$address() {
        return cudaMemsetAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream)
     * }
     */
    public static int cudaMemsetAsync(MemorySegment devPtr, int value, long count, MemorySegment stream) {
        var mh$ = cudaMemsetAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemsetAsync", devPtr, value, count, stream);
            }
            return (int)mh$.invokeExact(devPtr, value, count, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemset2DAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemset2DAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemset2DAsync$descriptor() {
        return cudaMemset2DAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemset2DAsync$handle() {
        return cudaMemset2DAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemset2DAsync$address() {
        return cudaMemset2DAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream)
     * }
     */
    public static int cudaMemset2DAsync(MemorySegment devPtr, long pitch, int value, long width, long height, MemorySegment stream) {
        var mh$ = cudaMemset2DAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemset2DAsync", devPtr, pitch, value, width, height, stream);
            }
            return (int)mh$.invokeExact(devPtr, pitch, value, width, height, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemset3DAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            cudaPitchedPtr.layout(),
            PanamaFFMAPI.C_INT,
            cudaExtent.layout(),
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemset3DAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemset3DAsync$descriptor() {
        return cudaMemset3DAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemset3DAsync$handle() {
        return cudaMemset3DAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemset3DAsync$address() {
        return cudaMemset3DAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream)
     * }
     */
    public static int cudaMemset3DAsync(MemorySegment pitchedDevPtr, int value, MemorySegment extent, MemorySegment stream) {
        var mh$ = cudaMemset3DAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemset3DAsync", pitchedDevPtr, value, extent, stream);
            }
            return (int)mh$.invokeExact(pitchedDevPtr, value, extent, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetSymbolAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetSymbolAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol)
     * }
     */
    public static FunctionDescriptor cudaGetSymbolAddress$descriptor() {
        return cudaGetSymbolAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol)
     * }
     */
    public static MethodHandle cudaGetSymbolAddress$handle() {
        return cudaGetSymbolAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol)
     * }
     */
    public static MemorySegment cudaGetSymbolAddress$address() {
        return cudaGetSymbolAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol)
     * }
     */
    public static int cudaGetSymbolAddress(MemorySegment devPtr, MemorySegment symbol) {
        var mh$ = cudaGetSymbolAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetSymbolAddress", devPtr, symbol);
            }
            return (int)mh$.invokeExact(devPtr, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaGetSymbolSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaGetSymbolSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol)
     * }
     */
    public static FunctionDescriptor cudaGetSymbolSize$descriptor() {
        return cudaGetSymbolSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol)
     * }
     */
    public static MethodHandle cudaGetSymbolSize$handle() {
        return cudaGetSymbolSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol)
     * }
     */
    public static MemorySegment cudaGetSymbolSize$address() {
        return cudaGetSymbolSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol)
     * }
     */
    public static int cudaGetSymbolSize(MemorySegment size, MemorySegment symbol) {
        var mh$ = cudaGetSymbolSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaGetSymbolSize", size, symbol);
            }
            return (int)mh$.invokeExact(size, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPrefetchAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPrefetchAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemPrefetchAsync$descriptor() {
        return cudaMemPrefetchAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemPrefetchAsync$handle() {
        return cudaMemPrefetchAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemPrefetchAsync$address() {
        return cudaMemPrefetchAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream)
     * }
     */
    public static int cudaMemPrefetchAsync(MemorySegment devPtr, long count, int dstDevice, MemorySegment stream) {
        var mh$ = cudaMemPrefetchAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPrefetchAsync", devPtr, count, dstDevice, stream);
            }
            return (int)mh$.invokeExact(devPtr, count, dstDevice, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPrefetchAsync_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            cudaMemLocation.layout(),
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPrefetchAsync_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync_v2(const void *devPtr, size_t count, struct cudaMemLocation location, unsigned int flags, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemPrefetchAsync_v2$descriptor() {
        return cudaMemPrefetchAsync_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync_v2(const void *devPtr, size_t count, struct cudaMemLocation location, unsigned int flags, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemPrefetchAsync_v2$handle() {
        return cudaMemPrefetchAsync_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync_v2(const void *devPtr, size_t count, struct cudaMemLocation location, unsigned int flags, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemPrefetchAsync_v2$address() {
        return cudaMemPrefetchAsync_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPrefetchAsync_v2(const void *devPtr, size_t count, struct cudaMemLocation location, unsigned int flags, cudaStream_t stream)
     * }
     */
    public static int cudaMemPrefetchAsync_v2(MemorySegment devPtr, long count, MemorySegment location, int flags, MemorySegment stream) {
        var mh$ = cudaMemPrefetchAsync_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPrefetchAsync_v2", devPtr, count, location, flags, stream);
            }
            return (int)mh$.invokeExact(devPtr, count, location, flags, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemAdvise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemAdvise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device)
     * }
     */
    public static FunctionDescriptor cudaMemAdvise$descriptor() {
        return cudaMemAdvise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device)
     * }
     */
    public static MethodHandle cudaMemAdvise$handle() {
        return cudaMemAdvise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device)
     * }
     */
    public static MemorySegment cudaMemAdvise$address() {
        return cudaMemAdvise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device)
     * }
     */
    public static int cudaMemAdvise(MemorySegment devPtr, long count, int advice, int device) {
        var mh$ = cudaMemAdvise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemAdvise", devPtr, count, advice, device);
            }
            return (int)mh$.invokeExact(devPtr, count, advice, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemAdvise_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            cudaMemLocation.layout()
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemAdvise_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise_v2(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, struct cudaMemLocation location)
     * }
     */
    public static FunctionDescriptor cudaMemAdvise_v2$descriptor() {
        return cudaMemAdvise_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise_v2(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, struct cudaMemLocation location)
     * }
     */
    public static MethodHandle cudaMemAdvise_v2$handle() {
        return cudaMemAdvise_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise_v2(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, struct cudaMemLocation location)
     * }
     */
    public static MemorySegment cudaMemAdvise_v2$address() {
        return cudaMemAdvise_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemAdvise_v2(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, struct cudaMemLocation location)
     * }
     */
    public static int cudaMemAdvise_v2(MemorySegment devPtr, long count, int advice, MemorySegment location) {
        var mh$ = cudaMemAdvise_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemAdvise_v2", devPtr, count, advice, location);
            }
            return (int)mh$.invokeExact(devPtr, count, advice, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemRangeGetAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemRangeGetAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count)
     * }
     */
    public static FunctionDescriptor cudaMemRangeGetAttribute$descriptor() {
        return cudaMemRangeGetAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count)
     * }
     */
    public static MethodHandle cudaMemRangeGetAttribute$handle() {
        return cudaMemRangeGetAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count)
     * }
     */
    public static MemorySegment cudaMemRangeGetAttribute$address() {
        return cudaMemRangeGetAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count)
     * }
     */
    public static int cudaMemRangeGetAttribute(MemorySegment data, long dataSize, int attribute, MemorySegment devPtr, long count) {
        var mh$ = cudaMemRangeGetAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemRangeGetAttribute", data, dataSize, attribute, devPtr, count);
            }
            return (int)mh$.invokeExact(data, dataSize, attribute, devPtr, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemRangeGetAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemRangeGetAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count)
     * }
     */
    public static FunctionDescriptor cudaMemRangeGetAttributes$descriptor() {
        return cudaMemRangeGetAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count)
     * }
     */
    public static MethodHandle cudaMemRangeGetAttributes$handle() {
        return cudaMemRangeGetAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count)
     * }
     */
    public static MemorySegment cudaMemRangeGetAttributes$address() {
        return cudaMemRangeGetAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count)
     * }
     */
    public static int cudaMemRangeGetAttributes(MemorySegment data, MemorySegment dataSizes, MemorySegment attributes, long numAttributes, MemorySegment devPtr, long count) {
        var mh$ = cudaMemRangeGetAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemRangeGetAttributes", data, dataSizes, attributes, numAttributes, devPtr, count);
            }
            return (int)mh$.invokeExact(data, dataSizes, attributes, numAttributes, devPtr, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyToArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyToArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpyToArray$descriptor() {
        return cudaMemcpyToArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpyToArray$handle() {
        return cudaMemcpyToArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpyToArray$address() {
        return cudaMemcpyToArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpyToArray(MemorySegment dst, long wOffset, long hOffset, MemorySegment src, long count, int kind) {
        var mh$ = cudaMemcpyToArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyToArray", dst, wOffset, hOffset, src, count, kind);
            }
            return (int)mh$.invokeExact(dst, wOffset, hOffset, src, count, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyFromArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyFromArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpyFromArray$descriptor() {
        return cudaMemcpyFromArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpyFromArray$handle() {
        return cudaMemcpyFromArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpyFromArray$address() {
        return cudaMemcpyFromArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpyFromArray(MemorySegment dst, MemorySegment src, long wOffset, long hOffset, long count, int kind) {
        var mh$ = cudaMemcpyFromArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyFromArray", dst, src, wOffset, hOffset, count, kind);
            }
            return (int)mh$.invokeExact(dst, src, wOffset, hOffset, count, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyArrayToArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyArrayToArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static FunctionDescriptor cudaMemcpyArrayToArray$descriptor() {
        return cudaMemcpyArrayToArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MethodHandle cudaMemcpyArrayToArray$handle() {
        return cudaMemcpyArrayToArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static MemorySegment cudaMemcpyArrayToArray$address() {
        return cudaMemcpyArrayToArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind)
     * }
     */
    public static int cudaMemcpyArrayToArray(MemorySegment dst, long wOffsetDst, long hOffsetDst, MemorySegment src, long wOffsetSrc, long hOffsetSrc, long count, int kind) {
        var mh$ = cudaMemcpyArrayToArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyArrayToArray", dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind);
            }
            return (int)mh$.invokeExact(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyToArrayAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyToArrayAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpyToArrayAsync$descriptor() {
        return cudaMemcpyToArrayAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpyToArrayAsync$handle() {
        return cudaMemcpyToArrayAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpyToArrayAsync$address() {
        return cudaMemcpyToArrayAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpyToArrayAsync(MemorySegment dst, long wOffset, long hOffset, MemorySegment src, long count, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpyToArrayAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyToArrayAsync", dst, wOffset, hOffset, src, count, kind, stream);
            }
            return (int)mh$.invokeExact(dst, wOffset, hOffset, src, count, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemcpyFromArrayAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemcpyFromArrayAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static FunctionDescriptor cudaMemcpyFromArrayAsync$descriptor() {
        return cudaMemcpyFromArrayAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MethodHandle cudaMemcpyFromArrayAsync$handle() {
        return cudaMemcpyFromArrayAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static MemorySegment cudaMemcpyFromArrayAsync$address() {
        return cudaMemcpyFromArrayAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
     * }
     */
    public static int cudaMemcpyFromArrayAsync(MemorySegment dst, MemorySegment src, long wOffset, long hOffset, long count, int kind, MemorySegment stream) {
        var mh$ = cudaMemcpyFromArrayAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemcpyFromArrayAsync", dst, src, wOffset, hOffset, count, kind, stream);
            }
            return (int)mh$.invokeExact(dst, src, wOffset, hOffset, count, kind, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMallocAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMallocAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocAsync(void **devPtr, size_t size, cudaStream_t hStream)
     * }
     */
    public static FunctionDescriptor cudaMallocAsync$descriptor() {
        return cudaMallocAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocAsync(void **devPtr, size_t size, cudaStream_t hStream)
     * }
     */
    public static MethodHandle cudaMallocAsync$handle() {
        return cudaMallocAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocAsync(void **devPtr, size_t size, cudaStream_t hStream)
     * }
     */
    public static MemorySegment cudaMallocAsync$address() {
        return cudaMallocAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMallocAsync(void **devPtr, size_t size, cudaStream_t hStream)
     * }
     */
    public static int cudaMallocAsync(MemorySegment devPtr, long size, MemorySegment hStream) {
        var mh$ = cudaMallocAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMallocAsync", devPtr, size, hStream);
            }
            return (int)mh$.invokeExact(devPtr, size, hStream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaFreeAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_POINTER
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaFreeAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeAsync(void *devPtr, cudaStream_t hStream)
     * }
     */
    public static FunctionDescriptor cudaFreeAsync$descriptor() {
        return cudaFreeAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeAsync(void *devPtr, cudaStream_t hStream)
     * }
     */
    public static MethodHandle cudaFreeAsync$handle() {
        return cudaFreeAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeAsync(void *devPtr, cudaStream_t hStream)
     * }
     */
    public static MemorySegment cudaFreeAsync$address() {
        return cudaFreeAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaFreeAsync(void *devPtr, cudaStream_t hStream)
     * }
     */
    public static int cudaFreeAsync(MemorySegment devPtr, MemorySegment hStream) {
        var mh$ = cudaFreeAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaFreeAsync", devPtr, hStream);
            }
            return (int)mh$.invokeExact(devPtr, hStream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cudaMemPoolTrimTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PanamaFFMAPI.C_INT,
            PanamaFFMAPI.C_POINTER,
            PanamaFFMAPI.C_LONG
        );

        public static final MemorySegment ADDR = PanamaFFMAPI.findOrThrow("cudaMemPoolTrimTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep)
     * }
     */
    public static FunctionDescriptor cudaMemPoolTrimTo$descriptor() {
        return cudaMemPoolTrimTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep)
     * }
     */
    public static MethodHandle cudaMemPoolTrimTo$handle() {
        return cudaMemPoolTrimTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep)
     * }
     */
    public static MemorySegment cudaMemPoolTrimTo$address() {
        return cudaMemPoolTrimTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep)
     * }
     */
    public static int cudaMemPoolTrimTo(MemorySegment memPool, long minBytesToKeep) {
        var mh$ = cudaMemPoolTrimTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cudaMemPoolTrimTo", memPool, minBytesToKeep);
            }
            return (int)mh$.invokeExact(memPool, minBytesToKeep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}
