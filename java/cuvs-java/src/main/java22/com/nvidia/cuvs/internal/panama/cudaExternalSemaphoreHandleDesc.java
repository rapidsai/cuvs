/*
 * Copyright (c) 2025, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE: PLEASE DO NOT EDIT THIS FILE MANUALLY
// Generated by jextract

package com.nvidia.cuvs.internal.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cudaExternalSemaphoreHandleDesc {
 *     enum cudaExternalSemaphoreHandleType type;
 *     union {
 *         int fd;
 *         struct {
 *             void *handle;
 *             const void *name;
 *         } win32;
 *         const void *nvSciSyncObj;
 *     } handle;
 *     unsigned int flags;
 * }
 * }
 */
public class cudaExternalSemaphoreHandleDesc {

    cudaExternalSemaphoreHandleDesc() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PanamaFFMAPI.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        cudaExternalSemaphoreHandleDesc.handle.layout().withName("handle"),
        PanamaFFMAPI.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4)
    ).withName("cudaExternalSemaphoreHandleDesc");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum cudaExternalSemaphoreHandleType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     int fd;
     *     struct {
     *         void *handle;
     *         const void *name;
     *     } win32;
     *     const void *nvSciSyncObj;
     * }
     * }
     */
    public static class handle {

        handle() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            PanamaFFMAPI.C_INT.withName("fd"),
            cudaExternalSemaphoreHandleDesc.handle.win32.layout().withName("win32"),
            PanamaFFMAPI.C_POINTER.withName("nvSciSyncObj")
        ).withName("$anon$2645:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int fd
         * }
         */
        public static final OfInt fd$layout() {
            return fd$LAYOUT;
        }

        private static final long fd$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int fd
         * }
         */
        public static final long fd$offset() {
            return fd$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int fd
         * }
         */
        public static int fd(MemorySegment union) {
            return union.get(fd$LAYOUT, fd$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int fd
         * }
         */
        public static void fd(MemorySegment union, int fieldValue) {
            union.set(fd$LAYOUT, fd$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     void *handle;
         *     const void *name;
         * }
         * }
         */
        public static class win32 {

            win32() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                PanamaFFMAPI.C_POINTER.withName("handle"),
                PanamaFFMAPI.C_POINTER.withName("name")
            ).withName("$anon$2668:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout handle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("handle"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void *handle
             * }
             */
            public static final AddressLayout handle$layout() {
                return handle$LAYOUT;
            }

            private static final long handle$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void *handle
             * }
             */
            public static final long handle$offset() {
                return handle$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void *handle
             * }
             */
            public static MemorySegment handle(MemorySegment struct) {
                return struct.get(handle$LAYOUT, handle$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void *handle
             * }
             */
            public static void handle(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(handle$LAYOUT, handle$OFFSET, fieldValue);
            }

            private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * const void *name
             * }
             */
            public static final AddressLayout name$layout() {
                return name$LAYOUT;
            }

            private static final long name$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * const void *name
             * }
             */
            public static final long name$offset() {
                return name$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * const void *name
             * }
             */
            public static MemorySegment name(MemorySegment struct) {
                return struct.get(name$LAYOUT, name$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * const void *name
             * }
             */
            public static void name(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(name$LAYOUT, name$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout win32$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("win32"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     void *handle;
         *     const void *name;
         * } win32
         * }
         */
        public static final GroupLayout win32$layout() {
            return win32$LAYOUT;
        }

        private static final long win32$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     void *handle;
         *     const void *name;
         * } win32
         * }
         */
        public static final long win32$offset() {
            return win32$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     void *handle;
         *     const void *name;
         * } win32
         * }
         */
        public static MemorySegment win32(MemorySegment union) {
            return union.asSlice(win32$OFFSET, win32$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     void *handle;
         *     const void *name;
         * } win32
         * }
         */
        public static void win32(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, win32$OFFSET, win32$LAYOUT.byteSize());
        }

        private static final AddressLayout nvSciSyncObj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nvSciSyncObj"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const void *nvSciSyncObj
         * }
         */
        public static final AddressLayout nvSciSyncObj$layout() {
            return nvSciSyncObj$LAYOUT;
        }

        private static final long nvSciSyncObj$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const void *nvSciSyncObj
         * }
         */
        public static final long nvSciSyncObj$offset() {
            return nvSciSyncObj$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const void *nvSciSyncObj
         * }
         */
        public static MemorySegment nvSciSyncObj(MemorySegment union) {
            return union.get(nvSciSyncObj$LAYOUT, nvSciSyncObj$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const void *nvSciSyncObj
         * }
         */
        public static void nvSciSyncObj(MemorySegment union, MemorySegment fieldValue) {
            union.set(nvSciSyncObj$LAYOUT, nvSciSyncObj$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout handle$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("handle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     int fd;
     *     struct {
     *         void *handle;
     *         const void *name;
     *     } win32;
     *     const void *nvSciSyncObj;
     * } handle
     * }
     */
    public static final GroupLayout handle$layout() {
        return handle$LAYOUT;
    }

    private static final long handle$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     int fd;
     *     struct {
     *         void *handle;
     *         const void *name;
     *     } win32;
     *     const void *nvSciSyncObj;
     * } handle
     * }
     */
    public static final long handle$offset() {
        return handle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     int fd;
     *     struct {
     *         void *handle;
     *         const void *name;
     *     } win32;
     *     const void *nvSciSyncObj;
     * } handle
     * }
     */
    public static MemorySegment handle(MemorySegment struct) {
        return struct.asSlice(handle$OFFSET, handle$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     int fd;
     *     struct {
     *         void *handle;
     *         const void *name;
     *     } win32;
     *     const void *nvSciSyncObj;
     * } handle
     * }
     */
    public static void handle(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, handle$OFFSET, handle$LAYOUT.byteSize());
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
