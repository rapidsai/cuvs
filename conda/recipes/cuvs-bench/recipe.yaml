# Copyright (c) 2025, NVIDIA CORPORATION.
schema_version: 1

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  minor_version: ${{ (version | split("."))[:2] | join(".") }}
  cuda_version: ${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[:2] | join(".") }}
  cuda_major: '${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[0] }}'
  date_string: '${{ env.get("RAPIDS_DATE_STRING") }}'
  py_version: ${{ env.get("RAPIDS_PY_VERSION") }}
  py_buildstring: ${{ py_version | version_to_buildstring }}
  head_rev: ${{ git.head_rev(".")[:8] }}

package:
  name: cuvs-bench
  version: ${{ version }}

source:
  path: ../../..

build:
  string: cuda${{ cuda_major }}_py${{ py_buildstring }}_${{ date_string }}_${{ head_rev }}
  script:
    content: |
      ./build.sh bench-ann --allgpuarch --no-nvtx --build-metrics=bench_ann --incl-cache-stats
      cmake --install cpp/build --component ann_bench
    secrets:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
    env:
      CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
      CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER") }}
      CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
      CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
      SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
      SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
      SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
      SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
      SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
      SCCACHE_S3_KEY_PREFIX: cuvs-bench-${{ env.get("RAPIDS_CONDA_ARCH") }}

requirements:
  build:
    - cmake ${{ cmake_version }}
    - ninja
    - ${{ compiler("c") }}
    - ${{ compiler("cxx") }}
    - ${{ compiler("cuda") }}
    - cuda-version =${{ cuda_version }}
    - ${{ stdlib("c") }}
  host:
    - benchmark
    - cuda-version =${{ cuda_version }}
    - glog ${{ glog_version }}
    - libcuvs =${{ version }}
    - nlohmann_json ${{ nlohmann_json_version }}
    - openblas
    - python =${{ py_version }}
    - rapids-build-backend >=0.3.0,<0.4.0.dev0
    # rmm is needed to determine if package is gpu-enabled
    - rmm =${{ minor_version }}
    - setuptools >=64.0.0
    - if: linux-64
      then:
        - libaio
        - libboost-devel =1.87
        - mkl-devel =2023
    - if: cuda_major == "11"
      then:
        - cuda-profiler-api ${{ cuda11_cuda_profiler_api_run_version }}
        - libcublas ${{ cuda11_libcublas_host_version }}
        - libcublas-dev ${{ cuda11_libcublas_host_version }}
      else:
        - cuda-cudart-dev
        - cuda-profiler-api
        - libcublas-dev
  run:
    - benchmark
    - click
    - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
    - glog ${{ glog_version }}
    - cuvs =${{ version }}
    - h5py ${{ h5py_version }}
    - matplotlib-base
    - pandas
    - pyyaml
    - pylibraft =${{ minor_version }}
    - python
    - requests
    # rmm is needed to determine if package is gpu-enabled
    - rmm =${{ minor_version }}
    - scikit-learn>=1.5
    - if: linux-64
      then: mkl =2023
    - if: cuda_major == "11"
      then:
        - cudatoolkit
      else:
        - cuda-cudart
        - cupy >=12.0.0
        - libcublas
  ignore_run_exports:
    by_name:
      - cuda-version
      - cuda-cudart
      - if: cuda_major == "11"
        then: cudatoolkit

about:
  homepage: ${{ load_from_file("python/cuvs_bench/pyproject.toml").project.urls.Homepage }}
  license: ${{ load_from_file("python/cuvs_bench/pyproject.toml").project.license.text }}
  summary: ${{ load_from_file("python/cuvs_bench/pyproject.toml").project.description }}
