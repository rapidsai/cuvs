# SPDX-FileCopyrightText: Copyright (c) 2025, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0
schema_version: 1

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  minor_version: ${{ (version | split("."))[:2] | join(".") }}
  cuda_version: ${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[:2] | join(".") }}
  cuda_major: '${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[0] }}'
  date_string: '${{ env.get("RAPIDS_DATE_STRING") }}'
  head_rev: '${{ git.head_rev(".")[:8] }}'
  linux64: ${{ linux and x86_64 }}

recipe:
  name: libcuvs-split

cache:
  source:
    path: ../../..

  build:
    script:
      content: |

        # Remove `-fdebug-prefix-map` line from CFLAGS and CXXFLAGS so the
        # incrementing version number in the compile line doesn't break the
        # cache
        set -x
        export CFLAGS=$(echo $CFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
        export CXXFLAGS=$(echo $CXXFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
        set +x

        ./build.sh libcuvs bench-ann tests --allgpuarch --build-metrics=compile_lib --incl-cache-stats --no-nvtx -n

      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_SESSION_TOKEN
      env:
        CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
        CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER") }}
        CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
        CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
        PARALLEL_LEVEL: ${{ env.get("PARALLEL_LEVEL") }}
        RAPIDS_ARTIFACTS_DIR: ${{ env.get("RAPIDS_ARTIFACTS_DIR") }}
        SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
        SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
        SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
        SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
        SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
        SCCACHE_S3_KEY_PREFIX: libcuvs/${{ env.get("RAPIDS_CONDA_ARCH") }}/cuda${{ cuda_major }}
  requirements:
    build:
      - ${{ compiler("c") }}
      - ${{ compiler("cxx") }}
      - ${{ compiler("cuda") }}
      - cuda-version =${{ cuda_version }}
      - cmake ${{ cmake_version }}
      - ninja
      - ${{ stdlib("c") }}
    host:
      - librmm =${{ minor_version }}
      - libraft-headers =${{ minor_version }}
      - nccl ${{ nccl_version }}
      - cuda-version =${{ cuda_version }}
      - cuda-cudart-dev
      - cuda-profiler-api
      - libcublas-dev
      - libcurand-dev
      - libcusolver-dev
      - libcusparse-dev
      # These are used for bench-ann
      - openblas
      - if: linux64
        then:
          - libaio
          - libboost-devel =1.87
          - mkl-devel =2023

outputs:
  - package:
      name: libcuvs
      version: ${{ version }}
    build:
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ head_rev }}
      dynamic_linking:
        overlinking_behavior: "error"
      prefix_detection:
        ignore_binary_files: True
      script:
        content: |
          cmake --install cpp/build --component cuvs
          cmake --install cpp/build --component c_api
          cmake --install cpp/build --component hnswlib
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ stdlib("c") }}
      host:
        - librmm =${{ minor_version }}
        - libraft-headers =${{ minor_version }}
        - nccl ${{ nccl_version }}
        - cuda-version =${{ cuda_version }}
        - cuda-cudart-dev
        - cuda-profiler-api
        - libcublas-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
      run:
        - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
        - libraft-headers =${{ minor_version }}
        - nccl
        - cuda-cudart
        - libcublas
        - libcurand
        - libcusolver
        - libcusparse
      ignore_run_exports:
        by_name:
          - cuda-cudart
          - cuda-version
          - libaio
          - libboost
          - libcublas
          - libcurand
          - libcusolver
          - libcusparse
          - librmm
          - mkl
          - nccl
    about:
      homepage: ${{ load_from_file("python/libcuvs/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libcuvs/pyproject.toml").project.license.text }}
      summary: ${{ load_from_file("python/libcuvs/pyproject.toml").project.description }}

  - package:
      name: libcuvs-static
      version: ${{ version }}
    build:
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ head_rev }}
      dynamic_linking:
        overlinking_behavior: "error"
      prefix_detection:
        ignore_binary_files: True
      script:
        content: |
          cmake --install cpp/build --component cuvs_static
          cmake --install cpp/build --component c_api
          cmake --install cpp/build --component hnswlib
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ stdlib("c") }}
      host:
        - librmm =${{ minor_version }}
        - libraft-headers =${{ minor_version }}
        - nccl ${{ nccl_version }}
        - cuda-version =${{ cuda_version }}
        - cuda-cudart-dev
        - cuda-profiler-api
        - libcublas-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
      run:
        - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
        - libraft-headers =${{ minor_version }}
        - nccl
        - cuda-cudart
        - libcublas
        - libcurand
        - libcusolver
        - libcusparse
      ignore_run_exports:
        by_name:
          - cuda-cudart
          - cuda-version
          - libaio
          - libboost
          - libcublas
          - libcurand
          - libcusolver
          - libcusparse
          - librmm
          - mkl
          - nccl
    about:
      homepage: ${{ load_from_file("python/libcuvs/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libcuvs/pyproject.toml").project.license.text }}
      summary: ${{ load_from_file("python/libcuvs/pyproject.toml").project.description }}

  - package:
      name: libcuvs-tests
      version: ${{ version }}
    build:
      script: cmake --install cpp/build --component testing
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ head_rev }}
      dynamic_linking:
        overlinking_behavior: "error"
      prefix_detection:
        ignore_binary_files: True
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ stdlib("c") }}
      host:
        - librmm =${{ minor_version }}
        - libraft-headers =${{ minor_version }}
        - nccl ${{ nccl_version }}
        - ${{ pin_subpackage("libcuvs", exact=True) }}
        - cuda-version =${{ cuda_version }}
        - openblas  # required by some CPU algos in benchmarks
        - cuda-cudart-dev
        - cuda-profiler-api
        - libcublas-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
      run:
        - ${{ pin_subpackage("libcuvs", exact=True) }}
        - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
        - libraft-headers =${{ minor_version }}
        - nccl
        - cuda-cudart
        - libcublas
        - libcurand
        - libcusolver
        - libcusparse
      ignore_run_exports:
        by_name:
          - cuda-cudart
          - cuda-version
          - libaio
          - libboost
          - libcublas
          - libcurand
          - libcusolver
          - libcusparse
          - librmm
          - mkl
          - nccl
    about:
      homepage: ${{ load_from_file("python/libcuvs/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libcuvs/pyproject.toml").project.license.text }}
      summary: libcuvs test executables

  - package:
      name: libcuvs-examples
      version: ${{ version }}
    build:
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ head_rev }}
      dynamic_linking:
        overlinking_behavior: "error"
      prefix_detection:
        ignore_binary_files: True
      script:
        content: |
          # Remove `-fdebug-prefix-map` line from CFLAGS and CXXFLAGS so the
          # incrementing version number in the compile line doesn't break the
          # cache
          set -x
          export CFLAGS=$(echo $CFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
          export CXXFLAGS=$(echo $CXXFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
          set +x

          ./build.sh examples

        secrets:
          - AWS_ACCESS_KEY_ID
          - AWS_SECRET_ACCESS_KEY
          - AWS_SESSION_TOKEN
        env:
          CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
          CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER") }}
          CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
          CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
          PARALLEL_LEVEL: ${{ env.get("PARALLEL_LEVEL") }}
          RAPIDS_ARTIFACTS_DIR: ${{ env.get("RAPIDS_ARTIFACTS_DIR") }}
          SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
          SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
          SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
          SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
          SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
          SCCACHE_S3_KEY_PREFIX: libcuvs/${{ env.get("RAPIDS_CONDA_ARCH") }}/cuda${{ cuda_major }}
    requirements:
      build:
        - ${{ compiler("c") }}
        - ${{ compiler("cxx") }}
        - ${{ compiler("cuda") }}
        - cuda-version =${{ cuda_version }}
        - cmake ${{ cmake_version }}
        - ninja
        - ${{ stdlib("c") }}
      host:
        - ${{ pin_subpackage("libcuvs", exact=True) }}
        - cuda-version =${{ cuda_version }}
        - libraft-headers =${{ minor_version }}
        - librmm =${{ minor_version }}
        - nccl ${{ nccl_version }}
        - cuda-cudart-dev
        - cuda-profiler-api
        - libcublas-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
      run:
        - ${{ pin_subpackage("libcuvs", exact=True) }}
        - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
        - nccl
        - cuda-cudart
        - libcublas
        - libcurand
        - libcusolver
        - libcusparse
      ignore_run_exports:
        by_name:
          - cuda-cudart
          - cuda-version
          - libaio
          - libboost
          - libcublas
          - libcurand
          - libcusolver
          - libcusparse
          - librmm
          - mkl
          - nccl
    about:
      homepage: ${{ load_from_file("python/libcuvs/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libcuvs/pyproject.toml").project.license.text }}
      summary: libcuvs example executables

  - package:
      name: libcuvs-bench-ann
      version: ${{ version }}
    build:
      script:
        content: |
          cmake --install cpp/build --component ann_bench

          if [ "$RAPIDS_CONDA_ARCH" != "aarch64" ]; then
            # Need this so from the diskann compile, but there isn't a
            # component associated with it. Probably a better way to do this.
            cp cpp/build/_deps/diskann-build/src/libdiskann.so $PREFIX/lib/
          fi
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ head_rev }}
      dynamic_linking:
        overlinking_behavior: "error"
      prefix_detection:
        ignore_binary_files: True
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ stdlib("c") }}
      host:
        - ${{ pin_subpackage("libcuvs", exact=True) }}
        - cuda-cudart-dev
        - cuda-profiler-api
        - cuda-version =${{ cuda_version }}
        - libcublas-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
        - libgomp
        - libraft-headers =${{ minor_version }}
        - librmm =${{ minor_version }}
        - nccl ${{ nccl_version }}
        - openblas  # required by some CPU algos in benchmarks
        - if: linux64
          then:
            - libaio
            - libboost-devel =1.87
            - mkl-devel =2023
      run:
        - ${{ pin_subpackage("libcuvs", exact=True) }}
        - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
        - cuda-cudart
        - libcublas
        - libcurand
        - libcusolver
        - libcusparse
        - libraft-headers =${{ minor_version }}
        - nccl
        - if: linux64
          then: mkl =2023
      ignore_run_exports:
        by_name:
          - cuda-cudart
          - cuda-version
          - libcublas
          - libcurand
          - libcusolver
          - libcusparse
          - librmm
          - mkl
          - nccl
    about:
      homepage: ${{ load_from_file("python/cuvs_bench/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/cuvs_bench/pyproject.toml").project.license.text }}
      summary: libcuvs benchmark
