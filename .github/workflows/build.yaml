name: build

on:
  push:
    branches:
      - "branch-*"
    tags:
      - v[0-9][0-9].[0-9][0-9].[0-9][0-9]
  workflow_dispatch:
    inputs:
      branch:
        description: |
          branch: git branch the workflow run targets.
          Required even when 'sha' is provided because it is also used for organizing artifacts.
        required: true
        type: string
      date:
        description: "date: Date (YYYY-MM-DD) this run is for. Used to organize artifacts produced by nightly builds"
        required: true
        type: string
      sha:
        description: "sha: full git commit SHA to check out"
        required: true
        type: string
      build_type:
        description: "build_type: one of [branch, nightly, pull-request]"
        type: string
        default: nightly

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  cpp-build:
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/conda-cpp-build.yaml@branch-25.12
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      date: ${{ inputs.date }}
      script: ci/build_cpp.sh
      sha: ${{ inputs.sha }}

  rocky8-clib-standalone-build:
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/custom-job.yaml@branch-25.12
    strategy:
      fail-fast: false
      matrix:
        cuda_version:
          - &latest_cuda12 '12.9.1'
          - &latest_cuda13 '13.0.1'
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      arch: "amd64"
      date: ${{ inputs.date }}
      container_image: "rapidsai/ci-wheel:25.12-cuda${{ matrix.cuda_version }}-rockylinux8-py3.10"
      name:  "${{ matrix.cuda_version }}, amd64, rockylinux8"
      script: ci/build_standalone_c.sh
      artifact-name: "libcuvs_c_${{ matrix.cuda_version }}.tar.gz"
      file_to_upload: "libcuvs_c.tar.gz"
      sha: ${{ inputs.sha }}
  rust-build:
    needs: cpp-build
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/custom-job.yaml@branch-25.12
    # Artifacts are not published from these jobs, so it's safe to run for multiple CUDA versions.
    # If these jobs start producing artifacts, the names will have to differentiate between CUDA versions.
    strategy:
      fail-fast: false
      matrix:
        cuda_version:
          - &latest_cuda12 '12.9.1'
          - &latest_cuda13 '13.0.1'
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      arch: "amd64"
      date: ${{ inputs.date }}
      container_image: "rapidsai/ci-conda:25.12-cuda${{ matrix.cuda_version }}-ubuntu24.04-py3.13"
      node_type: "gpu-l4-latest-1"
      script: "ci/build_rust.sh"
      sha: ${{ inputs.sha }}
  go-build:
    needs: cpp-build
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/custom-job.yaml@branch-25.12
    # Artifacts are not published from these jobs, so it's safe to run for multiple CUDA versions.
    # If these jobs start producing artifacts, the names will have to differentiate between CUDA versions.
    strategy:
      fail-fast: false
      matrix:
        cuda_version:
          - *latest_cuda12
          - *latest_cuda13
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      arch: "amd64"
      date: ${{ inputs.date }}
      container_image: "rapidsai/ci-conda:25.12-cuda${{ matrix.cuda_version }}-ubuntu24.04-py3.13"
      node_type: "gpu-l4-latest-1"
      script: "ci/build_go.sh"
      sha: ${{ inputs.sha }}
  java-build:
    needs: cpp-build
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/custom-job.yaml@branch-25.12
    # Artifacts are not published from these jobs, so it's safe to run for multiple CUDA versions.
    # If these jobs start producing artifacts, the names will have to differentiate between CUDA versions.
    strategy:
      fail-fast: false
      matrix:
        cuda_version:
          - *latest_cuda12
          - *latest_cuda13
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      arch: "amd64"
      date: ${{ inputs.date }}
      container_image: "rapidsai/ci-conda:25.12-cuda${{ matrix.cuda_version }}-ubuntu24.04-py3.13"
      script: "ci/build_java.sh"
      artifact-name: "cuvs-java-cuda${{ matrix.cuda_version }}"
      file_to_upload: "java/cuvs-java/target/"
      sha: ${{ inputs.sha }}
  python-build:
    needs: [cpp-build]
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/conda-python-build.yaml@branch-25.12
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      date: ${{ inputs.date }}
      script: ci/build_python.sh
      sha: ${{ inputs.sha }}
  upload-conda:
    needs: [cpp-build, python-build]
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/conda-upload-packages.yaml@branch-25.12
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      date: ${{ inputs.date }}
      sha: ${{ inputs.sha }}
      skip_upload_pkgs: libcuvs-template
  rust-publish:
    needs: [rust-build, upload-conda]
    secrets: inherit
    uses: ./.github/workflows/publish-rust.yaml
  docs-build:
    if: github.ref_type == 'branch'
    needs: python-build
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/custom-job.yaml@branch-25.12
    with:
      arch: "amd64"
      branch: ${{ inputs.branch }}
      build_type: ${{ inputs.build_type || 'branch' }}
      container_image: "rapidsai/ci-conda:25.12-latest"
      date: ${{ inputs.date }}
      node_type: "gpu-l4-latest-1"
      script: "ci/build_docs.sh"
      sha: ${{ inputs.sha }}
  wheel-build-libcuvs:
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-build.yaml@branch-25.12
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      script: ci/build_wheel_libcuvs.sh
      # build for every combination of arch and CUDA version, but only for the latest Python
      matrix_filter: group_by([.ARCH, (.CUDA_VER|split(".")|map(tonumber)|.[0])]) | map(max_by(.PY_VER|split(".")|map(tonumber)))
      package-name: libcuvs
      package-type: cpp
  wheel-publish-libcuvs:
    needs: wheel-build-libcuvs
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-publish.yaml@branch-25.12
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      package-name: libcuvs
      package-type: cpp
  wheel-build-cuvs:
    needs: wheel-build-libcuvs
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-build.yaml@branch-25.12
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      script: ci/build_wheel_cuvs.sh
      package-name: cuvs
      package-type: python
  wheel-publish-cuvs:
    needs: wheel-build-cuvs
    secrets: inherit
    uses: rapidsai/shared-workflows/.github/workflows/wheels-publish.yaml@branch-25.12
    with:
      build_type: ${{ inputs.build_type || 'branch' }}
      branch: ${{ inputs.branch }}
      sha: ${{ inputs.sha }}
      date: ${{ inputs.date }}
      package-name: cuvs
      package-type: python
